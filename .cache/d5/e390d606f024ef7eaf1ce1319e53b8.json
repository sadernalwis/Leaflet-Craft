{"id":"../node_modules/ramda/dist/ramda.js","dependencies":[{"name":"/Users/sagarpreet.chadha/Desktop/Leaflet-Craft/package.json","includedInParent":true,"mtime":1610347691431},{"name":"/Users/sagarpreet.chadha/Desktop/Leaflet-Craft/.babelrc","includedInParent":true,"mtime":1574079786644},{"name":"/Users/sagarpreet.chadha/Desktop/Leaflet-Craft/node_modules/ramda/package.json","includedInParent":true,"mtime":1610342427925}],"generated":{"js":"var define;\n//  Ramda v0.22.1\n//  https://github.com/ramda/ramda\n//  (c) 2013-2016 Scott Sauyet, Michael Hurley, and David Chambers\n//  Ramda may be freely distributed under the MIT license.\n\n;(function() {\n\n  'use strict';\n\n  /**\n     * A special placeholder value used to specify \"gaps\" within curried functions,\n     * allowing partial application of any combination of arguments, regardless of\n     * their positions.\n     *\n     * If `g` is a curried ternary function and `_` is `R.__`, the following are\n     * equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2, _)(1, 3)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @constant\n     * @memberOf R\n     * @since v0.6.0\n     * @category Function\n     * @example\n     *\n     *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');\n     *      greet('Alice'); //=> 'Hello, Alice!'\n     */\n    var __ = { '@@functional/placeholder': true };\n\n    /* eslint-disable no-unused-vars */\n    var _arity = function _arity(n, fn) {\n        /* eslint-disable no-unused-vars */\n        switch (n) {\n        case 0:\n            return function () {\n                return fn.apply(this, arguments);\n            };\n        case 1:\n            return function (a0) {\n                return fn.apply(this, arguments);\n            };\n        case 2:\n            return function (a0, a1) {\n                return fn.apply(this, arguments);\n            };\n        case 3:\n            return function (a0, a1, a2) {\n                return fn.apply(this, arguments);\n            };\n        case 4:\n            return function (a0, a1, a2, a3) {\n                return fn.apply(this, arguments);\n            };\n        case 5:\n            return function (a0, a1, a2, a3, a4) {\n                return fn.apply(this, arguments);\n            };\n        case 6:\n            return function (a0, a1, a2, a3, a4, a5) {\n                return fn.apply(this, arguments);\n            };\n        case 7:\n            return function (a0, a1, a2, a3, a4, a5, a6) {\n                return fn.apply(this, arguments);\n            };\n        case 8:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n                return fn.apply(this, arguments);\n            };\n        case 9:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n                return fn.apply(this, arguments);\n            };\n        case 10:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n                return fn.apply(this, arguments);\n            };\n        default:\n            throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n        }\n    };\n\n    var _arrayFromIterator = function _arrayFromIterator(iter) {\n        var list = [];\n        var next;\n        while (!(next = iter.next()).done) {\n            list.push(next.value);\n        }\n        return list;\n    };\n\n    var _arrayOf = function _arrayOf() {\n        return Array.prototype.slice.call(arguments);\n    };\n\n    var _cloneRegExp = function _cloneRegExp(pattern) {\n        return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));\n    };\n\n    var _complement = function _complement(f) {\n        return function () {\n            return !f.apply(this, arguments);\n        };\n    };\n\n    /**\n     * Private `concat` function to merge two array-like objects.\n     *\n     * @private\n     * @param {Array|Arguments} [set1=[]] An array-like object.\n     * @param {Array|Arguments} [set2=[]] An array-like object.\n     * @return {Array} A new, merged array.\n     * @example\n     *\n     *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n     */\n    var _concat = function _concat(set1, set2) {\n        set1 = set1 || [];\n        set2 = set2 || [];\n        var idx;\n        var len1 = set1.length;\n        var len2 = set2.length;\n        var result = [];\n        idx = 0;\n        while (idx < len1) {\n            result[result.length] = set1[idx];\n            idx += 1;\n        }\n        idx = 0;\n        while (idx < len2) {\n            result[result.length] = set2[idx];\n            idx += 1;\n        }\n        return result;\n    };\n\n    var _containsWith = function _containsWith(pred, x, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            if (pred(x, list[idx])) {\n                return true;\n            }\n            idx += 1;\n        }\n        return false;\n    };\n\n    var _filter = function _filter(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [];\n        while (idx < len) {\n            if (fn(list[idx])) {\n                result[result.length] = list[idx];\n            }\n            idx += 1;\n        }\n        return result;\n    };\n\n    var _forceReduced = function _forceReduced(x) {\n        return {\n            '@@transducer/value': x,\n            '@@transducer/reduced': true\n        };\n    };\n\n    // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n    var _functionName = function _functionName(f) {\n        // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n        var match = String(f).match(/^function (\\w*)/);\n        return match == null ? '' : match[1];\n    };\n\n    var _has = function _has(prop, obj) {\n        return Object.prototype.hasOwnProperty.call(obj, prop);\n    };\n\n    var _identity = function _identity(x) {\n        return x;\n    };\n\n    var _isArguments = function () {\n        var toString = Object.prototype.toString;\n        return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {\n            return toString.call(x) === '[object Arguments]';\n        } : function _isArguments(x) {\n            return _has('callee', x);\n        };\n    }();\n\n    /**\n     * Tests whether or not an object is an array.\n     *\n     * @private\n     * @param {*} val The object to test.\n     * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n     * @example\n     *\n     *      _isArray([]); //=> true\n     *      _isArray(null); //=> false\n     *      _isArray({}); //=> false\n     */\n    var _isArray = Array.isArray || function _isArray(val) {\n        return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';\n    };\n\n    var _isFunction = function _isFunction(x) {\n        return Object.prototype.toString.call(x) === '[object Function]';\n    };\n\n    /**\n     * Determine if the passed argument is an integer.\n     *\n     * @private\n     * @param {*} n\n     * @category Type\n     * @return {Boolean}\n     */\n    var _isInteger = Number.isInteger || function _isInteger(n) {\n        return n << 0 === n;\n    };\n\n    var _isNumber = function _isNumber(x) {\n        return Object.prototype.toString.call(x) === '[object Number]';\n    };\n\n    var _isObject = function _isObject(x) {\n        return Object.prototype.toString.call(x) === '[object Object]';\n    };\n\n    var _isPlaceholder = function _isPlaceholder(a) {\n        return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n    };\n\n    var _isRegExp = function _isRegExp(x) {\n        return Object.prototype.toString.call(x) === '[object RegExp]';\n    };\n\n    var _isString = function _isString(x) {\n        return Object.prototype.toString.call(x) === '[object String]';\n    };\n\n    var _isTransformer = function _isTransformer(obj) {\n        return typeof obj['@@transducer/step'] === 'function';\n    };\n\n    var _map = function _map(fn, functor) {\n        var idx = 0;\n        var len = functor.length;\n        var result = Array(len);\n        while (idx < len) {\n            result[idx] = fn(functor[idx]);\n            idx += 1;\n        }\n        return result;\n    };\n\n    // Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    var _objectAssign = function _objectAssign(target) {\n        if (target == null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n        var output = Object(target);\n        var idx = 1;\n        var length = arguments.length;\n        while (idx < length) {\n            var source = arguments[idx];\n            if (source != null) {\n                for (var nextKey in source) {\n                    if (_has(nextKey, source)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n            idx += 1;\n        }\n        return output;\n    };\n\n    var _of = function _of(x) {\n        return [x];\n    };\n\n    var _pipe = function _pipe(f, g) {\n        return function () {\n            return g.call(this, f.apply(this, arguments));\n        };\n    };\n\n    var _pipeP = function _pipeP(f, g) {\n        return function () {\n            var ctx = this;\n            return f.apply(ctx, arguments).then(function (x) {\n                return g.call(ctx, x);\n            });\n        };\n    };\n\n    // \\b matches word boundary; [\\b] matches backspace\n    var _quote = function _quote(s) {\n        var escaped = s.replace(/\\\\/g, '\\\\\\\\').replace(/[\\b]/g, '\\\\b')    // \\b matches word boundary; [\\b] matches backspace\n    .replace(/\\f/g, '\\\\f').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t').replace(/\\v/g, '\\\\v').replace(/\\0/g, '\\\\0');\n        return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n    };\n\n    var _reduced = function _reduced(x) {\n        return x && x['@@transducer/reduced'] ? x : {\n            '@@transducer/value': x,\n            '@@transducer/reduced': true\n        };\n    };\n\n    /**\n     * An optimized, private array `slice` implementation.\n     *\n     * @private\n     * @param {Arguments|Array} args The array or arguments object to consider.\n     * @param {Number} [from=0] The array index to slice from, inclusive.\n     * @param {Number} [to=args.length] The array index to slice to, exclusive.\n     * @return {Array} A new, sliced array.\n     * @example\n     *\n     *      _slice([1, 2, 3, 4, 5], 1, 3); //=> [2, 3]\n     *\n     *      var firstThreeArgs = function(a, b, c, d) {\n     *        return _slice(arguments, 0, 3);\n     *      };\n     *      firstThreeArgs(1, 2, 3, 4); //=> [1, 2, 3]\n     */\n    var _slice = function _slice(args, from, to) {\n        switch (arguments.length) {\n        case 1:\n            return _slice(args, 0, args.length);\n        case 2:\n            return _slice(args, from, args.length);\n        default:\n            var list = [];\n            var idx = 0;\n            var len = Math.max(0, Math.min(args.length, to) - from);\n            while (idx < len) {\n                list[idx] = args[from + idx];\n                idx += 1;\n            }\n            return list;\n        }\n    };\n\n    /**\n     * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n     */\n    var _toISOString = function () {\n        var pad = function pad(n) {\n            return (n < 10 ? '0' : '') + n;\n        };\n        return typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {\n            return d.toISOString();\n        } : function _toISOString(d) {\n            return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';\n        };\n    }();\n\n    var _xfBase = {\n        init: function () {\n            return this.xf['@@transducer/init']();\n        },\n        result: function (result) {\n            return this.xf['@@transducer/result'](result);\n        }\n    };\n\n    var _xwrap = function () {\n        function XWrap(fn) {\n            this.f = fn;\n        }\n        XWrap.prototype['@@transducer/init'] = function () {\n            throw new Error('init not implemented on XWrap');\n        };\n        XWrap.prototype['@@transducer/result'] = function (acc) {\n            return acc;\n        };\n        XWrap.prototype['@@transducer/step'] = function (acc, x) {\n            return this.f(acc, x);\n        };\n        return function _xwrap(fn) {\n            return new XWrap(fn);\n        };\n    }();\n\n    var _aperture = function _aperture(n, list) {\n        var idx = 0;\n        var limit = list.length - (n - 1);\n        var acc = new Array(limit >= 0 ? limit : 0);\n        while (idx < limit) {\n            acc[idx] = _slice(list, idx, idx + n);\n            idx += 1;\n        }\n        return acc;\n    };\n\n    var _assign = typeof Object.assign === 'function' ? Object.assign : _objectAssign;\n\n    /**\n     * Similar to hasMethod, this checks whether a function has a [methodname]\n     * function. If it isn't an array it will execute that function otherwise it\n     * will default to the ramda implementation.\n     *\n     * @private\n     * @param {Function} fn ramda implemtation\n     * @param {String} methodname property to check for a custom implementation\n     * @return {Object} Whatever the return value of the method is.\n     */\n    var _checkForMethod = function _checkForMethod(methodname, fn) {\n        return function () {\n            var length = arguments.length;\n            if (length === 0) {\n                return fn();\n            }\n            var obj = arguments[length - 1];\n            return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, _slice(arguments, 0, length - 1));\n        };\n    };\n\n    /**\n     * Optimized internal one-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry1 = function _curry1(fn) {\n        return function f1(a) {\n            if (arguments.length === 0 || _isPlaceholder(a)) {\n                return f1;\n            } else {\n                return fn.apply(this, arguments);\n            }\n        };\n    };\n\n    /**\n     * Optimized internal two-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry2 = function _curry2(fn) {\n        return function f2(a, b) {\n            switch (arguments.length) {\n            case 0:\n                return f2;\n            case 1:\n                return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n                    return fn(a, _b);\n                });\n            default:\n                return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n                    return fn(_a, b);\n                }) : _isPlaceholder(b) ? _curry1(function (_b) {\n                    return fn(a, _b);\n                }) : fn(a, b);\n            }\n        };\n    };\n\n    /**\n     * Optimized internal three-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry3 = function _curry3(fn) {\n        return function f3(a, b, c) {\n            switch (arguments.length) {\n            case 0:\n                return f3;\n            case 1:\n                return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {\n                    return fn(a, _b, _c);\n                });\n            case 2:\n                return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {\n                    return fn(_a, b, _c);\n                }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {\n                    return fn(a, _b, _c);\n                }) : _curry1(function (_c) {\n                    return fn(a, b, _c);\n                });\n            default:\n                return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {\n                    return fn(_a, _b, c);\n                }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {\n                    return fn(_a, b, _c);\n                }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {\n                    return fn(a, _b, _c);\n                }) : _isPlaceholder(a) ? _curry1(function (_a) {\n                    return fn(_a, b, c);\n                }) : _isPlaceholder(b) ? _curry1(function (_b) {\n                    return fn(a, _b, c);\n                }) : _isPlaceholder(c) ? _curry1(function (_c) {\n                    return fn(a, b, _c);\n                }) : fn(a, b, c);\n            }\n        };\n    };\n\n    /**\n     * Internal curryN function.\n     *\n     * @private\n     * @category Function\n     * @param {Number} length The arity of the curried function.\n     * @param {Array} received An array of arguments received thus far.\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curryN = function _curryN(length, received, fn) {\n        return function () {\n            var combined = [];\n            var argsIdx = 0;\n            var left = length;\n            var combinedIdx = 0;\n            while (combinedIdx < received.length || argsIdx < arguments.length) {\n                var result;\n                if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n                    result = received[combinedIdx];\n                } else {\n                    result = arguments[argsIdx];\n                    argsIdx += 1;\n                }\n                combined[combinedIdx] = result;\n                if (!_isPlaceholder(result)) {\n                    left -= 1;\n                }\n                combinedIdx += 1;\n            }\n            return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n        };\n    };\n\n    /**\n     * Returns a function that dispatches with different strategies based on the\n     * object in list position (last argument). If it is an array, executes [fn].\n     * Otherwise, if it has a function with [methodname], it will execute that\n     * function (functor case). Otherwise, if it is a transformer, uses transducer\n     * [xf] to return a new transformer (transducer case). Otherwise, it will\n     * default to executing [fn].\n     *\n     * @private\n     * @param {String} methodname property to check for a custom implementation\n     * @param {Function} xf transducer to initialize if object is transformer\n     * @param {Function} fn default ramda implementation\n     * @return {Function} A function that dispatches on object in list position\n     */\n    var _dispatchable = function _dispatchable(methodname, xf, fn) {\n        return function () {\n            var length = arguments.length;\n            if (length === 0) {\n                return fn();\n            }\n            var obj = arguments[length - 1];\n            if (!_isArray(obj)) {\n                var args = _slice(arguments, 0, length - 1);\n                if (typeof obj[methodname] === 'function') {\n                    return obj[methodname].apply(obj, args);\n                }\n                if (_isTransformer(obj)) {\n                    var transducer = xf.apply(null, args);\n                    return transducer(obj);\n                }\n            }\n            return fn.apply(this, arguments);\n        };\n    };\n\n    var _dropLastWhile = function dropLastWhile(pred, list) {\n        var idx = list.length - 1;\n        while (idx >= 0 && pred(list[idx])) {\n            idx -= 1;\n        }\n        return _slice(list, 0, idx + 1);\n    };\n\n    var _xall = function () {\n        function XAll(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.all = true;\n        }\n        XAll.prototype['@@transducer/init'] = _xfBase.init;\n        XAll.prototype['@@transducer/result'] = function (result) {\n            if (this.all) {\n                result = this.xf['@@transducer/step'](result, true);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XAll.prototype['@@transducer/step'] = function (result, input) {\n            if (!this.f(input)) {\n                this.all = false;\n                result = _reduced(this.xf['@@transducer/step'](result, false));\n            }\n            return result;\n        };\n        return _curry2(function _xall(f, xf) {\n            return new XAll(f, xf);\n        });\n    }();\n\n    var _xany = function () {\n        function XAny(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.any = false;\n        }\n        XAny.prototype['@@transducer/init'] = _xfBase.init;\n        XAny.prototype['@@transducer/result'] = function (result) {\n            if (!this.any) {\n                result = this.xf['@@transducer/step'](result, false);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XAny.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.any = true;\n                result = _reduced(this.xf['@@transducer/step'](result, true));\n            }\n            return result;\n        };\n        return _curry2(function _xany(f, xf) {\n            return new XAny(f, xf);\n        });\n    }();\n\n    var _xaperture = function () {\n        function XAperture(n, xf) {\n            this.xf = xf;\n            this.pos = 0;\n            this.full = false;\n            this.acc = new Array(n);\n        }\n        XAperture.prototype['@@transducer/init'] = _xfBase.init;\n        XAperture.prototype['@@transducer/result'] = function (result) {\n            this.acc = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XAperture.prototype['@@transducer/step'] = function (result, input) {\n            this.store(input);\n            return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;\n        };\n        XAperture.prototype.store = function (input) {\n            this.acc[this.pos] = input;\n            this.pos += 1;\n            if (this.pos === this.acc.length) {\n                this.pos = 0;\n                this.full = true;\n            }\n        };\n        XAperture.prototype.getCopy = function () {\n            return _concat(_slice(this.acc, this.pos), _slice(this.acc, 0, this.pos));\n        };\n        return _curry2(function _xaperture(n, xf) {\n            return new XAperture(n, xf);\n        });\n    }();\n\n    var _xdrop = function () {\n        function XDrop(n, xf) {\n            this.xf = xf;\n            this.n = n;\n        }\n        XDrop.prototype['@@transducer/init'] = _xfBase.init;\n        XDrop.prototype['@@transducer/result'] = _xfBase.result;\n        XDrop.prototype['@@transducer/step'] = function (result, input) {\n            if (this.n > 0) {\n                this.n -= 1;\n                return result;\n            }\n            return this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdrop(n, xf) {\n            return new XDrop(n, xf);\n        });\n    }();\n\n    var _xdropLast = function () {\n        function XDropLast(n, xf) {\n            this.xf = xf;\n            this.pos = 0;\n            this.full = false;\n            this.acc = new Array(n);\n        }\n        XDropLast.prototype['@@transducer/init'] = _xfBase.init;\n        XDropLast.prototype['@@transducer/result'] = function (result) {\n            this.acc = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XDropLast.prototype['@@transducer/step'] = function (result, input) {\n            if (this.full) {\n                result = this.xf['@@transducer/step'](result, this.acc[this.pos]);\n            }\n            this.store(input);\n            return result;\n        };\n        XDropLast.prototype.store = function (input) {\n            this.acc[this.pos] = input;\n            this.pos += 1;\n            if (this.pos === this.acc.length) {\n                this.pos = 0;\n                this.full = true;\n            }\n        };\n        return _curry2(function _xdropLast(n, xf) {\n            return new XDropLast(n, xf);\n        });\n    }();\n\n    var _xdropRepeatsWith = function () {\n        function XDropRepeatsWith(pred, xf) {\n            this.xf = xf;\n            this.pred = pred;\n            this.lastValue = undefined;\n            this.seenFirstValue = false;\n        }\n        XDropRepeatsWith.prototype['@@transducer/init'] = function () {\n            return this.xf['@@transducer/init']();\n        };\n        XDropRepeatsWith.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](result);\n        };\n        XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {\n            var sameAsLast = false;\n            if (!this.seenFirstValue) {\n                this.seenFirstValue = true;\n            } else if (this.pred(this.lastValue, input)) {\n                sameAsLast = true;\n            }\n            this.lastValue = input;\n            return sameAsLast ? result : this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdropRepeatsWith(pred, xf) {\n            return new XDropRepeatsWith(pred, xf);\n        });\n    }();\n\n    var _xdropWhile = function () {\n        function XDropWhile(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XDropWhile.prototype['@@transducer/init'] = _xfBase.init;\n        XDropWhile.prototype['@@transducer/result'] = _xfBase.result;\n        XDropWhile.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f) {\n                if (this.f(input)) {\n                    return result;\n                }\n                this.f = null;\n            }\n            return this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdropWhile(f, xf) {\n            return new XDropWhile(f, xf);\n        });\n    }();\n\n    var _xfilter = function () {\n        function XFilter(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XFilter.prototype['@@transducer/init'] = _xfBase.init;\n        XFilter.prototype['@@transducer/result'] = _xfBase.result;\n        XFilter.prototype['@@transducer/step'] = function (result, input) {\n            return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n        };\n        return _curry2(function _xfilter(f, xf) {\n            return new XFilter(f, xf);\n        });\n    }();\n\n    var _xfind = function () {\n        function XFind(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.found = false;\n        }\n        XFind.prototype['@@transducer/init'] = _xfBase.init;\n        XFind.prototype['@@transducer/result'] = function (result) {\n            if (!this.found) {\n                result = this.xf['@@transducer/step'](result, void 0);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XFind.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.found = true;\n                result = _reduced(this.xf['@@transducer/step'](result, input));\n            }\n            return result;\n        };\n        return _curry2(function _xfind(f, xf) {\n            return new XFind(f, xf);\n        });\n    }();\n\n    var _xfindIndex = function () {\n        function XFindIndex(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.idx = -1;\n            this.found = false;\n        }\n        XFindIndex.prototype['@@transducer/init'] = _xfBase.init;\n        XFindIndex.prototype['@@transducer/result'] = function (result) {\n            if (!this.found) {\n                result = this.xf['@@transducer/step'](result, -1);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XFindIndex.prototype['@@transducer/step'] = function (result, input) {\n            this.idx += 1;\n            if (this.f(input)) {\n                this.found = true;\n                result = _reduced(this.xf['@@transducer/step'](result, this.idx));\n            }\n            return result;\n        };\n        return _curry2(function _xfindIndex(f, xf) {\n            return new XFindIndex(f, xf);\n        });\n    }();\n\n    var _xfindLast = function () {\n        function XFindLast(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XFindLast.prototype['@@transducer/init'] = _xfBase.init;\n        XFindLast.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));\n        };\n        XFindLast.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.last = input;\n            }\n            return result;\n        };\n        return _curry2(function _xfindLast(f, xf) {\n            return new XFindLast(f, xf);\n        });\n    }();\n\n    var _xfindLastIndex = function () {\n        function XFindLastIndex(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.idx = -1;\n            this.lastIdx = -1;\n        }\n        XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;\n        XFindLastIndex.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));\n        };\n        XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {\n            this.idx += 1;\n            if (this.f(input)) {\n                this.lastIdx = this.idx;\n            }\n            return result;\n        };\n        return _curry2(function _xfindLastIndex(f, xf) {\n            return new XFindLastIndex(f, xf);\n        });\n    }();\n\n    var _xmap = function () {\n        function XMap(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XMap.prototype['@@transducer/init'] = _xfBase.init;\n        XMap.prototype['@@transducer/result'] = _xfBase.result;\n        XMap.prototype['@@transducer/step'] = function (result, input) {\n            return this.xf['@@transducer/step'](result, this.f(input));\n        };\n        return _curry2(function _xmap(f, xf) {\n            return new XMap(f, xf);\n        });\n    }();\n\n    var _xreduceBy = function () {\n        function XReduceBy(valueFn, valueAcc, keyFn, xf) {\n            this.valueFn = valueFn;\n            this.valueAcc = valueAcc;\n            this.keyFn = keyFn;\n            this.xf = xf;\n            this.inputs = {};\n        }\n        XReduceBy.prototype['@@transducer/init'] = _xfBase.init;\n        XReduceBy.prototype['@@transducer/result'] = function (result) {\n            var key;\n            for (key in this.inputs) {\n                if (_has(key, this.inputs)) {\n                    result = this.xf['@@transducer/step'](result, this.inputs[key]);\n                    if (result['@@transducer/reduced']) {\n                        result = result['@@transducer/value'];\n                        break;\n                    }\n                }\n            }\n            this.inputs = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XReduceBy.prototype['@@transducer/step'] = function (result, input) {\n            var key = this.keyFn(input);\n            this.inputs[key] = this.inputs[key] || [\n                key,\n                this.valueAcc\n            ];\n            this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);\n            return result;\n        };\n        return _curryN(4, [], function _xreduceBy(valueFn, valueAcc, keyFn, xf) {\n            return new XReduceBy(valueFn, valueAcc, keyFn, xf);\n        });\n    }();\n\n    var _xtake = function () {\n        function XTake(n, xf) {\n            this.xf = xf;\n            this.n = n;\n            this.i = 0;\n        }\n        XTake.prototype['@@transducer/init'] = _xfBase.init;\n        XTake.prototype['@@transducer/result'] = _xfBase.result;\n        XTake.prototype['@@transducer/step'] = function (result, input) {\n            this.i += 1;\n            var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);\n            return this.i >= this.n ? _reduced(ret) : ret;\n        };\n        return _curry2(function _xtake(n, xf) {\n            return new XTake(n, xf);\n        });\n    }();\n\n    var _xtakeWhile = function () {\n        function XTakeWhile(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;\n        XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;\n        XTakeWhile.prototype['@@transducer/step'] = function (result, input) {\n            return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);\n        };\n        return _curry2(function _xtakeWhile(f, xf) {\n            return new XTakeWhile(f, xf);\n        });\n    }();\n\n    /**\n     * Adds two values.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Number}\n     * @see R.subtract\n     * @example\n     *\n     *      R.add(2, 3);       //=>  5\n     *      R.add(7)(10);      //=> 17\n     */\n    var add = _curry2(function add(a, b) {\n        return Number(a) + Number(b);\n    });\n\n    /**\n     * Applies a function to the value at the given index of an array, returning a\n     * new copy of the array with the element at the given index replaced with the\n     * result of the function application.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig (a -> a) -> Number -> [a] -> [a]\n     * @param {Function} fn The function to apply.\n     * @param {Number} idx The index.\n     * @param {Array|Arguments} list An array-like object whose value\n     *        at the supplied index will be replaced.\n     * @return {Array} A copy of the supplied array-like object with\n     *         the element at index `idx` replaced with the value\n     *         returned by applying `fn` to the existing element.\n     * @see R.update\n     * @example\n     *\n     *      R.adjust(R.add(10), 1, [0, 1, 2]);     //=> [0, 11, 2]\n     *      R.adjust(R.add(10))(1)([0, 1, 2]);     //=> [0, 11, 2]\n     */\n    var adjust = _curry3(function adjust(fn, idx, list) {\n        if (idx >= list.length || idx < -list.length) {\n            return list;\n        }\n        var start = idx < 0 ? list.length : 0;\n        var _idx = start + idx;\n        var _list = _concat(list);\n        _list[_idx] = fn(list[_idx]);\n        return _list;\n    });\n\n    /**\n     * Returns `true` if all elements of the list match the predicate, `false` if\n     * there are any that don't.\n     *\n     * Dispatches to the `all` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is satisfied by every element, `false`\n     *         otherwise.\n     * @see R.any, R.none, R.transduce\n     * @example\n     *\n     *      var lessThan2 = R.flip(R.lt)(2);\n     *      var lessThan3 = R.flip(R.lt)(3);\n     *      R.all(lessThan2)([1, 2]); //=> false\n     *      R.all(lessThan3)([1, 2]); //=> true\n     */\n    var all = _curry2(_dispatchable('all', _xall, function all(fn, list) {\n        var idx = 0;\n        while (idx < list.length) {\n            if (!fn(list[idx])) {\n                return false;\n            }\n            idx += 1;\n        }\n        return true;\n    }));\n\n    /**\n     * Returns a function that always returns the given value. Note that for\n     * non-primitives the value returned is a reference to the original value.\n     *\n     * This function is known as `const`, `constant`, or `K` (for K combinator) in\n     * other languages and libraries.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig a -> (* -> a)\n     * @param {*} val The value to wrap in a function\n     * @return {Function} A Function :: * -> val.\n     * @example\n     *\n     *      var t = R.always('Tee');\n     *      t(); //=> 'Tee'\n     */\n    var always = _curry1(function always(val) {\n        return function () {\n            return val;\n        };\n    });\n\n    /**\n     * Returns `true` if both arguments are `true`; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> * -> *\n     * @param {Boolean} a A boolean value\n     * @param {Boolean} b A boolean value\n     * @return {Boolean} `true` if both arguments are `true`, `false` otherwise\n     * @see R.both\n     * @example\n     *\n     *      R.and(true, true); //=> true\n     *      R.and(true, false); //=> false\n     *      R.and(false, true); //=> false\n     *      R.and(false, false); //=> false\n     */\n    var and = _curry2(function and(a, b) {\n        return a && b;\n    });\n\n    /**\n     * Returns `true` if at least one of elements of the list match the predicate,\n     * `false` otherwise.\n     *\n     * Dispatches to the `any` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\n     *         otherwise.\n     * @see R.all, R.none, R.transduce\n     * @example\n     *\n     *      var lessThan0 = R.flip(R.lt)(0);\n     *      var lessThan2 = R.flip(R.lt)(2);\n     *      R.any(lessThan0)([1, 2]); //=> false\n     *      R.any(lessThan2)([1, 2]); //=> true\n     */\n    var any = _curry2(_dispatchable('any', _xany, function any(fn, list) {\n        var idx = 0;\n        while (idx < list.length) {\n            if (fn(list[idx])) {\n                return true;\n            }\n            idx += 1;\n        }\n        return false;\n    }));\n\n    /**\n     * Returns a new list, composed of n-tuples of consecutive elements If `n` is\n     * greater than the length of the list, an empty list is returned.\n     *\n     * Dispatches to the `aperture` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig Number -> [a] -> [[a]]\n     * @param {Number} n The size of the tuples to create\n     * @param {Array} list The list to split into `n`-tuples\n     * @return {Array} The new list.\n     * @see R.transduce\n     * @example\n     *\n     *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n     *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n     *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n     */\n    var aperture = _curry2(_dispatchable('aperture', _xaperture, _aperture));\n\n    /**\n     * Returns a new list containing the contents of the given list, followed by\n     * the given element.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} el The element to add to the end of the new list.\n     * @param {Array} list The list whose contents will be added to the beginning of the output\n     *        list.\n     * @return {Array} A new list containing the contents of the old list followed by `el`.\n     * @see R.prepend\n     * @example\n     *\n     *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n     *      R.append('tests', []); //=> ['tests']\n     *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n     */\n    var append = _curry2(function append(el, list) {\n        return _concat(list, [el]);\n    });\n\n    /**\n     * Applies function `fn` to the argument list `args`. This is useful for\n     * creating a fixed-arity function from a variadic function. `fn` should be a\n     * bound function if context is significant.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Function\n     * @sig (*... -> a) -> [*] -> a\n     * @param {Function} fn\n     * @param {Array} args\n     * @return {*}\n     * @see R.call, R.unapply\n     * @example\n     *\n     *      var nums = [1, 2, 3, -99, 42, 6, 7];\n     *      R.apply(Math.max, nums); //=> 42\n     */\n    var apply = _curry2(function apply(fn, args) {\n        return fn.apply(this, args);\n    });\n\n    /**\n     * Makes a shallow clone of an object, setting or overriding the specified\n     * property with the given value. Note that this copies and flattens prototype\n     * properties onto the new object as well. All non-primitive properties are\n     * copied by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig String -> a -> {k: v} -> {k: v}\n     * @param {String} prop the property name to set\n     * @param {*} val the new value\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original except for the specified property.\n     * @see R.dissoc\n     * @example\n     *\n     *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n     */\n    var assoc = _curry3(function assoc(prop, val, obj) {\n        var result = {};\n        for (var p in obj) {\n            result[p] = obj[p];\n        }\n        result[prop] = val;\n        return result;\n    });\n\n    /**\n     * Makes a shallow clone of an object, setting or overriding the nodes required\n     * to create the given path, and placing the specific value at the tail end of\n     * that path. Note that this copies and flattens prototype properties onto the\n     * new object as well. All non-primitive properties are copied by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig [String] -> a -> {k: v} -> {k: v}\n     * @param {Array} path the path to set\n     * @param {*} val the new value\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original except along the specified path.\n     * @see R.dissocPath\n     * @example\n     *\n     *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\n     */\n    var assocPath = _curry3(function assocPath(path, val, obj) {\n        switch (path.length) {\n        case 0:\n            return val;\n        case 1:\n            return assoc(path[0], val, obj);\n        default:\n            return assoc(path[0], assocPath(_slice(path, 1), val, Object(obj[path[0]])), obj);\n        }\n    });\n\n    /**\n     * Creates a function that is bound to a context.\n     * Note: `R.bind` does not provide the additional argument-binding capabilities of\n     * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Function\n     * @category Object\n     * @sig (* -> *) -> {*} -> (* -> *)\n     * @param {Function} fn The function to bind to context\n     * @param {Object} thisObj The context to bind `fn` to\n     * @return {Function} A function that will execute in the context of `thisObj`.\n     * @see R.partial\n     * @example\n     *\n     *      var log = R.bind(console.log, console);\n     *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n     *      // logs {a: 2}\n     */\n    var bind = _curry2(function bind(fn, thisObj) {\n        return _arity(fn.length, function () {\n            return fn.apply(thisObj, arguments);\n        });\n    });\n\n    /**\n     * Restricts a number to be within a range.\n     *\n     * Also works for other ordered types such as Strings and Dates.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category Relation\n     * @sig Ord a => a -> a -> a -> a\n     * @param {Number} minimum number\n     * @param {Number} maximum number\n     * @param {Number} value to be clamped\n     * @return {Number} Returns the clamped value\n     * @example\n     *\n     *      R.clamp(1, 10, -1) // => 1\n     *      R.clamp(1, 10, 11) // => 10\n     *      R.clamp(1, 10, 4)  // => 4\n     */\n    var clamp = _curry3(function clamp(min, max, value) {\n        if (min > max) {\n            throw new Error('min must not be greater than max in clamp(min, max, value)');\n        }\n        return value < min ? min : value > max ? max : value;\n    });\n\n    /**\n     * Makes a comparator function out of a function that reports whether the first\n     * element is less than the second.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a, b -> Boolean) -> (a, b -> Number)\n     * @param {Function} pred A predicate function of arity two.\n     * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`.\n     * @example\n     *\n     *      var cmp = R.comparator((a, b) => a.age < b.age);\n     *      var people = [\n     *        // ...\n     *      ];\n     *      R.sort(cmp, people);\n     */\n    var comparator = _curry1(function comparator(pred) {\n        return function (a, b) {\n            return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;\n        };\n    });\n\n    /**\n     * Returns a curried equivalent of the provided function, with the specified\n     * arity. The curried function has two unusual capabilities. First, its\n     * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n     * following are equivalent:\n     *\n     *   - `g(1)(2)(3)`\n     *   - `g(1)(2, 3)`\n     *   - `g(1, 2)(3)`\n     *   - `g(1, 2, 3)`\n     *\n     * Secondly, the special placeholder value `R.__` may be used to specify\n     * \"gaps\", allowing partial application of any combination of arguments,\n     * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n     * following are equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @func\n     * @memberOf R\n     * @since v0.5.0\n     * @category Function\n     * @sig Number -> (* -> a) -> (* -> a)\n     * @param {Number} length The arity for the returned function.\n     * @param {Function} fn The function to curry.\n     * @return {Function} A new, curried function.\n     * @see R.curry\n     * @example\n     *\n     *      var sumArgs = (...args) => R.sum(args);\n     *\n     *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n     *      var f = curriedAddFourNumbers(1, 2);\n     *      var g = f(3);\n     *      g(4); //=> 10\n     */\n    var curryN = _curry2(function curryN(length, fn) {\n        if (length === 1) {\n            return _curry1(fn);\n        }\n        return _arity(length, _curryN(length, [], fn));\n    });\n\n    /**\n     * Decrements its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @see R.inc\n     * @example\n     *\n     *      R.dec(42); //=> 41\n     */\n    var dec = add(-1);\n\n    /**\n     * Returns the second argument if it is not `null`, `undefined` or `NaN`\n     * otherwise the first argument is returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Logic\n     * @sig a -> b -> a | b\n     * @param {a} val The default value.\n     * @param {b} val The value to return if it is not null or undefined\n     * @return {*} The the second value or the default value\n     * @example\n     *\n     *      var defaultTo42 = R.defaultTo(42);\n     *\n     *      defaultTo42(null);  //=> 42\n     *      defaultTo42(undefined);  //=> 42\n     *      defaultTo42('Ramda');  //=> 'Ramda'\n     *      defaultTo42(parseInt('string')); //=> 42\n     */\n    var defaultTo = _curry2(function defaultTo(d, v) {\n        return v == null || v !== v ? d : v;\n    });\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements in the first list not\n     * contained in the second list. Duplication is determined according to the\n     * value returned by applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` that are not in `list2`.\n     * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith\n     * @example\n     *\n     *      var cmp = (x, y) => x.a === y.a;\n     *      var l1 = [{a: 1}, {a: 2}, {a: 3}];\n     *      var l2 = [{a: 3}, {a: 4}];\n     *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n     */\n    var differenceWith = _curry3(function differenceWith(pred, first, second) {\n        var out = [];\n        var idx = 0;\n        var firstLen = first.length;\n        while (idx < firstLen) {\n            if (!_containsWith(pred, first[idx], second) && !_containsWith(pred, first[idx], out)) {\n                out.push(first[idx]);\n            }\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new object that does not contain a `prop` property.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Object\n     * @sig String -> {k: v} -> {k: v}\n     * @param {String} prop the name of the property to dissociate\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original but without the specified property\n     * @see R.assoc\n     * @example\n     *\n     *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}\n     */\n    var dissoc = _curry2(function dissoc(prop, obj) {\n        var result = {};\n        for (var p in obj) {\n            if (p !== prop) {\n                result[p] = obj[p];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Makes a shallow clone of an object, omitting the property at the given path.\n     * Note that this copies and flattens prototype properties onto the new object\n     * as well. All non-primitive properties are copied by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.11.0\n     * @category Object\n     * @sig [String] -> {k: v} -> {k: v}\n     * @param {Array} path the path to set\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object without the property at path\n     * @see R.assocPath\n     * @example\n     *\n     *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}\n     */\n    var dissocPath = _curry2(function dissocPath(path, obj) {\n        switch (path.length) {\n        case 0:\n            return obj;\n        case 1:\n            return dissoc(path[0], obj);\n        default:\n            var head = path[0];\n            var tail = _slice(path, 1);\n            return obj[head] == null ? obj : assoc(head, dissocPath(tail, obj[head]), obj);\n        }\n    });\n\n    /**\n     * Divides two numbers. Equivalent to `a / b`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a / b`.\n     * @see R.multiply\n     * @example\n     *\n     *      R.divide(71, 100); //=> 0.71\n     *\n     *      var half = R.divide(R.__, 2);\n     *      half(42); //=> 21\n     *\n     *      var reciprocal = R.divide(1);\n     *      reciprocal(4);   //=> 0.25\n     */\n    var divide = _curry2(function divide(a, b) {\n        return a / b;\n    });\n\n    /**\n     * Returns a new list excluding the leading elements of a given list which\n     * satisfy the supplied predicate function. It passes each value to the supplied\n     * predicate function, skipping elements while the predicate function returns\n     * `true`. The predicate function is applied to one argument: *(value)*.\n     *\n     * Dispatches to the `dropWhile` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.takeWhile, R.transduce, R.addIndex\n     * @example\n     *\n     *      var lteTwo = x => x <= 2;\n     *\n     *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n     */\n    var dropWhile = _curry2(_dispatchable('dropWhile', _xdropWhile, function dropWhile(pred, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len && pred(list[idx])) {\n            idx += 1;\n        }\n        return _slice(list, idx);\n    }));\n\n    /**\n     * Returns the empty value of its argument's type. Ramda defines the empty\n     * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other\n     * types are supported if they define `<Type>.empty` and/or\n     * `<Type>.prototype.empty`.\n     *\n     * Dispatches to the `empty` method of the first argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig a -> a\n     * @param {*} x\n     * @return {*}\n     * @example\n     *\n     *      R.empty(Just(42));      //=> Nothing()\n     *      R.empty([1, 2, 3]);     //=> []\n     *      R.empty('unicorns');    //=> ''\n     *      R.empty({x: 1, y: 2});  //=> {}\n     */\n    // else\n    var empty = _curry1(function empty(x) {\n        return x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {\n            return arguments;\n        }() : // else\n        void 0;\n    });\n\n    /**\n     * Creates a new object by recursively evolving a shallow copy of `object`,\n     * according to the `transformation` functions. All non-primitive properties\n     * are copied by reference.\n     *\n     * A `transformation` function will not be invoked if its corresponding key\n     * does not exist in the evolved object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {k: (v -> v)} -> {k: v} -> {k: v}\n     * @param {Object} transformations The object specifying transformation functions to apply\n     *        to the object.\n     * @param {Object} object The object to be transformed.\n     * @return {Object} The transformed object.\n     * @example\n     *\n     *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\n     *      var transformations = {\n     *        firstName: R.trim,\n     *        lastName: R.trim, // Will not get invoked.\n     *        data: {elapsed: R.add(1), remaining: R.add(-1)}\n     *      };\n     *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\n     */\n    var evolve = _curry2(function evolve(transformations, object) {\n        var result = {};\n        var transformation, key, type;\n        for (key in object) {\n            transformation = transformations[key];\n            type = typeof transformation;\n            result[key] = type === 'function' ? transformation(object[key]) : type === 'object' ? evolve(transformations[key], object[key]) : object[key];\n        }\n        return result;\n    });\n\n    /**\n     * Returns the first element of the list which matches the predicate, or\n     * `undefined` if no element matches.\n     *\n     * Dispatches to the `find` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> a | undefined\n     * @param {Function} fn The predicate function used to determine if the element is the\n     *        desired one.\n     * @param {Array} list The array to consider.\n     * @return {Object} The element found, or `undefined`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n     *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}\n     *      R.find(R.propEq('a', 4))(xs); //=> undefined\n     */\n    var find = _curry2(_dispatchable('find', _xfind, function find(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            if (fn(list[idx])) {\n                return list[idx];\n            }\n            idx += 1;\n        }\n    }));\n\n    /**\n     * Returns the index of the first element of the list which matches the\n     * predicate, or `-1` if no element matches.\n     *\n     * Dispatches to the `findIndex` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Number\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Number} The index of the element found, or `-1`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n     *      R.findIndex(R.propEq('a', 2))(xs); //=> 1\n     *      R.findIndex(R.propEq('a', 4))(xs); //=> -1\n     */\n    var findIndex = _curry2(_dispatchable('findIndex', _xfindIndex, function findIndex(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            if (fn(list[idx])) {\n                return idx;\n            }\n            idx += 1;\n        }\n        return -1;\n    }));\n\n    /**\n     * Returns the last element of the list which matches the predicate, or\n     * `undefined` if no element matches.\n     *\n     * Dispatches to the `findLast` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> a | undefined\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Object} The element found, or `undefined`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n     *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}\n     *      R.findLast(R.propEq('a', 4))(xs); //=> undefined\n     */\n    var findLast = _curry2(_dispatchable('findLast', _xfindLast, function findLast(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            if (fn(list[idx])) {\n                return list[idx];\n            }\n            idx -= 1;\n        }\n    }));\n\n    /**\n     * Returns the index of the last element of the list which matches the\n     * predicate, or `-1` if no element matches.\n     *\n     * Dispatches to the `findLastIndex` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Number\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Number} The index of the element found, or `-1`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n     *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1\n     *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1\n     */\n    var findLastIndex = _curry2(_dispatchable('findLastIndex', _xfindLastIndex, function findLastIndex(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            if (fn(list[idx])) {\n                return idx;\n            }\n            idx -= 1;\n        }\n        return -1;\n    }));\n\n    /**\n     * Iterate over an input `list`, calling a provided function `fn` for each\n     * element in the list.\n     *\n     * `fn` receives one argument: *(value)*.\n     *\n     * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n     * arrays), unlike the native `Array.prototype.forEach` method. For more\n     * details on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n     *\n     * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n     * the original array. In some libraries this function is named `each`.\n     *\n     * Dispatches to the `forEach` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> *) -> [a] -> [a]\n     * @param {Function} fn The function to invoke. Receives one argument, `value`.\n     * @param {Array} list The list to iterate over.\n     * @return {Array} The original list.\n     * @see R.addIndex\n     * @example\n     *\n     *      var printXPlusFive = x => console.log(x + 5);\n     *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n     *      // logs 6\n     *      // logs 7\n     *      // logs 8\n     */\n    var forEach = _curry2(_checkForMethod('forEach', function forEach(fn, list) {\n        var len = list.length;\n        var idx = 0;\n        while (idx < len) {\n            fn(list[idx]);\n            idx += 1;\n        }\n        return list;\n    }));\n\n    /**\n     * Creates a new object from a list key-value pairs. If a key appears in\n     * multiple pairs, the rightmost pair is included in the object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [[k,v]] -> {k: v}\n     * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n     * @return {Object} The object made by pairing up `keys` and `values`.\n     * @see R.toPairs, R.pair\n     * @example\n     *\n     *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n     */\n    var fromPairs = _curry1(function fromPairs(pairs) {\n        var result = {};\n        var idx = 0;\n        while (idx < pairs.length) {\n            result[pairs[idx][0]] = pairs[idx][1];\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Takes a list and returns a list of lists where each sublist's elements are\n     * all \"equal\" according to the provided equality function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.21.0\n     * @category List\n     * @sig ((a, a) → Boolean) → [a] → [[a]]\n     * @param {Function} fn Function for determining whether two given (adjacent)\n     *        elements should be in the same group\n     * @param {Array} list The array to group. Also accepts a string, which will be\n     *        treated as a list of characters.\n     * @return {List} A list that contains sublists of equal elements,\n     *         whose concatenations are equal to the original list.\n     * @example\n     *\n     * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n     * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]\n     *\n     * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n     * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]\n     *\n     * R.groupWith(R.eqBy(isVowel), 'aestiou')\n     * //=> ['ae', 'st', 'iou']\n     */\n    var groupWith = _curry2(function (fn, list) {\n        var res = [];\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            var nextidx = idx + 1;\n            while (nextidx < len && fn(list[idx], list[nextidx])) {\n                nextidx += 1;\n            }\n            res.push(list.slice(idx, nextidx));\n            idx = nextidx;\n        }\n        return res;\n    });\n\n    /**\n     * Returns `true` if the first argument is greater than the second; `false`\n     * otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @see R.lt\n     * @example\n     *\n     *      R.gt(2, 1); //=> true\n     *      R.gt(2, 2); //=> false\n     *      R.gt(2, 3); //=> false\n     *      R.gt('a', 'z'); //=> false\n     *      R.gt('z', 'a'); //=> true\n     */\n    var gt = _curry2(function gt(a, b) {\n        return a > b;\n    });\n\n    /**\n     * Returns `true` if the first argument is greater than or equal to the second;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Boolean}\n     * @see R.lte\n     * @example\n     *\n     *      R.gte(2, 1); //=> true\n     *      R.gte(2, 2); //=> true\n     *      R.gte(2, 3); //=> false\n     *      R.gte('a', 'z'); //=> false\n     *      R.gte('z', 'a'); //=> true\n     */\n    var gte = _curry2(function gte(a, b) {\n        return a >= b;\n    });\n\n    /**\n     * Returns whether or not an object has an own property with the specified name\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Object\n     * @sig s -> {s: x} -> Boolean\n     * @param {String} prop The name of the property to check for.\n     * @param {Object} obj The object to query.\n     * @return {Boolean} Whether the property exists.\n     * @example\n     *\n     *      var hasName = R.has('name');\n     *      hasName({name: 'alice'});   //=> true\n     *      hasName({name: 'bob'});     //=> true\n     *      hasName({});                //=> false\n     *\n     *      var point = {x: 0, y: 0};\n     *      var pointHas = R.has(R.__, point);\n     *      pointHas('x');  //=> true\n     *      pointHas('y');  //=> true\n     *      pointHas('z');  //=> false\n     */\n    var has = _curry2(_has);\n\n    /**\n     * Returns whether or not an object or its prototype chain has a property with\n     * the specified name\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Object\n     * @sig s -> {s: x} -> Boolean\n     * @param {String} prop The name of the property to check for.\n     * @param {Object} obj The object to query.\n     * @return {Boolean} Whether the property exists.\n     * @example\n     *\n     *      function Rectangle(width, height) {\n     *        this.width = width;\n     *        this.height = height;\n     *      }\n     *      Rectangle.prototype.area = function() {\n     *        return this.width * this.height;\n     *      };\n     *\n     *      var square = new Rectangle(2, 2);\n     *      R.hasIn('width', square);  //=> true\n     *      R.hasIn('area', square);  //=> true\n     */\n    var hasIn = _curry2(function hasIn(prop, obj) {\n        return prop in obj;\n    });\n\n    /**\n     * Returns true if its arguments are identical, false otherwise. Values are\n     * identical if they reference the same memory. `NaN` is identical to `NaN`;\n     * `0` and `-0` are not identical.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Relation\n     * @sig a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @example\n     *\n     *      var o = {};\n     *      R.identical(o, o); //=> true\n     *      R.identical(1, 1); //=> true\n     *      R.identical(1, '1'); //=> false\n     *      R.identical([], []); //=> false\n     *      R.identical(0, -0); //=> false\n     *      R.identical(NaN, NaN); //=> true\n     */\n    // SameValue algorithm\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    // Step 6.a: NaN == NaN\n    var identical = _curry2(function identical(a, b) {\n        // SameValue algorithm\n        if (a === b) {\n            // Steps 1-5, 7-10\n            // Steps 6.b-6.e: +0 != -0\n            return a !== 0 || 1 / a === 1 / b;\n        } else {\n            // Step 6.a: NaN == NaN\n            return a !== a && b !== b;\n        }\n    });\n\n    /**\n     * A function that does nothing but return the parameter supplied to it. Good\n     * as a default or placeholder function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig a -> a\n     * @param {*} x The value to return.\n     * @return {*} The input value, `x`.\n     * @example\n     *\n     *      R.identity(1); //=> 1\n     *\n     *      var obj = {};\n     *      R.identity(obj) === obj; //=> true\n     */\n    var identity = _curry1(_identity);\n\n    /**\n     * Creates a function that will process either the `onTrue` or the `onFalse`\n     * function depending upon the result of the `condition` predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Logic\n     * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\n     * @param {Function} condition A predicate function\n     * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n     * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n     * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`\n     *                    function depending upon the result of the `condition` predicate.\n     * @see R.unless, R.when\n     * @example\n     *\n     *      var incCount = R.ifElse(\n     *        R.has('count'),\n     *        R.over(R.lensProp('count'), R.inc),\n     *        R.assoc('count', 1)\n     *      );\n     *      incCount({});           //=> { count: 1 }\n     *      incCount({ count: 1 }); //=> { count: 2 }\n     */\n    var ifElse = _curry3(function ifElse(condition, onTrue, onFalse) {\n        return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {\n            return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);\n        });\n    });\n\n    /**\n     * Increments its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @see R.dec\n     * @example\n     *\n     *      R.inc(42); //=> 43\n     */\n    var inc = add(1);\n\n    /**\n     * Inserts the supplied element into the list, at index `index`. _Note that\n     * this is not destructive_: it returns a copy of the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.2\n     * @category List\n     * @sig Number -> a -> [a] -> [a]\n     * @param {Number} index The position to insert the element\n     * @param {*} elt The element to insert into the Array\n     * @param {Array} list The list to insert into\n     * @return {Array} A new Array with `elt` inserted at `index`.\n     * @example\n     *\n     *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]\n     */\n    var insert = _curry3(function insert(idx, elt, list) {\n        idx = idx < list.length && idx >= 0 ? idx : list.length;\n        var result = _slice(list);\n        result.splice(idx, 0, elt);\n        return result;\n    });\n\n    /**\n     * Inserts the sub-list into the list, at index `index`. _Note that this is not\n     * destructive_: it returns a copy of the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @sig Number -> [a] -> [a] -> [a]\n     * @param {Number} index The position to insert the sub-list\n     * @param {Array} elts The sub-list to insert into the Array\n     * @param {Array} list The list to insert the sub-list into\n     * @return {Array} A new Array with `elts` inserted starting at `index`.\n     * @example\n     *\n     *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]\n     */\n    var insertAll = _curry3(function insertAll(idx, elts, list) {\n        idx = idx < list.length && idx >= 0 ? idx : list.length;\n        return _concat(_concat(_slice(list, 0, idx), elts), _slice(list, idx));\n    });\n\n    /**\n     * Creates a new list with the separator interposed between elements.\n     *\n     * Dispatches to the `intersperse` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} separator The element to add to the list.\n     * @param {Array} list The list to be interposed.\n     * @return {Array} The new list.\n     * @example\n     *\n     *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']\n     */\n    var intersperse = _curry2(_checkForMethod('intersperse', function intersperse(separator, list) {\n        var out = [];\n        var idx = 0;\n        var length = list.length;\n        while (idx < length) {\n            if (idx === length - 1) {\n                out.push(list[idx]);\n            } else {\n                out.push(list[idx], separator);\n            }\n            idx += 1;\n        }\n        return out;\n    }));\n\n    /**\n     * See if an object (`val`) is an instance of the supplied constructor. This\n     * function will check up the inheritance chain, if any.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Type\n     * @sig (* -> {*}) -> a -> Boolean\n     * @param {Object} ctor A constructor\n     * @param {*} val The value to test\n     * @return {Boolean}\n     * @example\n     *\n     *      R.is(Object, {}); //=> true\n     *      R.is(Number, 1); //=> true\n     *      R.is(Object, 1); //=> false\n     *      R.is(String, 's'); //=> true\n     *      R.is(String, new String('')); //=> true\n     *      R.is(Object, new String('')); //=> true\n     *      R.is(Object, 's'); //=> false\n     *      R.is(Number, {}); //=> false\n     */\n    var is = _curry2(function is(Ctor, val) {\n        return val != null && val.constructor === Ctor || val instanceof Ctor;\n    });\n\n    /**\n     * Tests whether or not an object is similar to an array.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.5.0\n     * @category Type\n     * @category List\n     * @sig * -> Boolean\n     * @param {*} x The object to test.\n     * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n     * @example\n     *\n     *      R.isArrayLike([]); //=> true\n     *      R.isArrayLike(true); //=> false\n     *      R.isArrayLike({}); //=> false\n     *      R.isArrayLike({length: 10}); //=> false\n     *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n     */\n    var isArrayLike = _curry1(function isArrayLike(x) {\n        if (_isArray(x)) {\n            return true;\n        }\n        if (!x) {\n            return false;\n        }\n        if (typeof x !== 'object') {\n            return false;\n        }\n        if (_isString(x)) {\n            return false;\n        }\n        if (x.nodeType === 1) {\n            return !!x.length;\n        }\n        if (x.length === 0) {\n            return true;\n        }\n        if (x.length > 0) {\n            return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n        }\n        return false;\n    });\n\n    /**\n     * Checks if the input value is `null` or `undefined`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Type\n     * @sig * -> Boolean\n     * @param {*} x The value to test.\n     * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n     * @example\n     *\n     *      R.isNil(null); //=> true\n     *      R.isNil(undefined); //=> true\n     *      R.isNil(0); //=> false\n     *      R.isNil([]); //=> false\n     */\n    var isNil = _curry1(function isNil(x) {\n        return x == null;\n    });\n\n    /**\n     * Returns a list containing the names of all the enumerable own properties of\n     * the supplied object.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> [k]\n     * @param {Object} obj The object to extract properties from\n     * @return {Array} An array of the object's own properties.\n     * @example\n     *\n     *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n     */\n    // cover IE < 9 keys issues\n    // Safari bug\n    var keys = function () {\n        // cover IE < 9 keys issues\n        var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');\n        var nonEnumerableProps = [\n            'constructor',\n            'valueOf',\n            'isPrototypeOf',\n            'toString',\n            'propertyIsEnumerable',\n            'hasOwnProperty',\n            'toLocaleString'\n        ];\n        // Safari bug\n        var hasArgsEnumBug = function () {\n            'use strict';\n            return arguments.propertyIsEnumerable('length');\n        }();\n        var contains = function contains(list, item) {\n            var idx = 0;\n            while (idx < list.length) {\n                if (list[idx] === item) {\n                    return true;\n                }\n                idx += 1;\n            }\n            return false;\n        };\n        return typeof Object.keys === 'function' && !hasArgsEnumBug ? _curry1(function keys(obj) {\n            return Object(obj) !== obj ? [] : Object.keys(obj);\n        }) : _curry1(function keys(obj) {\n            if (Object(obj) !== obj) {\n                return [];\n            }\n            var prop, nIdx;\n            var ks = [];\n            var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n            for (prop in obj) {\n                if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n                    ks[ks.length] = prop;\n                }\n            }\n            if (hasEnumBug) {\n                nIdx = nonEnumerableProps.length - 1;\n                while (nIdx >= 0) {\n                    prop = nonEnumerableProps[nIdx];\n                    if (_has(prop, obj) && !contains(ks, prop)) {\n                        ks[ks.length] = prop;\n                    }\n                    nIdx -= 1;\n                }\n            }\n            return ks;\n        });\n    }();\n\n    /**\n     * Returns a list containing the names of all the properties of the supplied\n     * object, including prototype properties.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig {k: v} -> [k]\n     * @param {Object} obj The object to extract properties from\n     * @return {Array} An array of the object's own and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.keysIn(f); //=> ['x', 'y']\n     */\n    var keysIn = _curry1(function keysIn(obj) {\n        var prop;\n        var ks = [];\n        for (prop in obj) {\n            ks[ks.length] = prop;\n        }\n        return ks;\n    });\n\n    /**\n     * Returns the number of elements in the array by returning `list.length`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [a] -> Number\n     * @param {Array} list The array to inspect.\n     * @return {Number} The length of the array.\n     * @example\n     *\n     *      R.length([]); //=> 0\n     *      R.length([1, 2, 3]); //=> 3\n     */\n    var length = _curry1(function length(list) {\n        return list != null && _isNumber(list.length) ? list.length : NaN;\n    });\n\n    /**\n     * Returns `true` if the first argument is less than the second; `false`\n     * otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @see R.gt\n     * @example\n     *\n     *      R.lt(2, 1); //=> false\n     *      R.lt(2, 2); //=> false\n     *      R.lt(2, 3); //=> true\n     *      R.lt('a', 'z'); //=> true\n     *      R.lt('z', 'a'); //=> false\n     */\n    var lt = _curry2(function lt(a, b) {\n        return a < b;\n    });\n\n    /**\n     * Returns `true` if the first argument is less than or equal to the second;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Boolean}\n     * @see R.gte\n     * @example\n     *\n     *      R.lte(2, 1); //=> false\n     *      R.lte(2, 2); //=> true\n     *      R.lte(2, 3); //=> true\n     *      R.lte('a', 'z'); //=> true\n     *      R.lte('z', 'a'); //=> false\n     */\n    var lte = _curry2(function lte(a, b) {\n        return a <= b;\n    });\n\n    /**\n     * The mapAccum function behaves like a combination of map and reduce; it\n     * applies a function to each element of a list, passing an accumulating\n     * parameter from left to right, and returning a final value of this\n     * accumulator together with the new list.\n     *\n     * The iterator function receives two arguments, *acc* and *value*, and should\n     * return a tuple *[acc, value]*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.addIndex\n     * @example\n     *\n     *      var digits = ['1', '2', '3', '4'];\n     *      var appender = (a, b) => [a + b, a + b];\n     *\n     *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n     */\n    var mapAccum = _curry3(function mapAccum(fn, acc, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [];\n        var tuple = [acc];\n        while (idx < len) {\n            tuple = fn(tuple[0], list[idx]);\n            result[idx] = tuple[1];\n            idx += 1;\n        }\n        return [\n            tuple[0],\n            result\n        ];\n    });\n\n    /**\n     * The mapAccumRight function behaves like a combination of map and reduce; it\n     * applies a function to each element of a list, passing an accumulating\n     * parameter from right to left, and returning a final value of this\n     * accumulator together with the new list.\n     *\n     * Similar to `mapAccum`, except moves through the input list from the right to\n     * the left.\n     *\n     * The iterator function receives two arguments, *acc* and *value*, and should\n     * return a tuple *[acc, value]*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.addIndex\n     * @example\n     *\n     *      var digits = ['1', '2', '3', '4'];\n     *      var append = (a, b) => [a + b, a + b];\n     *\n     *      R.mapAccumRight(append, 0, digits); //=> ['04321', ['04321', '0432', '043', '04']]\n     */\n    var mapAccumRight = _curry3(function mapAccumRight(fn, acc, list) {\n        var idx = list.length - 1;\n        var result = [];\n        var tuple = [acc];\n        while (idx >= 0) {\n            tuple = fn(tuple[0], list[idx]);\n            result[idx] = tuple[1];\n            idx -= 1;\n        }\n        return [\n            tuple[0],\n            result\n        ];\n    });\n\n    /**\n     * Tests a regular expression against a String. Note that this function will\n     * return an empty array when there are no matches. This differs from\n     * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n     * which returns `null` when there are no matches.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category String\n     * @sig RegExp -> String -> [String | Undefined]\n     * @param {RegExp} rx A regular expression.\n     * @param {String} str The string to match against\n     * @return {Array} The list of matches or empty array.\n     * @see R.test\n     * @example\n     *\n     *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n     *      R.match(/a/, 'b'); //=> []\n     *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n     */\n    var match = _curry2(function match(rx, str) {\n        return str.match(rx) || [];\n    });\n\n    /**\n     * mathMod behaves like the modulo operator should mathematically, unlike the\n     * `%` operator (and by extension, R.modulo). So while \"-17 % 5\" is -2,\n     * mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaN\n     * when the modulus is zero or negative.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} m The dividend.\n     * @param {Number} p the modulus.\n     * @return {Number} The result of `b mod a`.\n     * @example\n     *\n     *      R.mathMod(-17, 5);  //=> 3\n     *      R.mathMod(17, 5);   //=> 2\n     *      R.mathMod(17, -5);  //=> NaN\n     *      R.mathMod(17, 0);   //=> NaN\n     *      R.mathMod(17.2, 5); //=> NaN\n     *      R.mathMod(17, 5.3); //=> NaN\n     *\n     *      var clock = R.mathMod(R.__, 12);\n     *      clock(15); //=> 3\n     *      clock(24); //=> 0\n     *\n     *      var seventeenMod = R.mathMod(17);\n     *      seventeenMod(3);  //=> 2\n     *      seventeenMod(4);  //=> 1\n     *      seventeenMod(10); //=> 7\n     */\n    var mathMod = _curry2(function mathMod(m, p) {\n        if (!_isInteger(m)) {\n            return NaN;\n        }\n        if (!_isInteger(p) || p < 1) {\n            return NaN;\n        }\n        return (m % p + p) % p;\n    });\n\n    /**\n     * Returns the larger of its two arguments.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> a\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.maxBy, R.min\n     * @example\n     *\n     *      R.max(789, 123); //=> 789\n     *      R.max('a', 'b'); //=> 'b'\n     */\n    var max = _curry2(function max(a, b) {\n        return b > a ? b : a;\n    });\n\n    /**\n     * Takes a function and two values, and returns whichever value produces the\n     * larger result when passed to the provided function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> a -> a -> a\n     * @param {Function} f\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.max, R.minBy\n     * @example\n     *\n     *      //  square :: Number -> Number\n     *      var square = n => n * n;\n     *\n     *      R.maxBy(square, -3, 2); //=> -3\n     *\n     *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5\n     *      R.reduce(R.maxBy(square), 0, []); //=> 0\n     */\n    var maxBy = _curry3(function maxBy(f, a, b) {\n        return f(b) > f(a) ? b : a;\n    });\n\n    /**\n     * Create a new object with the own properties of the first object merged with\n     * the own properties of the second object. If a key exists in both objects,\n     * the value from the second object will be used.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> {k: v} -> {k: v}\n     * @param {Object} l\n     * @param {Object} r\n     * @return {Object}\n     * @see R.mergeWith, R.mergeWithKey\n     * @example\n     *\n     *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n     *      //=> { 'name': 'fred', 'age': 40 }\n     *\n     *      var resetToDefault = R.merge(R.__, {x: 0});\n     *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n     */\n    var merge = _curry2(function merge(l, r) {\n        return _assign({}, l, r);\n    });\n\n    /**\n     * Merges a list of objects together into one object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig [{k: v}] -> {k: v}\n     * @param {Array} list An array of objects\n     * @return {Object} A merged object.\n     * @see R.reduce\n     * @example\n     *\n     *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n     *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}\n     */\n    var mergeAll = _curry1(function mergeAll(list) {\n        return _assign.apply(null, [{}].concat(list));\n    });\n\n    /**\n     * Creates a new object with the own properties of the two provided objects. If\n     * a key exists in both objects, the provided function is applied to the key\n     * and the values associated with the key in each object, with the result being\n     * used as the value associated with the key in the returned object. The key\n     * will be excluded from the returned object if the resulting value is\n     * `undefined`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Object\n     * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}\n     * @param {Function} fn\n     * @param {Object} l\n     * @param {Object} r\n     * @return {Object}\n     * @see R.merge, R.mergeWith\n     * @example\n     *\n     *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n     *      R.mergeWithKey(concatValues,\n     *                     { a: true, thing: 'foo', values: [10, 20] },\n     *                     { b: true, thing: 'bar', values: [15, 35] });\n     *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n     */\n    var mergeWithKey = _curry3(function mergeWithKey(fn, l, r) {\n        var result = {};\n        var k;\n        for (k in l) {\n            if (_has(k, l)) {\n                result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n            }\n        }\n        for (k in r) {\n            if (_has(k, r) && !_has(k, result)) {\n                result[k] = r[k];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Returns the smaller of its two arguments.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> a\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.minBy, R.max\n     * @example\n     *\n     *      R.min(789, 123); //=> 123\n     *      R.min('a', 'b'); //=> 'a'\n     */\n    var min = _curry2(function min(a, b) {\n        return b < a ? b : a;\n    });\n\n    /**\n     * Takes a function and two values, and returns whichever value produces the\n     * smaller result when passed to the provided function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> a -> a -> a\n     * @param {Function} f\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.min, R.maxBy\n     * @example\n     *\n     *      //  square :: Number -> Number\n     *      var square = n => n * n;\n     *\n     *      R.minBy(square, -3, 2); //=> 2\n     *\n     *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n     *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n     */\n    var minBy = _curry3(function minBy(f, a, b) {\n        return f(b) < f(a) ? b : a;\n    });\n\n    /**\n     * Divides the first parameter by the second and returns the remainder. Note\n     * that this function preserves the JavaScript-style behavior for modulo. For\n     * mathematical modulo see `mathMod`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The value to the divide.\n     * @param {Number} b The pseudo-modulus\n     * @return {Number} The result of `b % a`.\n     * @see R.mathMod\n     * @example\n     *\n     *      R.modulo(17, 3); //=> 2\n     *      // JS behavior:\n     *      R.modulo(-17, 3); //=> -2\n     *      R.modulo(17, -3); //=> 2\n     *\n     *      var isOdd = R.modulo(R.__, 2);\n     *      isOdd(42); //=> 0\n     *      isOdd(21); //=> 1\n     */\n    var modulo = _curry2(function modulo(a, b) {\n        return a % b;\n    });\n\n    /**\n     * Multiplies two numbers. Equivalent to `a * b` but curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a * b`.\n     * @see R.divide\n     * @example\n     *\n     *      var double = R.multiply(2);\n     *      var triple = R.multiply(3);\n     *      double(3);       //=>  6\n     *      triple(4);       //=> 12\n     *      R.multiply(2, 5);  //=> 10\n     */\n    var multiply = _curry2(function multiply(a, b) {\n        return a * b;\n    });\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts\n     * exactly `n` parameters. Any extraneous parameters will not be passed to the\n     * supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig Number -> (* -> a) -> (* -> a)\n     * @param {Number} n The desired arity of the new function.\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity `n`.\n     * @example\n     *\n     *      var takesTwoArgs = (a, b) => [a, b];\n     *\n     *      takesTwoArgs.length; //=> 2\n     *      takesTwoArgs(1, 2); //=> [1, 2]\n     *\n     *      var takesOneArg = R.nAry(1, takesTwoArgs);\n     *      takesOneArg.length; //=> 1\n     *      // Only `n` arguments are passed to the wrapped function\n     *      takesOneArg(1, 2); //=> [1, undefined]\n     */\n    var nAry = _curry2(function nAry(n, fn) {\n        switch (n) {\n        case 0:\n            return function () {\n                return fn.call(this);\n            };\n        case 1:\n            return function (a0) {\n                return fn.call(this, a0);\n            };\n        case 2:\n            return function (a0, a1) {\n                return fn.call(this, a0, a1);\n            };\n        case 3:\n            return function (a0, a1, a2) {\n                return fn.call(this, a0, a1, a2);\n            };\n        case 4:\n            return function (a0, a1, a2, a3) {\n                return fn.call(this, a0, a1, a2, a3);\n            };\n        case 5:\n            return function (a0, a1, a2, a3, a4) {\n                return fn.call(this, a0, a1, a2, a3, a4);\n            };\n        case 6:\n            return function (a0, a1, a2, a3, a4, a5) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5);\n            };\n        case 7:\n            return function (a0, a1, a2, a3, a4, a5, a6) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6);\n            };\n        case 8:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);\n            };\n        case 9:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);\n            };\n        case 10:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);\n            };\n        default:\n            throw new Error('First argument to nAry must be a non-negative integer no greater than ten');\n        }\n    });\n\n    /**\n     * Negates its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @example\n     *\n     *      R.negate(42); //=> -42\n     */\n    var negate = _curry1(function negate(n) {\n        return -n;\n    });\n\n    /**\n     * Returns `true` if no elements of the list match the predicate, `false`\n     * otherwise.\n     *\n     * Dispatches to the `any` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.\n     * @see R.all, R.any\n     * @example\n     *\n     *      var isEven = n => n % 2 === 0;\n     *\n     *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true\n     *      R.none(isEven, [1, 3, 5, 7, 8, 11]); //=> false\n     */\n    var none = _curry2(_complement(_dispatchable('any', _xany, any)));\n\n    /**\n     * A function that returns the `!` of its argument. It will return `true` when\n     * passed false-y value, and `false` when passed a truth-y one.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> Boolean\n     * @param {*} a any value\n     * @return {Boolean} the logical inverse of passed argument.\n     * @see R.complement\n     * @example\n     *\n     *      R.not(true); //=> false\n     *      R.not(false); //=> true\n     *      R.not(0); //=> true\n     *      R.not(1); //=> false\n     */\n    var not = _curry1(function not(a) {\n        return !a;\n    });\n\n    /**\n     * Returns the nth element of the given list or string. If n is negative the\n     * element at index length + n is returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> [a] -> a | Undefined\n     * @sig Number -> String -> String\n     * @param {Number} offset\n     * @param {*} list\n     * @return {*}\n     * @example\n     *\n     *      var list = ['foo', 'bar', 'baz', 'quux'];\n     *      R.nth(1, list); //=> 'bar'\n     *      R.nth(-1, list); //=> 'quux'\n     *      R.nth(-99, list); //=> undefined\n     *\n     *      R.nth(2, 'abc'); //=> 'c'\n     *      R.nth(3, 'abc'); //=> ''\n     */\n    var nth = _curry2(function nth(offset, list) {\n        var idx = offset < 0 ? list.length + offset : offset;\n        return _isString(list) ? list.charAt(idx) : list[idx];\n    });\n\n    /**\n     * Returns a function which returns its nth argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig Number -> *... -> *\n     * @param {Number} n\n     * @return {Function}\n     * @example\n     *\n     *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'\n     *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'\n     */\n    var nthArg = _curry1(function nthArg(n) {\n        var arity = n < 0 ? 1 : n + 1;\n        return curryN(arity, function () {\n            return nth(n, arguments);\n        });\n    });\n\n    /**\n     * Creates an object containing a single key:value pair.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Object\n     * @sig String -> a -> {String:a}\n     * @param {String} key\n     * @param {*} val\n     * @return {Object}\n     * @see R.pair\n     * @example\n     *\n     *      var matchPhrases = R.compose(\n     *        R.objOf('must'),\n     *        R.map(R.objOf('match_phrase'))\n     *      );\n     *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n     */\n    var objOf = _curry2(function objOf(key, val) {\n        var obj = {};\n        obj[key] = val;\n        return obj;\n    });\n\n    /**\n     * Returns a singleton array containing the value provided.\n     *\n     * Note this `of` is different from the ES6 `of`; See\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig a -> [a]\n     * @param {*} x any value\n     * @return {Array} An array wrapping `x`.\n     * @example\n     *\n     *      R.of(null); //=> [null]\n     *      R.of([42]); //=> [[42]]\n     */\n    var of = _curry1(_of);\n\n    /**\n     * Accepts a function `fn` and returns a function that guards invocation of\n     * `fn` such that `fn` can only ever be called once, no matter how many times\n     * the returned function is invoked. The first value calculated is returned in\n     * subsequent invocations.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a... -> b) -> (a... -> b)\n     * @param {Function} fn The function to wrap in a call-only-once wrapper.\n     * @return {Function} The wrapped function.\n     * @example\n     *\n     *      var addOneOnce = R.once(x => x + 1);\n     *      addOneOnce(10); //=> 11\n     *      addOneOnce(addOneOnce(50)); //=> 11\n     */\n    var once = _curry1(function once(fn) {\n        var called = false;\n        var result;\n        return _arity(fn.length, function () {\n            if (called) {\n                return result;\n            }\n            called = true;\n            result = fn.apply(this, arguments);\n            return result;\n        });\n    });\n\n    /**\n     * Returns `true` if one or both of its arguments are `true`. Returns `false`\n     * if both arguments are `false`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> * -> *\n     * @param {Boolean} a A boolean value\n     * @param {Boolean} b A boolean value\n     * @return {Boolean} `true` if one or both arguments are `true`, `false` otherwise\n     * @see R.either\n     * @example\n     *\n     *      R.or(true, true); //=> true\n     *      R.or(true, false); //=> true\n     *      R.or(false, true); //=> true\n     *      R.or(false, false); //=> false\n     */\n    var or = _curry2(function or(a, b) {\n        return a || b;\n    });\n\n    /**\n     * Returns the result of \"setting\" the portion of the given data structure\n     * focused by the given lens to the result of applying the given function to\n     * the focused value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> (a -> a) -> s -> s\n     * @param {Lens} lens\n     * @param {*} v\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var headLens = R.lensIndex(0);\n     *\n     *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n     */\n    // `Identity` is a functor that holds a single value, where `map` simply\n    // transforms the held value with the provided function.\n    // The value returned by the getter function is first transformed with `f`,\n    // then set as the value of an `Identity`. This is then mapped over with the\n    // setter function of the lens.\n    var over = function () {\n        // `Identity` is a functor that holds a single value, where `map` simply\n        // transforms the held value with the provided function.\n        var Identity = function (x) {\n            return {\n                value: x,\n                map: function (f) {\n                    return Identity(f(x));\n                }\n            };\n        };\n        return _curry3(function over(lens, f, x) {\n            // The value returned by the getter function is first transformed with `f`,\n            // then set as the value of an `Identity`. This is then mapped over with the\n            // setter function of the lens.\n            return lens(function (y) {\n                return Identity(f(y));\n            })(x).value;\n        });\n    }();\n\n    /**\n     * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category List\n     * @sig a -> b -> (a,b)\n     * @param {*} fst\n     * @param {*} snd\n     * @return {Array}\n     * @see R.objOf, R.of\n     * @example\n     *\n     *      R.pair('foo', 'bar'); //=> ['foo', 'bar']\n     */\n    var pair = _curry2(function pair(fst, snd) {\n        return [\n            fst,\n            snd\n        ];\n    });\n\n    /**\n     * Retrieve the value at a given path.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig [String] -> {k: v} -> v | Undefined\n     * @param {Array} path The path to use.\n     * @param {Object} obj The object to retrieve the nested property from.\n     * @return {*} The data at `path`.\n     * @see R.prop\n     * @example\n     *\n     *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n     *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n     */\n    var path = _curry2(function path(paths, obj) {\n        var val = obj;\n        var idx = 0;\n        while (idx < paths.length) {\n            if (val == null) {\n                return;\n            }\n            val = val[paths[idx]];\n            idx += 1;\n        }\n        return val;\n    });\n\n    /**\n     * If the given, non-null object has a value at the given path, returns the\n     * value at that path. Otherwise returns the provided default value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Object\n     * @sig a -> [String] -> Object -> a\n     * @param {*} d The default value.\n     * @param {Array} p The path to use.\n     * @param {Object} obj The object to retrieve the nested property from.\n     * @return {*} The data at `path` of the supplied object or the default value.\n     * @example\n     *\n     *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n     *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n     */\n    var pathOr = _curry3(function pathOr(d, p, obj) {\n        return defaultTo(d, path(p, obj));\n    });\n\n    /**\n     * Returns `true` if the specified object property at given path satisfies the\n     * given predicate; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Logic\n     * @sig (a -> Boolean) -> [String] -> Object -> Boolean\n     * @param {Function} pred\n     * @param {Array} propPath\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.propSatisfies, R.path\n     * @example\n     *\n     *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true\n     */\n    var pathSatisfies = _curry3(function pathSatisfies(pred, propPath, obj) {\n        return propPath.length > 0 && pred(path(propPath, obj));\n    });\n\n    /**\n     * Returns a partial copy of an object containing only the keys specified. If\n     * the key does not exist, the property is ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> {k: v}\n     * @param {Array} names an array of String property names to copy onto a new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties from `names` on it.\n     * @see R.omit, R.props\n     * @example\n     *\n     *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n     *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n     */\n    var pick = _curry2(function pick(names, obj) {\n        var result = {};\n        var idx = 0;\n        while (idx < names.length) {\n            if (names[idx] in obj) {\n                result[names[idx]] = obj[names[idx]];\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Similar to `pick` except that this one includes a `key: undefined` pair for\n     * properties that don't exist.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> {k: v}\n     * @param {Array} names an array of String property names to copy onto a new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties from `names` on it.\n     * @see R.pick\n     * @example\n     *\n     *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n     *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}\n     */\n    var pickAll = _curry2(function pickAll(names, obj) {\n        var result = {};\n        var idx = 0;\n        var len = names.length;\n        while (idx < len) {\n            var name = names[idx];\n            result[name] = obj[name];\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns a partial copy of an object containing only the keys that satisfy\n     * the supplied predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig (v, k -> Boolean) -> {k: v} -> {k: v}\n     * @param {Function} pred A predicate to determine whether or not a key\n     *        should be included on the output object.\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties that satisfy `pred`\n     *         on it.\n     * @see R.pick, R.filter\n     * @example\n     *\n     *      var isUpperCase = (val, key) => key.toUpperCase() === key;\n     *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}\n     */\n    var pickBy = _curry2(function pickBy(test, obj) {\n        var result = {};\n        for (var prop in obj) {\n            if (test(obj[prop], prop, obj)) {\n                result[prop] = obj[prop];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Returns a new list with the given element at the front, followed by the\n     * contents of the list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} el The item to add to the head of the output list.\n     * @param {Array} list The array to add to the tail of the output list.\n     * @return {Array} A new array.\n     * @see R.append\n     * @example\n     *\n     *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n     */\n    var prepend = _curry2(function prepend(el, list) {\n        return _concat([el], list);\n    });\n\n    /**\n     * Returns a function that when supplied an object returns the indicated\n     * property of that object, if it exists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig s -> {s: a} -> a | Undefined\n     * @param {String} p The property name\n     * @param {Object} obj The object to query\n     * @return {*} The value at `obj.p`.\n     * @see R.path\n     * @example\n     *\n     *      R.prop('x', {x: 100}); //=> 100\n     *      R.prop('x', {}); //=> undefined\n     */\n    var prop = _curry2(function prop(p, obj) {\n        return obj[p];\n    });\n\n    /**\n     * Returns `true` if the specified object property is of the given type;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Type\n     * @sig Type -> String -> Object -> Boolean\n     * @param {Function} type\n     * @param {String} name\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.is, R.propSatisfies\n     * @example\n     *\n     *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true\n     *      R.propIs(Number, 'x', {x: 'foo'});    //=> false\n     *      R.propIs(Number, 'x', {});            //=> false\n     */\n    var propIs = _curry3(function propIs(type, name, obj) {\n        return is(type, obj[name]);\n    });\n\n    /**\n     * If the given, non-null object has an own property with the specified name,\n     * returns the value of that property. Otherwise returns the provided default\n     * value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Object\n     * @sig a -> String -> Object -> a\n     * @param {*} val The default value.\n     * @param {String} p The name of the property to return.\n     * @param {Object} obj The object to query.\n     * @return {*} The value of given property of the supplied object or the default value.\n     * @example\n     *\n     *      var alice = {\n     *        name: 'ALICE',\n     *        age: 101\n     *      };\n     *      var favorite = R.prop('favoriteLibrary');\n     *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n     *\n     *      favorite(alice);  //=> undefined\n     *      favoriteWithDefault(alice);  //=> 'Ramda'\n     */\n    var propOr = _curry3(function propOr(val, p, obj) {\n        return obj != null && _has(p, obj) ? obj[p] : val;\n    });\n\n    /**\n     * Returns `true` if the specified object property satisfies the given\n     * predicate; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Logic\n     * @sig (a -> Boolean) -> String -> {String: a} -> Boolean\n     * @param {Function} pred\n     * @param {String} name\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.propEq, R.propIs\n     * @example\n     *\n     *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true\n     */\n    var propSatisfies = _curry3(function propSatisfies(pred, name, obj) {\n        return pred(obj[name]);\n    });\n\n    /**\n     * Acts as multiple `prop`: array of keys in, array of values out. Preserves\n     * order.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> [v]\n     * @param {Array} ps The property names to fetch\n     * @param {Object} obj The object to query\n     * @return {Array} The corresponding values or partially applied function.\n     * @example\n     *\n     *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]\n     *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]\n     *\n     *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));\n     *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'\n     */\n    var props = _curry2(function props(ps, obj) {\n        var len = ps.length;\n        var out = [];\n        var idx = 0;\n        while (idx < len) {\n            out[idx] = obj[ps[idx]];\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> Number -> [Number]\n     * @param {Number} from The first number in the list.\n     * @param {Number} to One more than the last number in the list.\n     * @return {Array} The list of numbers in tthe set `[a, b)`.\n     * @example\n     *\n     *      R.range(1, 5);    //=> [1, 2, 3, 4]\n     *      R.range(50, 53);  //=> [50, 51, 52]\n     */\n    var range = _curry2(function range(from, to) {\n        if (!(_isNumber(from) && _isNumber(to))) {\n            throw new TypeError('Both arguments to range must be numbers');\n        }\n        var result = [];\n        var n = from;\n        while (n < to) {\n            result.push(n);\n            n += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns a single item by iterating through the list, successively calling\n     * the iterator function and passing it an accumulator value and the current\n     * value from the array, and then passing the result to the next call.\n     *\n     * Similar to `reduce`, except moves through the input list from the right to\n     * the left.\n     *\n     * The iterator function receives two values: *(acc, value)*\n     *\n     * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n     * arrays), unlike the native `Array.prototype.reduce` method. For more details\n     * on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,b -> a) -> a -> [b] -> a\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.addIndex\n     * @example\n     *\n     *      var pairs = [ ['a', 1], ['b', 2], ['c', 3] ];\n     *      var flattenPairs = (acc, pair) => acc.concat(pair);\n     *\n     *      R.reduceRight(flattenPairs, [], pairs); //=> [ 'c', 3, 'b', 2, 'a', 1 ]\n     */\n    var reduceRight = _curry3(function reduceRight(fn, acc, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            acc = fn(acc, list[idx]);\n            idx -= 1;\n        }\n        return acc;\n    });\n\n    /**\n     * Returns a value wrapped to indicate that it is the final value of the reduce\n     * and transduce functions. The returned value should be considered a black\n     * box: the internal structure is not guaranteed to be stable.\n     *\n     * Note: this optimization is unavailable to functions not explicitly listed\n     * above. For instance, it is not currently supported by reduceRight.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category List\n     * @sig a -> *\n     * @param {*} x The final value of the reduce.\n     * @return {*} The wrapped value.\n     * @see R.reduce, R.transduce\n     * @example\n     *\n     *      R.reduce(\n     *        R.pipe(R.add, R.when(R.gte(R.__, 10), R.reduced)),\n     *        0,\n     *        [1, 2, 3, 4, 5]) // 10\n     */\n    var reduced = _curry1(_reduced);\n\n    /**\n     * Removes the sub-list of `list` starting at index `start` and containing\n     * `count` elements. _Note that this is not destructive_: it returns a copy of\n     * the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.2\n     * @category List\n     * @sig Number -> Number -> [a] -> [a]\n     * @param {Number} start The position to start removing elements\n     * @param {Number} count The number of elements to remove\n     * @param {Array} list The list to remove from\n     * @return {Array} A new Array with `count` elements from `start` removed.\n     * @example\n     *\n     *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]\n     */\n    var remove = _curry3(function remove(start, count, list) {\n        return _concat(_slice(list, 0, Math.min(start, list.length)), _slice(list, Math.min(list.length, start + count)));\n    });\n\n    /**\n     * Replace a substring or regex match in a string with a replacement.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category String\n     * @sig RegExp|String -> String -> String -> String\n     * @param {RegExp|String} pattern A regular expression or a substring to match.\n     * @param {String} replacement The string to replace the matches with.\n     * @param {String} str The String to do the search and replacement in.\n     * @return {String} The result.\n     * @example\n     *\n     *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n     *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n     *\n     *      // Use the \"g\" (global) flag to replace all occurrences:\n     *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n     */\n    var replace = _curry3(function replace(regex, replacement, str) {\n        return str.replace(regex, replacement);\n    });\n\n    /**\n     * Returns a new list or string with the elements or characters in reverse\n     * order.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {Array|String} list\n     * @return {Array|String}\n     * @example\n     *\n     *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n     *      R.reverse([1, 2]);     //=> [2, 1]\n     *      R.reverse([1]);        //=> [1]\n     *      R.reverse([]);         //=> []\n     *\n     *      R.reverse('abc');      //=> 'cba'\n     *      R.reverse('ab');       //=> 'ba'\n     *      R.reverse('a');        //=> 'a'\n     *      R.reverse('');         //=> ''\n     */\n    var reverse = _curry1(function reverse(list) {\n        return _isString(list) ? list.split('').reverse().join('') : _slice(list).reverse();\n    });\n\n    /**\n     * Scan is similar to reduce, but returns a list of successively reduced values\n     * from the left\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (a,b -> a) -> a -> [b] -> [a]\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {Array} A list of all intermediately reduced values.\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n     */\n    var scan = _curry3(function scan(fn, acc, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [acc];\n        while (idx < len) {\n            acc = fn(acc, list[idx]);\n            result[idx + 1] = acc;\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns the result of \"setting\" the portion of the given data structure\n     * focused by the given lens to the given value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> a -> s -> s\n     * @param {Lens} lens\n     * @param {*} v\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n     *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}\n     */\n    var set = _curry3(function set(lens, v, x) {\n        return over(lens, always(v), x);\n    });\n\n    /**\n     * Returns the elements of the given list or string (or object with a `slice`\n     * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n     *\n     * Dispatches to the `slice` method of the third argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @sig Number -> Number -> [a] -> [a]\n     * @sig Number -> Number -> String -> String\n     * @param {Number} fromIndex The start index (inclusive).\n     * @param {Number} toIndex The end index (exclusive).\n     * @param {*} list\n     * @return {*}\n     * @example\n     *\n     *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n     *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n     *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n     *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n     *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n     */\n    var slice = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n        return Array.prototype.slice.call(list, fromIndex, toIndex);\n    }));\n\n    /**\n     * Returns a copy of the list, sorted according to the comparator function,\n     * which should accept two values at a time and return a negative number if the\n     * first value is smaller, a positive number if it's larger, and zero if they\n     * are equal. Please note that this is a **copy** of the list. It does not\n     * modify the original.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,a -> Number) -> [a] -> [a]\n     * @param {Function} comparator A sorting function :: a -> b -> Int\n     * @param {Array} list The list to sort\n     * @return {Array} a new array with its elements sorted by the comparator function.\n     * @example\n     *\n     *      var diff = function(a, b) { return a - b; };\n     *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]\n     */\n    var sort = _curry2(function sort(comparator, list) {\n        return _slice(list).sort(comparator);\n    });\n\n    /**\n     * Sorts the list according to the supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> [a] -> [a]\n     * @param {Function} fn\n     * @param {Array} list The list to sort.\n     * @return {Array} A new list sorted by the keys generated by `fn`.\n     * @example\n     *\n     *      var sortByFirstItem = R.sortBy(R.prop(0));\n     *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\n     *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];\n     *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n     *      var alice = {\n     *        name: 'ALICE',\n     *        age: 101\n     *      };\n     *      var bob = {\n     *        name: 'Bob',\n     *        age: -10\n     *      };\n     *      var clara = {\n     *        name: 'clara',\n     *        age: 314.159\n     *      };\n     *      var people = [clara, bob, alice];\n     *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\n     */\n    var sortBy = _curry2(function sortBy(fn, list) {\n        return _slice(list).sort(function (a, b) {\n            var aa = fn(a);\n            var bb = fn(b);\n            return aa < bb ? -1 : aa > bb ? 1 : 0;\n        });\n    });\n\n    /**\n     * Splits a given list or string at a given index.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig Number -> [a] -> [[a], [a]]\n     * @sig Number -> String -> [String, String]\n     * @param {Number} index The index where the array/string is split.\n     * @param {Array|String} array The array/string to be split.\n     * @return {Array}\n     * @example\n     *\n     *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\n     *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']\n     *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']\n     */\n    var splitAt = _curry2(function splitAt(index, array) {\n        return [\n            slice(0, index, array),\n            slice(index, length(array), array)\n        ];\n    });\n\n    /**\n     * Splits a collection into slices of the specified length.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [[a]]\n     * @sig Number -> String -> [String]\n     * @param {Number} n\n     * @param {Array} list\n     * @return {Array}\n     * @example\n     *\n     *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n     *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n     */\n    var splitEvery = _curry2(function splitEvery(n, list) {\n        if (n <= 0) {\n            throw new Error('First argument to splitEvery must be a positive integer');\n        }\n        var result = [];\n        var idx = 0;\n        while (idx < list.length) {\n            result.push(slice(idx, idx += n, list));\n        }\n        return result;\n    });\n\n    /**\n     * Takes a list and a predicate and returns a pair of lists with the following properties:\n     *\n     *  - the result of concatenating the two output lists is equivalent to the input list;\n     *  - none of the elements of the first output list satisfies the predicate; and\n     *  - if the second output list is non-empty, its first element satisfies the predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n     * @param {Function} pred The predicate that determines where the array is split.\n     * @param {Array} list The array to be split.\n     * @return {Array}\n     * @example\n     *\n     *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n     */\n    var splitWhen = _curry2(function splitWhen(pred, list) {\n        var idx = 0;\n        var len = list.length;\n        var prefix = [];\n        while (idx < len && !pred(list[idx])) {\n            prefix.push(list[idx]);\n            idx += 1;\n        }\n        return [\n            prefix,\n            _slice(list, idx)\n        ];\n    });\n\n    /**\n     * Subtracts its second argument from its first argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a - b`.\n     * @see R.add\n     * @example\n     *\n     *      R.subtract(10, 8); //=> 2\n     *\n     *      var minus5 = R.subtract(R.__, 5);\n     *      minus5(17); //=> 12\n     *\n     *      var complementaryAngle = R.subtract(90);\n     *      complementaryAngle(30); //=> 60\n     *      complementaryAngle(72); //=> 18\n     */\n    var subtract = _curry2(function subtract(a, b) {\n        return Number(a) - Number(b);\n    });\n\n    /**\n     * Returns all but the first element of the given list or string (or object\n     * with a `tail` method).\n     *\n     * Dispatches to the `slice` method of the first argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @see R.head, R.init, R.last\n     * @example\n     *\n     *      R.tail([1, 2, 3]);  //=> [2, 3]\n     *      R.tail([1, 2]);     //=> [2]\n     *      R.tail([1]);        //=> []\n     *      R.tail([]);         //=> []\n     *\n     *      R.tail('abc');  //=> 'bc'\n     *      R.tail('ab');   //=> 'b'\n     *      R.tail('a');    //=> ''\n     *      R.tail('');     //=> ''\n     */\n    var tail = _checkForMethod('tail', slice(1, Infinity));\n\n    /**\n     * Returns the first `n` elements of the given list, string, or\n     * transducer/transformer (or object with a `take` method).\n     *\n     * Dispatches to the `take` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n\n     * @param {*} list\n     * @return {*}\n     * @see R.drop\n     * @example\n     *\n     *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n     *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n     *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.take(3, 'ramda');               //=> 'ram'\n     *\n     *      var personnel = [\n     *        'Dave Brubeck',\n     *        'Paul Desmond',\n     *        'Eugene Wright',\n     *        'Joe Morello',\n     *        'Gerry Mulligan',\n     *        'Bob Bates',\n     *        'Joe Dodge',\n     *        'Ron Crotty'\n     *      ];\n     *\n     *      var takeFive = R.take(5);\n     *      takeFive(personnel);\n     *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n     */\n    var take = _curry2(_dispatchable('take', _xtake, function take(n, xs) {\n        return slice(0, n < 0 ? Infinity : n, xs);\n    }));\n\n    /**\n     * Returns a new list containing the last `n` elements of a given list, passing\n     * each value to the supplied predicate function, and terminating when the\n     * predicate function returns `false`. Excludes the element that caused the\n     * predicate function to fail. The predicate function is passed one argument:\n     * *(value)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.dropLastWhile, R.addIndex\n     * @example\n     *\n     *      var isNotOne = x => x !== 1;\n     *\n     *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n     */\n    var takeLastWhile = _curry2(function takeLastWhile(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0 && fn(list[idx])) {\n            idx -= 1;\n        }\n        return _slice(list, idx + 1, Infinity);\n    });\n\n    /**\n     * Returns a new list containing the first `n` elements of a given list,\n     * passing each value to the supplied predicate function, and terminating when\n     * the predicate function returns `false`. Excludes the element that caused the\n     * predicate function to fail. The predicate function is passed one argument:\n     * *(value)*.\n     *\n     * Dispatches to the `takeWhile` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.dropWhile, R.transduce, R.addIndex\n     * @example\n     *\n     *      var isNotFour = x => x !== 4;\n     *\n     *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]\n     */\n    var takeWhile = _curry2(_dispatchable('takeWhile', _xtakeWhile, function takeWhile(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len && fn(list[idx])) {\n            idx += 1;\n        }\n        return _slice(list, 0, idx);\n    }));\n\n    /**\n     * Runs the given function with the supplied object, then returns the object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a -> *) -> a -> a\n     * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n     * @param {*} x\n     * @return {*} `x`.\n     * @example\n     *\n     *      var sayX = x => console.log('x is ' + x);\n     *      R.tap(sayX, 100); //=> 100\n     *      // logs 'x is 100'\n     */\n    var tap = _curry2(function tap(fn, x) {\n        fn(x);\n        return x;\n    });\n\n    /**\n     * Calls an input function `n` times, returning an array containing the results\n     * of those function calls.\n     *\n     * `fn` is passed one argument: The current value of `n`, which begins at `0`\n     * and is gradually incremented to `n - 1`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.3\n     * @category List\n     * @sig (Number -> a) -> Number -> [a]\n     * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n     * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n     * @return {Array} An array containing the return values of all calls to `fn`.\n     * @example\n     *\n     *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n     */\n    var times = _curry2(function times(fn, n) {\n        var len = Number(n);\n        var idx = 0;\n        var list;\n        if (len < 0 || isNaN(len)) {\n            throw new RangeError('n must be a non-negative number');\n        }\n        list = new Array(len);\n        while (idx < len) {\n            list[idx] = fn(idx);\n            idx += 1;\n        }\n        return list;\n    });\n\n    /**\n     * Converts an object into an array of key, value arrays. Only the object's\n     * own properties are used.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Object\n     * @sig {String: *} -> [[String,*]]\n     * @param {Object} obj The object to extract from\n     * @return {Array} An array of key, value arrays from the object's own properties.\n     * @see R.fromPairs\n     * @example\n     *\n     *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]\n     */\n    var toPairs = _curry1(function toPairs(obj) {\n        var pairs = [];\n        for (var prop in obj) {\n            if (_has(prop, obj)) {\n                pairs[pairs.length] = [\n                    prop,\n                    obj[prop]\n                ];\n            }\n        }\n        return pairs;\n    });\n\n    /**\n     * Converts an object into an array of key, value arrays. The object's own\n     * properties and prototype properties are used. Note that the order of the\n     * output array is not guaranteed to be consistent across different JS\n     * platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Object\n     * @sig {String: *} -> [[String,*]]\n     * @param {Object} obj The object to extract from\n     * @return {Array} An array of key, value arrays from the object's own\n     *         and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]\n     */\n    var toPairsIn = _curry1(function toPairsIn(obj) {\n        var pairs = [];\n        for (var prop in obj) {\n            pairs[pairs.length] = [\n                prop,\n                obj[prop]\n            ];\n        }\n        return pairs;\n    });\n\n    /**\n     * Transposes the rows and columns of a 2D list.\n     * When passed a list of `n` lists of length `x`,\n     * returns a list of `x` lists of length `n`.\n     *\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig [[a]] -> [[a]]\n     * @param {Array} list A 2D list\n     * @return {Array} A 2D list\n     * @example\n     *\n     *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]\n     *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n     *\n     * If some of the rows are shorter than the following rows, their elements are skipped:\n     *\n     *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]\n     */\n    var transpose = _curry1(function transpose(outerlist) {\n        var i = 0;\n        var result = [];\n        while (i < outerlist.length) {\n            var innerlist = outerlist[i];\n            var j = 0;\n            while (j < innerlist.length) {\n                if (typeof result[j] === 'undefined') {\n                    result[j] = [];\n                }\n                result[j].push(innerlist[j]);\n                j += 1;\n            }\n            i += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Removes (strips) whitespace from both ends of the string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to trim.\n     * @return {String} Trimmed version of `str`.\n     * @example\n     *\n     *      R.trim('   xyz  '); //=> 'xyz'\n     *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n     */\n    var trim = function () {\n        var ws = '\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' + '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' + '\\u2029\\uFEFF';\n        var zeroWidth = '\\u200B';\n        var hasProtoTrim = typeof String.prototype.trim === 'function';\n        if (!hasProtoTrim || (ws.trim() || !zeroWidth.trim())) {\n            return _curry1(function trim(str) {\n                var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n                var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n                return str.replace(beginRx, '').replace(endRx, '');\n            });\n        } else {\n            return _curry1(function trim(str) {\n                return str.trim();\n            });\n        }\n    }();\n\n    /**\n     * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\n     * function evaluates the `tryer`; if it does not throw, it simply returns the\n     * result. If the `tryer` *does* throw, the returned function evaluates the\n     * `catcher` function and returns its result. Note that for effective\n     * composition with this function, both the `tryer` and `catcher` functions\n     * must return the same type of results.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category Function\n     * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)\n     * @param {Function} tryer The function that may throw.\n     * @param {Function} catcher The function that will be evaluated if `tryer` throws.\n     * @return {Function} A new function that will catch exceptions and send then to the catcher.\n     * @example\n     *\n     *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true\n     *      R.tryCatch(R.prop('x'), R.F)(null);      //=> false\n     */\n    var tryCatch = _curry2(function _tryCatch(tryer, catcher) {\n        return _arity(tryer.length, function () {\n            try {\n                return tryer.apply(this, arguments);\n            } catch (e) {\n                return catcher.apply(this, _concat([e], arguments));\n            }\n        });\n    });\n\n    /**\n     * Gives a single-word string description of the (native) type of a value,\n     * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n     * attempt to distinguish user Object types any further, reporting them all as\n     * 'Object'.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Type\n     * @sig (* -> {*}) -> String\n     * @param {*} val The value to test\n     * @return {String}\n     * @example\n     *\n     *      R.type({}); //=> \"Object\"\n     *      R.type(1); //=> \"Number\"\n     *      R.type(false); //=> \"Boolean\"\n     *      R.type('s'); //=> \"String\"\n     *      R.type(null); //=> \"Null\"\n     *      R.type([]); //=> \"Array\"\n     *      R.type(/[A-z]/); //=> \"RegExp\"\n     */\n    var type = _curry1(function type(val) {\n        return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n    });\n\n    /**\n     * Takes a function `fn`, which takes a single array argument, and returns a\n     * function which:\n     *\n     *   - takes any number of positional arguments;\n     *   - passes these arguments to `fn` as an array; and\n     *   - returns the result.\n     *\n     * In other words, R.unapply derives a variadic function from a function which\n     * takes an array. R.unapply is the inverse of R.apply.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Function\n     * @sig ([*...] -> a) -> (*... -> a)\n     * @param {Function} fn\n     * @return {Function}\n     * @see R.apply\n     * @example\n     *\n     *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n     */\n    var unapply = _curry1(function unapply(fn) {\n        return function () {\n            return fn(_slice(arguments));\n        };\n    });\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts\n     * exactly 1 parameter. Any extraneous parameters will not be passed to the\n     * supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Function\n     * @sig (* -> b) -> (a -> b)\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity 1.\n     * @example\n     *\n     *      var takesTwoArgs = function(a, b) {\n     *        return [a, b];\n     *      };\n     *      takesTwoArgs.length; //=> 2\n     *      takesTwoArgs(1, 2); //=> [1, 2]\n     *\n     *      var takesOneArg = R.unary(takesTwoArgs);\n     *      takesOneArg.length; //=> 1\n     *      // Only 1 argument is passed to the wrapped function\n     *      takesOneArg(1, 2); //=> [1, undefined]\n     */\n    var unary = _curry1(function unary(fn) {\n        return nAry(1, fn);\n    });\n\n    /**\n     * Returns a function of arity `n` from a (manually) curried function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Function\n     * @sig Number -> (a -> b) -> (a -> c)\n     * @param {Number} length The arity for the returned function.\n     * @param {Function} fn The function to uncurry.\n     * @return {Function} A new function.\n     * @see R.curry\n     * @example\n     *\n     *      var addFour = a => b => c => d => a + b + c + d;\n     *\n     *      var uncurriedAddFour = R.uncurryN(4, addFour);\n     *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n     */\n    var uncurryN = _curry2(function uncurryN(depth, fn) {\n        return curryN(depth, function () {\n            var currentDepth = 1;\n            var value = fn;\n            var idx = 0;\n            var endIdx;\n            while (currentDepth <= depth && typeof value === 'function') {\n                endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n                value = value.apply(this, _slice(arguments, idx, endIdx));\n                currentDepth += 1;\n                idx = endIdx;\n            }\n            return value;\n        });\n    });\n\n    /**\n     * Builds a list from a seed value. Accepts an iterator function, which returns\n     * either false to stop iteration or an array of length 2 containing the value\n     * to add to the resulting list and the seed to be used in the next call to the\n     * iterator function.\n     *\n     * The iterator function receives one argument: *(seed)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (a -> [b]) -> * -> [b]\n     * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n     *        either false to quit iteration or an array of length two to proceed. The element\n     *        at index 0 of this array will be added to the resulting array, and the element\n     *        at index 1 will be passed to the next call to `fn`.\n     * @param {*} seed The seed value.\n     * @return {Array} The final list.\n     * @example\n     *\n     *      var f = n => n > 50 ? false : [-n, n + 10];\n     *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n     */\n    var unfold = _curry2(function unfold(fn, seed) {\n        var pair = fn(seed);\n        var result = [];\n        while (pair && pair.length) {\n            result[result.length] = pair[0];\n            pair = fn(pair[1]);\n        }\n        return result;\n    });\n\n    /**\n     * Returns a new list containing only one copy of each element in the original\n     * list, based upon the value returned by applying the supplied predicate to\n     * two list elements. Prefers the first item if two items compare equal based\n     * on the predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category List\n     * @sig (a, a -> Boolean) -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      var strEq = R.eqBy(String);\n     *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n     *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n     *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n     *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\n     */\n    var uniqWith = _curry2(function uniqWith(pred, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [];\n        var item;\n        while (idx < len) {\n            item = list[idx];\n            if (!_containsWith(pred, item, result)) {\n                result[result.length] = item;\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Tests the final argument by passing it to the given predicate function. If\n     * the predicate is not satisfied, the function will return the result of\n     * calling the `whenFalseFn` function with the same argument. If the predicate\n     * is satisfied, the argument is returned as is.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Logic\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n     * @param {Function} pred        A predicate function\n     * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates\n     *                               to a falsy value.\n     * @param {*}        x           An object to test with the `pred` function and\n     *                               pass to `whenFalseFn` if necessary.\n     * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.\n     * @see R.ifElse, R.when\n     * @example\n     *\n     *      // coerceArray :: (a|[a]) -> [a]\n     *      var coerceArray = R.unless(R.isArrayLike, R.of);\n     *      coerceArray([1, 2, 3]); //=> [1, 2, 3]\n     *      coerceArray(1);         //=> [1]\n     */\n    var unless = _curry3(function unless(pred, whenFalseFn, x) {\n        return pred(x) ? x : whenFalseFn(x);\n    });\n\n    /**\n     * Takes a predicate, a transformation function, and an initial value,\n     * and returns a value of the same type as the initial value.\n     * It does so by applying the transformation until the predicate is satisfied,\n     * at which point it returns the satisfactory value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category Logic\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n     * @param {Function} pred A predicate function\n     * @param {Function} fn The iterator function\n     * @param {*} init Initial value\n     * @return {*} Final value that satisfies predicate\n     * @example\n     *\n     *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128\n     */\n    var until = _curry3(function until(pred, fn, init) {\n        var val = init;\n        while (!pred(val)) {\n            val = fn(val);\n        }\n        return val;\n    });\n\n    /**\n     * Returns a new copy of the array with the element at the provided index\n     * replaced with the given value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig Number -> a -> [a] -> [a]\n     * @param {Number} idx The index to update.\n     * @param {*} x The value to exist at the given index of the returned array.\n     * @param {Array|Arguments} list The source array-like object to be updated.\n     * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\n     * @see R.adjust\n     * @example\n     *\n     *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]\n     *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]\n     */\n    var update = _curry3(function update(idx, x, list) {\n        return adjust(always(x), idx, list);\n    });\n\n    /**\n     * Accepts a function `fn` and a list of transformer functions and returns a\n     * new curried function. When the new function is invoked, it calls the\n     * function `fn` with parameters consisting of the result of calling each\n     * supplied handler on successive arguments to the new function.\n     *\n     * If more arguments are passed to the returned function than transformer\n     * functions, those arguments are passed directly to `fn` as additional\n     * parameters. If you expect additional arguments that don't need to be\n     * transformed, although you can ignore them, it's best to pass an identity\n     * function so that the new function reports the correct arity.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n     * @param {Function} fn The function to wrap.\n     * @param {Array} transformers A list of transformer functions\n     * @return {Function} The wrapped function.\n     * @example\n     *\n     *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n     *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n     *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n     *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n     */\n    var useWith = _curry2(function useWith(fn, transformers) {\n        return curryN(transformers.length, function () {\n            var args = [];\n            var idx = 0;\n            while (idx < transformers.length) {\n                args.push(transformers[idx].call(this, arguments[idx]));\n                idx += 1;\n            }\n            return fn.apply(this, args.concat(_slice(arguments, transformers.length)));\n        });\n    });\n\n    /**\n     * Returns a list of all the enumerable own properties of the supplied object.\n     * Note that the order of the output array is not guaranteed across different\n     * JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> [v]\n     * @param {Object} obj The object to extract values from\n     * @return {Array} An array of the values of the object's own properties.\n     * @example\n     *\n     *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n     */\n    var values = _curry1(function values(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var vals = [];\n        var idx = 0;\n        while (idx < len) {\n            vals[idx] = obj[props[idx]];\n            idx += 1;\n        }\n        return vals;\n    });\n\n    /**\n     * Returns a list of all the properties, including prototype properties, of the\n     * supplied object.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig {k: v} -> [v]\n     * @param {Object} obj The object to extract values from\n     * @return {Array} An array of the values of the object's own and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.valuesIn(f); //=> ['X', 'Y']\n     */\n    var valuesIn = _curry1(function valuesIn(obj) {\n        var prop;\n        var vs = [];\n        for (prop in obj) {\n            vs[vs.length] = obj[prop];\n        }\n        return vs;\n    });\n\n    /**\n     * Returns a \"view\" of the given data structure, determined by the given lens.\n     * The lens's focus determines which portion of the data structure is visible.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> s -> a\n     * @param {Lens} lens\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.view(xLens, {x: 1, y: 2});  //=> 1\n     *      R.view(xLens, {x: 4, y: 2});  //=> 4\n     */\n    // `Const` is a functor that effectively ignores the function given to `map`.\n    // Using `Const` effectively ignores the setter function of the `lens`,\n    // leaving the value returned by the getter function unmodified.\n    var view = function () {\n        // `Const` is a functor that effectively ignores the function given to `map`.\n        var Const = function (x) {\n            return {\n                value: x,\n                map: function () {\n                    return this;\n                }\n            };\n        };\n        return _curry2(function view(lens, x) {\n            // Using `Const` effectively ignores the setter function of the `lens`,\n            // leaving the value returned by the getter function unmodified.\n            return lens(Const)(x).value;\n        });\n    }();\n\n    /**\n     * Tests the final argument by passing it to the given predicate function. If\n     * the predicate is satisfied, the function will return the result of calling\n     * the `whenTrueFn` function with the same argument. If the predicate is not\n     * satisfied, the argument is returned as is.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Logic\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n     * @param {Function} pred       A predicate function\n     * @param {Function} whenTrueFn A function to invoke when the `condition`\n     *                              evaluates to a truthy value.\n     * @param {*}        x          An object to test with the `pred` function and\n     *                              pass to `whenTrueFn` if necessary.\n     * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.\n     * @see R.ifElse, R.unless\n     * @example\n     *\n     *      // truncate :: String -> String\n     *      var truncate = R.when(\n     *        R.propSatisfies(R.gt(R.__, 10), 'length'),\n     *        R.pipe(R.take(10), R.append('…'), R.join(''))\n     *      );\n     *      truncate('12345');         //=> '12345'\n     *      truncate('0123456789ABC'); //=> '0123456789…'\n     */\n    var when = _curry3(function when(pred, whenTrueFn, x) {\n        return pred(x) ? whenTrueFn(x) : x;\n    });\n\n    /**\n     * Takes a spec object and a test object; returns true if the test satisfies\n     * the spec. Each of the spec's own properties must be a predicate function.\n     * Each predicate is applied to the value of the corresponding property of the\n     * test object. `where` returns true if all the predicates return true, false\n     * otherwise.\n     *\n     * `where` is well suited to declaratively expressing constraints for other\n     * functions such as `filter` and `find`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category Object\n     * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n     * @param {Object} spec\n     * @param {Object} testObj\n     * @return {Boolean}\n     * @example\n     *\n     *      // pred :: Object -> Boolean\n     *      var pred = where({\n     *        a: equals('foo'),\n     *        b: complement(equals('bar')),\n     *        x: gt(__, 10),\n     *        y: lt(__, 20)\n     *      });\n     *\n     *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n     *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n     */\n    var where = _curry2(function where(spec, testObj) {\n        for (var prop in spec) {\n            if (_has(prop, spec) && !spec[prop](testObj[prop])) {\n                return false;\n            }\n        }\n        return true;\n    });\n\n    /**\n     * Wrap a function inside another to allow you to make adjustments to the\n     * parameters, or do other processing either before the internal function is\n     * called or with its results.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)\n     * @param {Function} fn The function to wrap.\n     * @param {Function} wrapper The wrapper function.\n     * @return {Function} The wrapped function.\n     * @deprecated since v0.22.0\n     * @example\n     *\n     *      var greet = name => 'Hello ' + name;\n     *\n     *      var shoutedGreet = R.wrap(greet, (gr, name) => gr(name).toUpperCase());\n     *\n     *      shoutedGreet(\"Kathy\"); //=> \"HELLO KATHY\"\n     *\n     *      var shortenedGreet = R.wrap(greet, function(gr, name) {\n     *        return gr(name.substring(0, 3));\n     *      });\n     *      shortenedGreet(\"Robert\"); //=> \"Hello Rob\"\n     */\n    var wrap = _curry2(function wrap(fn, wrapper) {\n        return curryN(fn.length, function () {\n            return wrapper.apply(this, _concat([fn], arguments));\n        });\n    });\n\n    /**\n     * Creates a new list out of the two supplied by creating each possible pair\n     * from the lists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b] -> [[a,b]]\n     * @param {Array} as The first list.\n     * @param {Array} bs The second list.\n     * @return {Array} The list made by combining each possible pair from\n     *         `as` and `bs` into pairs (`[a, b]`).\n     * @example\n     *\n     *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\n     */\n    // = xprodWith(prepend); (takes about 3 times as long...)\n    var xprod = _curry2(function xprod(a, b) {\n        // = xprodWith(prepend); (takes about 3 times as long...)\n        var idx = 0;\n        var ilen = a.length;\n        var j;\n        var jlen = b.length;\n        var result = [];\n        while (idx < ilen) {\n            j = 0;\n            while (j < jlen) {\n                result[result.length] = [\n                    a[idx],\n                    b[j]\n                ];\n                j += 1;\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Creates a new list out of the two supplied by pairing up equally-positioned\n     * items from both lists. The returned list is truncated to the length of the\n     * shorter of the two input lists.\n     * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b] -> [[a,b]]\n     * @param {Array} list1 The first array to consider.\n     * @param {Array} list2 The second array to consider.\n     * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\n     * @example\n     *\n     *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n     */\n    var zip = _curry2(function zip(a, b) {\n        var rv = [];\n        var idx = 0;\n        var len = Math.min(a.length, b.length);\n        while (idx < len) {\n            rv[idx] = [\n                a[idx],\n                b[idx]\n            ];\n            idx += 1;\n        }\n        return rv;\n    });\n\n    /**\n     * Creates a new object out of a list of keys and a list of values.\n     * Key/value pairing is truncated to the length of the shorter of the two lists.\n     * Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [String] -> [*] -> {String: *}\n     * @param {Array} keys The array that will be properties on the output object.\n     * @param {Array} values The list of values on the output object.\n     * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n     * @example\n     *\n     *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n     */\n    var zipObj = _curry2(function zipObj(keys, values) {\n        var idx = 0;\n        var len = Math.min(keys.length, values.length);\n        var out = {};\n        while (idx < len) {\n            out[keys[idx]] = values[idx];\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Creates a new list out of the two supplied by applying the function to each\n     * equally-positioned pair in the lists. The returned list is truncated to the\n     * length of the shorter of the two input lists.\n     *\n     * @function\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,b -> c) -> [a] -> [b] -> [c]\n     * @param {Function} fn The function used to combine the two elements into one value.\n     * @param {Array} list1 The first array to consider.\n     * @param {Array} list2 The second array to consider.\n     * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`\n     *         using `fn`.\n     * @example\n     *\n     *      var f = (x, y) => {\n     *        // ...\n     *      };\n     *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n     *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\n     */\n    var zipWith = _curry3(function zipWith(fn, a, b) {\n        var rv = [];\n        var idx = 0;\n        var len = Math.min(a.length, b.length);\n        while (idx < len) {\n            rv[idx] = fn(a[idx], b[idx]);\n            idx += 1;\n        }\n        return rv;\n    });\n\n    /**\n     * A function that always returns `false`. Any passed in parameters are ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig * -> Boolean\n     * @param {*}\n     * @return {Boolean}\n     * @see R.always, R.T\n     * @example\n     *\n     *      R.F(); //=> false\n     */\n    var F = always(false);\n\n    /**\n     * A function that always returns `true`. Any passed in parameters are ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig * -> Boolean\n     * @param {*}\n     * @return {Boolean}\n     * @see R.always, R.F\n     * @example\n     *\n     *      R.T(); //=> true\n     */\n    var T = always(true);\n\n    /**\n     * Copies an object.\n     *\n     * @private\n     * @param {*} value The value to be copied\n     * @param {Array} refFrom Array containing the source references\n     * @param {Array} refTo Array containing the copied source references\n     * @param {Boolean} deep Whether or not to perform deep cloning.\n     * @return {*} The copied value.\n     */\n    var _clone = function _clone(value, refFrom, refTo, deep) {\n        var copy = function copy(copiedValue) {\n            var len = refFrom.length;\n            var idx = 0;\n            while (idx < len) {\n                if (value === refFrom[idx]) {\n                    return refTo[idx];\n                }\n                idx += 1;\n            }\n            refFrom[idx + 1] = value;\n            refTo[idx + 1] = copiedValue;\n            for (var key in value) {\n                copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];\n            }\n            return copiedValue;\n        };\n        switch (type(value)) {\n        case 'Object':\n            return copy({});\n        case 'Array':\n            return copy([]);\n        case 'Date':\n            return new Date(value.valueOf());\n        case 'RegExp':\n            return _cloneRegExp(value);\n        default:\n            return value;\n        }\n    };\n\n    var _createPartialApplicator = function _createPartialApplicator(concat) {\n        return _curry2(function (fn, args) {\n            return _arity(Math.max(0, fn.length - args.length), function () {\n                return fn.apply(this, concat(args, arguments));\n            });\n        });\n    };\n\n    var _dropLast = function dropLast(n, xs) {\n        return take(n < xs.length ? xs.length - n : 0, xs);\n    };\n\n    // Values of other types are only equal if identical.\n    var _equals = function _equals(a, b, stackA, stackB) {\n        if (identical(a, b)) {\n            return true;\n        }\n        if (type(a) !== type(b)) {\n            return false;\n        }\n        if (a == null || b == null) {\n            return false;\n        }\n        if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n            return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);\n        }\n        switch (type(a)) {\n        case 'Arguments':\n        case 'Array':\n        case 'Object':\n            if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {\n                return a === b;\n            }\n            break;\n        case 'Boolean':\n        case 'Number':\n        case 'String':\n            if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {\n                return false;\n            }\n            break;\n        case 'Date':\n            if (!identical(a.valueOf(), b.valueOf())) {\n                return false;\n            }\n            break;\n        case 'Error':\n            return a.name === b.name && a.message === b.message;\n        case 'RegExp':\n            if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {\n                return false;\n            }\n            break;\n        case 'Map':\n        case 'Set':\n            if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {\n                return false;\n            }\n            break;\n        case 'Int8Array':\n        case 'Uint8Array':\n        case 'Uint8ClampedArray':\n        case 'Int16Array':\n        case 'Uint16Array':\n        case 'Int32Array':\n        case 'Uint32Array':\n        case 'Float32Array':\n        case 'Float64Array':\n            break;\n        case 'ArrayBuffer':\n            break;\n        default:\n            // Values of other types are only equal if identical.\n            return false;\n        }\n        var keysA = keys(a);\n        if (keysA.length !== keys(b).length) {\n            return false;\n        }\n        var idx = stackA.length - 1;\n        while (idx >= 0) {\n            if (stackA[idx] === a) {\n                return stackB[idx] === b;\n            }\n            idx -= 1;\n        }\n        stackA.push(a);\n        stackB.push(b);\n        idx = keysA.length - 1;\n        while (idx >= 0) {\n            var key = keysA[idx];\n            if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {\n                return false;\n            }\n            idx -= 1;\n        }\n        stackA.pop();\n        stackB.pop();\n        return true;\n    };\n\n    /**\n     * `_makeFlat` is a helper function that returns a one-level or fully recursive\n     * function based on the flag passed in.\n     *\n     * @private\n     */\n    var _makeFlat = function _makeFlat(recursive) {\n        return function flatt(list) {\n            var value, jlen, j;\n            var result = [];\n            var idx = 0;\n            var ilen = list.length;\n            while (idx < ilen) {\n                if (isArrayLike(list[idx])) {\n                    value = recursive ? flatt(list[idx]) : list[idx];\n                    j = 0;\n                    jlen = value.length;\n                    while (j < jlen) {\n                        result[result.length] = value[j];\n                        j += 1;\n                    }\n                } else {\n                    result[result.length] = list[idx];\n                }\n                idx += 1;\n            }\n            return result;\n        };\n    };\n\n    var _reduce = function () {\n        function _arrayReduce(xf, acc, list) {\n            var idx = 0;\n            var len = list.length;\n            while (idx < len) {\n                acc = xf['@@transducer/step'](acc, list[idx]);\n                if (acc && acc['@@transducer/reduced']) {\n                    acc = acc['@@transducer/value'];\n                    break;\n                }\n                idx += 1;\n            }\n            return xf['@@transducer/result'](acc);\n        }\n        function _iterableReduce(xf, acc, iter) {\n            var step = iter.next();\n            while (!step.done) {\n                acc = xf['@@transducer/step'](acc, step.value);\n                if (acc && acc['@@transducer/reduced']) {\n                    acc = acc['@@transducer/value'];\n                    break;\n                }\n                step = iter.next();\n            }\n            return xf['@@transducer/result'](acc);\n        }\n        function _methodReduce(xf, acc, obj) {\n            return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));\n        }\n        var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';\n        return function _reduce(fn, acc, list) {\n            if (typeof fn === 'function') {\n                fn = _xwrap(fn);\n            }\n            if (isArrayLike(list)) {\n                return _arrayReduce(fn, acc, list);\n            }\n            if (typeof list.reduce === 'function') {\n                return _methodReduce(fn, acc, list);\n            }\n            if (list[symIterator] != null) {\n                return _iterableReduce(fn, acc, list[symIterator]());\n            }\n            if (typeof list.next === 'function') {\n                return _iterableReduce(fn, acc, list);\n            }\n            throw new TypeError('reduce: list must be array or iterable');\n        };\n    }();\n\n    var _stepCat = function () {\n        var _stepCatArray = {\n            '@@transducer/init': Array,\n            '@@transducer/step': function (xs, x) {\n                xs.push(x);\n                return xs;\n            },\n            '@@transducer/result': _identity\n        };\n        var _stepCatString = {\n            '@@transducer/init': String,\n            '@@transducer/step': function (a, b) {\n                return a + b;\n            },\n            '@@transducer/result': _identity\n        };\n        var _stepCatObject = {\n            '@@transducer/init': Object,\n            '@@transducer/step': function (result, input) {\n                return _assign(result, isArrayLike(input) ? objOf(input[0], input[1]) : input);\n            },\n            '@@transducer/result': _identity\n        };\n        return function _stepCat(obj) {\n            if (_isTransformer(obj)) {\n                return obj;\n            }\n            if (isArrayLike(obj)) {\n                return _stepCatArray;\n            }\n            if (typeof obj === 'string') {\n                return _stepCatString;\n            }\n            if (typeof obj === 'object') {\n                return _stepCatObject;\n            }\n            throw new Error('Cannot create transformer for ' + obj);\n        };\n    }();\n\n    var _xdropLastWhile = function () {\n        function XDropLastWhile(fn, xf) {\n            this.f = fn;\n            this.retained = [];\n            this.xf = xf;\n        }\n        XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;\n        XDropLastWhile.prototype['@@transducer/result'] = function (result) {\n            this.retained = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XDropLastWhile.prototype['@@transducer/step'] = function (result, input) {\n            return this.f(input) ? this.retain(result, input) : this.flush(result, input);\n        };\n        XDropLastWhile.prototype.flush = function (result, input) {\n            result = _reduce(this.xf['@@transducer/step'], result, this.retained);\n            this.retained = [];\n            return this.xf['@@transducer/step'](result, input);\n        };\n        XDropLastWhile.prototype.retain = function (result, input) {\n            this.retained.push(input);\n            return result;\n        };\n        return _curry2(function _xdropLastWhile(fn, xf) {\n            return new XDropLastWhile(fn, xf);\n        });\n    }();\n\n    /**\n     * Creates a new list iteration function from an existing one by adding two new\n     * parameters to its callback function: the current index, and the entire list.\n     *\n     * This would turn, for instance, Ramda's simple `map` function into one that\n     * more closely resembles `Array.prototype.map`. Note that this will only work\n     * for functions in which the iteration callback function is the first\n     * parameter, and where the list is the last parameter. (This latter might be\n     * unimportant if the list parameter is not used.)\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Function\n     * @category List\n     * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)\n     * @param {Function} fn A list iteration function that does not pass index or list to its callback\n     * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n     * @example\n     *\n     *      var mapIndexed = R.addIndex(R.map);\n     *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n     *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n     */\n    var addIndex = _curry1(function addIndex(fn) {\n        return curryN(fn.length, function () {\n            var idx = 0;\n            var origFn = arguments[0];\n            var list = arguments[arguments.length - 1];\n            var args = _slice(arguments);\n            args[0] = function () {\n                var result = origFn.apply(this, _concat(arguments, [\n                    idx,\n                    list\n                ]));\n                idx += 1;\n                return result;\n            };\n            return fn.apply(this, args);\n        });\n    });\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts\n     * exactly 2 parameters. Any extraneous parameters will not be passed to the\n     * supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Function\n     * @sig (* -> c) -> (a, b -> c)\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity 2.\n     * @example\n     *\n     *      var takesThreeArgs = function(a, b, c) {\n     *        return [a, b, c];\n     *      };\n     *      takesThreeArgs.length; //=> 3\n     *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n     *\n     *      var takesTwoArgs = R.binary(takesThreeArgs);\n     *      takesTwoArgs.length; //=> 2\n     *      // Only 2 arguments are passed to the wrapped function\n     *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n     */\n    var binary = _curry1(function binary(fn) {\n        return nAry(2, fn);\n    });\n\n    /**\n     * Creates a deep copy of the value which may contain (nested) `Array`s and\n     * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are not\n     * copied, but assigned by their reference.\n     *\n     * Dispatches to a `clone` method if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {*} -> {*}\n     * @param {*} value The object or array to clone\n     * @return {*} A new object or array.\n     * @example\n     *\n     *      var objects = [{}, {}, {}];\n     *      var objectsClone = R.clone(objects);\n     *      objects[0] === objectsClone[0]; //=> false\n     */\n    var clone = _curry1(function clone(value) {\n        return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, [], [], true);\n    });\n\n    /**\n     * Returns a curried equivalent of the provided function. The curried function\n     * has two unusual capabilities. First, its arguments needn't be provided one\n     * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n     * following are equivalent:\n     *\n     *   - `g(1)(2)(3)`\n     *   - `g(1)(2, 3)`\n     *   - `g(1, 2)(3)`\n     *   - `g(1, 2, 3)`\n     *\n     * Secondly, the special placeholder value `R.__` may be used to specify\n     * \"gaps\", allowing partial application of any combination of arguments,\n     * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n     * following are equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (* -> a) -> (* -> a)\n     * @param {Function} fn The function to curry.\n     * @return {Function} A new, curried function.\n     * @see R.curryN\n     * @example\n     *\n     *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n     *\n     *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n     *      var f = curriedAddFourNumbers(1, 2);\n     *      var g = f(3);\n     *      g(4); //=> 10\n     */\n    var curry = _curry1(function curry(fn) {\n        return curryN(fn.length, fn);\n    });\n\n    /**\n     * Returns all but the first `n` elements of the given list, string, or\n     * transducer/transformer (or object with a `drop` method).\n     *\n     * Dispatches to the `drop` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n\n     * @param {*} list\n     * @return {*}\n     * @see R.take, R.transduce\n     * @example\n     *\n     *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n     *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n     *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n     *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n     *      R.drop(3, 'ramda');               //=> 'da'\n     */\n    var drop = _curry2(_dispatchable('drop', _xdrop, function drop(n, xs) {\n        return slice(Math.max(0, n), Infinity, xs);\n    }));\n\n    /**\n     * Returns a list containing all but the last `n` elements of the given `list`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n The number of elements of `xs` to skip.\n     * @param {Array} xs The collection to consider.\n     * @return {Array}\n     * @see R.takeLast\n     * @example\n     *\n     *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n     *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n     *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n     *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n     *      R.dropLast(3, 'ramda');               //=> 'ra'\n     */\n    var dropLast = _curry2(_dispatchable('dropLast', _xdropLast, _dropLast));\n\n    /**\n     * Returns a new list excluding all the tailing elements of a given list which\n     * satisfy the supplied predicate function. It passes each value from the right\n     * to the supplied predicate function, skipping elements while the predicate\n     * function returns `true`. The predicate function is applied to one argument:\n     * *(value)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.takeLastWhile, R.addIndex\n     * @example\n     *\n     *      var lteThree = x => x <= 3;\n     *\n     *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n     */\n    var dropLastWhile = _curry2(_dispatchable('dropLastWhile', _xdropLastWhile, _dropLastWhile));\n\n    /**\n     * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n     * cyclical data structures.\n     *\n     * Dispatches symmetrically to the `equals` methods of both arguments, if\n     * present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Relation\n     * @sig a -> b -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @example\n     *\n     *      R.equals(1, 1); //=> true\n     *      R.equals(1, '1'); //=> false\n     *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n     *\n     *      var a = {}; a.v = a;\n     *      var b = {}; b.v = b;\n     *      R.equals(a, b); //=> true\n     */\n    var equals = _curry2(function equals(a, b) {\n        return _equals(a, b, [], []);\n    });\n\n    /**\n     * Takes a predicate and a \"filterable\", and returns a new filterable of the\n     * same type containing the members of the given filterable which satisfy the\n     * given predicate.\n     *\n     * Dispatches to the `filter` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Filterable f => (a -> Boolean) -> f a -> f a\n     * @param {Function} pred\n     * @param {Array} filterable\n     * @return {Array}\n     * @see R.reject, R.transduce, R.addIndex\n     * @example\n     *\n     *      var isEven = n => n % 2 === 0;\n     *\n     *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n     *\n     *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n     */\n    // else\n    var filter = _curry2(_dispatchable('filter', _xfilter, function (pred, filterable) {\n        return _isObject(filterable) ? _reduce(function (acc, key) {\n            if (pred(filterable[key])) {\n                acc[key] = filterable[key];\n            }\n            return acc;\n        }, {}, keys(filterable)) : // else\n        _filter(pred, filterable);\n    }));\n\n    /**\n     * Returns a new list by pulling every item out of it (and all its sub-arrays)\n     * and putting them in a new array, depth-first.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b]\n     * @param {Array} list The array to consider.\n     * @return {Array} The flattened list.\n     * @see R.unnest\n     * @example\n     *\n     *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n     *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n     */\n    var flatten = _curry1(_makeFlat(true));\n\n    /**\n     * Returns a new function much like the supplied one, except that the first two\n     * arguments' order is reversed.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)\n     * @param {Function} fn The function to invoke with its first two parameters reversed.\n     * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n     * @example\n     *\n     *      var mergeThree = (a, b, c) => [].concat(a, b, c);\n     *\n     *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n     *\n     *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n     */\n    var flip = _curry1(function flip(fn) {\n        return curry(function (a, b) {\n            var args = _slice(arguments);\n            args[0] = b;\n            args[1] = a;\n            return fn.apply(this, args);\n        });\n    });\n\n    /**\n     * Returns the first element of the given list or string. In some libraries\n     * this function is named `first`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> a | Undefined\n     * @sig String -> String\n     * @param {Array|String} list\n     * @return {*}\n     * @see R.tail, R.init, R.last\n     * @example\n     *\n     *      R.head(['fi', 'fo', 'fum']); //=> 'fi'\n     *      R.head([]); //=> undefined\n     *\n     *      R.head('abc'); //=> 'a'\n     *      R.head(''); //=> ''\n     */\n    var head = nth(0);\n\n    /**\n     * Returns all but the last element of the given list or string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @see R.last, R.head, R.tail\n     * @example\n     *\n     *      R.init([1, 2, 3]);  //=> [1, 2]\n     *      R.init([1, 2]);     //=> [1]\n     *      R.init([1]);        //=> []\n     *      R.init([]);         //=> []\n     *\n     *      R.init('abc');  //=> 'ab'\n     *      R.init('ab');   //=> 'a'\n     *      R.init('a');    //=> ''\n     *      R.init('');     //=> ''\n     */\n    var init = slice(0, -1);\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of those\n     * elements common to both lists. Duplication is determined according to the\n     * value returned by applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n     * @param {Function} pred A predicate function that determines whether\n     *        the two supplied elements are equal.\n     * @param {Array} list1 One list of items to compare\n     * @param {Array} list2 A second list of items to compare\n     * @return {Array} A new list containing those elements common to both lists.\n     * @see R.intersection\n     * @example\n     *\n     *      var buffaloSpringfield = [\n     *        {id: 824, name: 'Richie Furay'},\n     *        {id: 956, name: 'Dewey Martin'},\n     *        {id: 313, name: 'Bruce Palmer'},\n     *        {id: 456, name: 'Stephen Stills'},\n     *        {id: 177, name: 'Neil Young'}\n     *      ];\n     *      var csny = [\n     *        {id: 204, name: 'David Crosby'},\n     *        {id: 456, name: 'Stephen Stills'},\n     *        {id: 539, name: 'Graham Nash'},\n     *        {id: 177, name: 'Neil Young'}\n     *      ];\n     *\n     *      R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);\n     *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n     */\n    var intersectionWith = _curry3(function intersectionWith(pred, list1, list2) {\n        var lookupList, filteredList;\n        if (list1.length > list2.length) {\n            lookupList = list1;\n            filteredList = list2;\n        } else {\n            lookupList = list2;\n            filteredList = list1;\n        }\n        var results = [];\n        var idx = 0;\n        while (idx < filteredList.length) {\n            if (_containsWith(pred, filteredList[idx], lookupList)) {\n                results[results.length] = filteredList[idx];\n            }\n            idx += 1;\n        }\n        return uniqWith(pred, results);\n    });\n\n    /**\n     * Transforms the items of the list with the transducer and appends the\n     * transformed items to the accumulator using an appropriate iterator function\n     * based on the accumulator type.\n     *\n     * The accumulator can be an array, string, object or a transformer. Iterated\n     * items will be appended to arrays and concatenated to strings. Objects will\n     * be merged directly or 2-item arrays will be merged as key, value pairs.\n     *\n     * The accumulator can also be a transformer object that provides a 2-arity\n     * reducing iterator function, step, 0-arity initial value function, init, and\n     * 1-arity result extraction function result. The step function is used as the\n     * iterator function in reduce. The result function is used to convert the\n     * final accumulator into the return type and in most cases is R.identity. The\n     * init function is used to provide the initial accumulator.\n     *\n     * The iteration is performed with R.reduce after initializing the transducer.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig a -> (b -> b) -> [c] -> a\n     * @param {*} acc The initial accumulator value.\n     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n     *\n     *      R.into([], transducer, numbers); //=> [2, 3]\n     *\n     *      var intoArray = R.into([]);\n     *      intoArray(transducer, numbers); //=> [2, 3]\n     */\n    var into = _curry3(function into(acc, xf, list) {\n        return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);\n    });\n\n    /**\n     * Same as R.invertObj, however this accounts for objects with duplicate values\n     * by putting the values into an array.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {s: x} -> {x: [ s, ... ]}\n     * @param {Object} obj The object or array to invert\n     * @return {Object} out A new object with keys\n     * in an array.\n     * @example\n     *\n     *      var raceResultsByFirstName = {\n     *        first: 'alice',\n     *        second: 'jake',\n     *        third: 'alice',\n     *      };\n     *      R.invert(raceResultsByFirstName);\n     *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }\n     */\n    var invert = _curry1(function invert(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var idx = 0;\n        var out = {};\n        while (idx < len) {\n            var key = props[idx];\n            var val = obj[key];\n            var list = _has(val, out) ? out[val] : out[val] = [];\n            list[list.length] = key;\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new object with the keys of the given object as values, and the\n     * values of the given object, which are coerced to strings, as keys. Note\n     * that the last key found is preferred when handling the same value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {s: x} -> {x: s}\n     * @param {Object} obj The object or array to invert\n     * @return {Object} out A new object\n     * @example\n     *\n     *      var raceResults = {\n     *        first: 'alice',\n     *        second: 'jake'\n     *      };\n     *      R.invertObj(raceResults);\n     *      //=> { 'alice': 'first', 'jake':'second' }\n     *\n     *      // Alternatively:\n     *      var raceResults = ['alice', 'jake'];\n     *      R.invertObj(raceResults);\n     *      //=> { 'alice': '0', 'jake':'1' }\n     */\n    var invertObj = _curry1(function invertObj(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var idx = 0;\n        var out = {};\n        while (idx < len) {\n            var key = props[idx];\n            out[obj[key]] = key;\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns `true` if the given value is its type's empty value; `false`\n     * otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig a -> Boolean\n     * @param {*} x\n     * @return {Boolean}\n     * @see R.empty\n     * @example\n     *\n     *      R.isEmpty([1, 2, 3]);   //=> false\n     *      R.isEmpty([]);          //=> true\n     *      R.isEmpty('');          //=> true\n     *      R.isEmpty(null);        //=> false\n     *      R.isEmpty({});          //=> true\n     *      R.isEmpty({length: 0}); //=> false\n     */\n    var isEmpty = _curry1(function isEmpty(x) {\n        return x != null && equals(x, empty(x));\n    });\n\n    /**\n     * Returns the last element of the given list or string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @sig [a] -> a | Undefined\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @see R.init, R.head, R.tail\n     * @example\n     *\n     *      R.last(['fi', 'fo', 'fum']); //=> 'fum'\n     *      R.last([]); //=> undefined\n     *\n     *      R.last('abc'); //=> 'c'\n     *      R.last(''); //=> ''\n     */\n    var last = nth(-1);\n\n    /**\n     * Returns the position of the last occurrence of an item in an array, or -1 if\n     * the item is not included in the array. `R.equals` is used to determine\n     * equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Number\n     * @param {*} target The item to find.\n     * @param {Array} xs The array to search in.\n     * @return {Number} the index of the target, or -1 if the target is not found.\n     * @see R.indexOf\n     * @example\n     *\n     *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6\n     *      R.lastIndexOf(10, [1,2,3,4]); //=> -1\n     */\n    var lastIndexOf = _curry2(function lastIndexOf(target, xs) {\n        if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {\n            return xs.lastIndexOf(target);\n        } else {\n            var idx = xs.length - 1;\n            while (idx >= 0) {\n                if (equals(xs[idx], target)) {\n                    return idx;\n                }\n                idx -= 1;\n            }\n            return -1;\n        }\n    });\n\n    /**\n     * Takes a function and\n     * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n     * applies the function to each of the functor's values, and returns\n     * a functor of the same shape.\n     *\n     * Ramda provides suitable `map` implementations for `Array` and `Object`,\n     * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n     *\n     * Dispatches to the `map` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * Also treats functions as functors and will compose them together.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Functor f => (a -> b) -> f a -> f b\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {Array} list The list to be iterated over.\n     * @return {Array} The new list.\n     * @see R.transduce, R.addIndex\n     * @example\n     *\n     *      var double = x => x * 2;\n     *\n     *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n     *\n     *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n     */\n    var map = _curry2(_dispatchable('map', _xmap, function map(fn, functor) {\n        switch (Object.prototype.toString.call(functor)) {\n        case '[object Function]':\n            return curryN(functor.length, function () {\n                return fn.call(this, functor.apply(this, arguments));\n            });\n        case '[object Object]':\n            return _reduce(function (acc, key) {\n                acc[key] = fn(functor[key]);\n                return acc;\n            }, {}, keys(functor));\n        default:\n            return _map(fn, functor);\n        }\n    }));\n\n    /**\n     * An Object-specific version of `map`. The function is applied to three\n     * arguments: *(value, key, obj)*. If only the value is significant, use\n     * `map` instead.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig ((*, String, Object) -> *) -> Object -> Object\n     * @param {Function} fn\n     * @param {Object} obj\n     * @return {Object}\n     * @see R.map\n     * @example\n     *\n     *      var values = { x: 1, y: 2, z: 3 };\n     *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);\n     *\n     *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }\n     */\n    var mapObjIndexed = _curry2(function mapObjIndexed(fn, obj) {\n        return _reduce(function (acc, key) {\n            acc[key] = fn(obj[key], key, obj);\n            return acc;\n        }, {}, keys(obj));\n    });\n\n    /**\n     * Creates a new object with the own properties of the two provided objects. If\n     * a key exists in both objects, the provided function is applied to the values\n     * associated with the key in each object, with the result being used as the\n     * value associated with the key in the returned object. The key will be\n     * excluded from the returned object if the resulting value is `undefined`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Object\n     * @sig (a -> a -> a) -> {a} -> {a} -> {a}\n     * @param {Function} fn\n     * @param {Object} l\n     * @param {Object} r\n     * @return {Object}\n     * @see R.merge, R.mergeWithKey\n     * @example\n     *\n     *      R.mergeWith(R.concat,\n     *                  { a: true, values: [10, 20] },\n     *                  { b: true, values: [15, 35] });\n     *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n     */\n    var mergeWith = _curry3(function mergeWith(fn, l, r) {\n        return mergeWithKey(function (_, _l, _r) {\n            return fn(_l, _r);\n        }, l, r);\n    });\n\n    /**\n     * Takes a function `f` and a list of arguments, and returns a function `g`.\n     * When applied, `g` returns the result of applying `f` to the arguments\n     * provided initially followed by the arguments provided to `g`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n     * @param {Function} f\n     * @param {Array} args\n     * @return {Function}\n     * @see R.partialRight\n     * @example\n     *\n     *      var multiply = (a, b) => a * b;\n     *      var double = R.partial(multiply, [2]);\n     *      double(2); //=> 4\n     *\n     *      var greet = (salutation, title, firstName, lastName) =>\n     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n     *\n     *      var sayHello = R.partial(greet, ['Hello']);\n     *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);\n     *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n     */\n    var partial = _createPartialApplicator(_concat);\n\n    /**\n     * Takes a function `f` and a list of arguments, and returns a function `g`.\n     * When applied, `g` returns the result of applying `f` to the arguments\n     * provided to `g` followed by the arguments provided initially.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n     * @param {Function} f\n     * @param {Array} args\n     * @return {Function}\n     * @see R.partial\n     * @example\n     *\n     *      var greet = (salutation, title, firstName, lastName) =>\n     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n     *\n     *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n     *\n     *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n     */\n    var partialRight = _createPartialApplicator(flip(_concat));\n\n    /**\n     * Determines whether a nested path on an object has a specific value, in\n     * `R.equals` terms. Most likely used to filter a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Relation\n     * @sig [String] -> * -> {String: *} -> Boolean\n     * @param {Array} path The path of the nested property to use\n     * @param {*} val The value to compare the nested property with\n     * @param {Object} obj The object to check the nested property in\n     * @return {Boolean} `true` if the value equals the nested object property,\n     *         `false` otherwise.\n     * @example\n     *\n     *      var user1 = { address: { zipCode: 90210 } };\n     *      var user2 = { address: { zipCode: 55555 } };\n     *      var user3 = { name: 'Bob' };\n     *      var users = [ user1, user2, user3 ];\n     *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);\n     *      R.filter(isFamous, users); //=> [ user1 ]\n     */\n    var pathEq = _curry3(function pathEq(_path, val, obj) {\n        return equals(path(_path, obj), val);\n    });\n\n    /**\n     * Returns a new list by plucking the same named property off all objects in\n     * the list supplied.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig k -> [{k: v}] -> [v]\n     * @param {Number|String} key The key name to pluck off of each object.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of values for the given key.\n     * @see R.props\n     * @example\n     *\n     *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n     *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n     */\n    var pluck = _curry2(function pluck(p, list) {\n        return map(prop(p), list);\n    });\n\n    /**\n     * Reasonable analog to SQL `select` statement.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @category Relation\n     * @sig [k] -> [{k: v}] -> [{k: v}]\n     * @param {Array} props The property names to project\n     * @param {Array} objs The objects to query\n     * @return {Array} An array of objects with just the `props` properties.\n     * @example\n     *\n     *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};\n     *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};\n     *      var kids = [abby, fred];\n     *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]\n     */\n    // passing `identity` gives correct arity\n    var project = useWith(_map, [\n        pickAll,\n        identity\n    ]);\n\n    /**\n     * Returns `true` if the specified object property is equal, in `R.equals`\n     * terms, to the given value; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig String -> a -> Object -> Boolean\n     * @param {String} name\n     * @param {*} val\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.equals, R.propSatisfies\n     * @example\n     *\n     *      var abby = {name: 'Abby', age: 7, hair: 'blond'};\n     *      var fred = {name: 'Fred', age: 12, hair: 'brown'};\n     *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n     *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};\n     *      var kids = [abby, fred, rusty, alois];\n     *      var hasBrownHair = R.propEq('hair', 'brown');\n     *      R.filter(hasBrownHair, kids); //=> [fred, rusty]\n     */\n    var propEq = _curry3(function propEq(name, val, obj) {\n        return equals(val, obj[name]);\n    });\n\n    /**\n     * Returns a single item by iterating through the list, successively calling\n     * the iterator function and passing it an accumulator value and the current\n     * value from the array, and then passing the result to the next call.\n     *\n     * The iterator function receives two values: *(acc, value)*. It may use\n     * `R.reduced` to shortcut the iteration.\n     *\n     * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n     * arrays), unlike the native `Array.prototype.reduce` method. For more details\n     * on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n     *\n     * Dispatches to the `reduce` method of the third argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig ((a, b) -> a) -> a -> [b] -> a\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.reduced, R.addIndex\n     * @example\n     *\n     *      var numbers = [1, 2, 3];\n     *      var plus = (a, b) => a + b;\n     *\n     *      R.reduce(plus, 10, numbers); //=> 16\n     */\n    var reduce = _curry3(_reduce);\n\n    /**\n     * Groups the elements of the list according to the result of calling\n     * the String-returning function `keyFn` on each element and reduces the elements\n     * of each group to a single value via the reducer function `valueFn`.\n     *\n     * This function is basically a more general `groupBy` function.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category List\n     * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}\n     * @param {Function} valueFn The function that reduces the elements of each group to a single\n     *        value. Receives two values, accumulator for a particular group and the current element.\n     * @param {*} acc The (initial) accumulator value for each group.\n     * @param {Function} keyFn The function that maps the list's element into a key.\n     * @param {Array} list The array to group.\n     * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of\n     *         `valueFn` for elements which produced that key when passed to `keyFn`.\n     * @see R.groupBy, R.reduce\n     * @example\n     *\n     *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);\n     *      var namesByGrade = reduceToNamesBy(function(student) {\n     *        var score = student.score;\n     *        return score < 65 ? 'F' :\n     *               score < 70 ? 'D' :\n     *               score < 80 ? 'C' :\n     *               score < 90 ? 'B' : 'A';\n     *      });\n     *      var students = [{name: 'Lucy', score: 92},\n     *                      {name: 'Drew', score: 85},\n     *                      // ...\n     *                      {name: 'Bart', score: 62}];\n     *      namesByGrade(students);\n     *      // {\n     *      //   'A': ['Lucy'],\n     *      //   'B': ['Drew']\n     *      //   // ...,\n     *      //   'F': ['Bart']\n     *      // }\n     */\n    var reduceBy = _curryN(4, [], _dispatchable('reduceBy', _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {\n        return _reduce(function (acc, elt) {\n            var key = keyFn(elt);\n            acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);\n            return acc;\n        }, {}, list);\n    }));\n\n    /**\n     * Like `reduce`, `reduceWhile` returns a single item by iterating through\n     * the list, successively calling the iterator function. `reduceWhile` also\n     * takes a predicate that is evaluated before each step. If the predicate returns\n     * `false`, it \"short-circuits\" the iteration and returns the current value\n     * of the accumulator.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.22.0\n     * @category List\n     * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a\n     * @param {Function} pred The predicate. It is passed the accumulator and the\n     *        current element.\n     * @param {Function} fn The iterator function. Receives two values, the\n     *        accumulator and the current element.\n     * @param {*} a The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.reduce, R.reduced\n     * @example\n     *\n     *      var isOdd = (acc, x) => x % 2 === 1;\n     *      var xs = [1, 3, 5, 60, 777, 800];\n     *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9\n     *\n     *      var ys = [2, 4, 6]\n     *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111\n     */\n    var reduceWhile = _curryN(4, [], function _reduceWhile(pred, fn, a, list) {\n        return _reduce(function (acc, x) {\n            return pred(acc, x) ? fn(acc, x) : _reduced(acc);\n        }, a, list);\n    });\n\n    /**\n     * The complement of `filter`.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Filterable f => (a -> Boolean) -> f a -> f a\n     * @param {Function} pred\n     * @param {Array} filterable\n     * @return {Array}\n     * @see R.filter, R.transduce, R.addIndex\n     * @example\n     *\n     *      var isOdd = (n) => n % 2 === 1;\n     *\n     *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n     *\n     *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n     */\n    var reject = _curry2(function reject(pred, filterable) {\n        return filter(_complement(pred), filterable);\n    });\n\n    /**\n     * Returns a fixed list of size `n` containing a specified identical value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig a -> n -> [a]\n     * @param {*} value The value to repeat.\n     * @param {Number} n The desired size of the output list.\n     * @return {Array} A new array containing `n` `value`s.\n     * @example\n     *\n     *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n     *\n     *      var obj = {};\n     *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]\n     *      repeatedObjs[0] === repeatedObjs[1]; //=> true\n     */\n    var repeat = _curry2(function repeat(value, n) {\n        return times(always(value), n);\n    });\n\n    /**\n     * Adds together all the elements of a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list An array of numbers\n     * @return {Number} The sum of all the numbers in the list.\n     * @see R.reduce\n     * @example\n     *\n     *      R.sum([2,4,6,8,100,1]); //=> 121\n     */\n    var sum = reduce(add, 0);\n\n    /**\n     * Returns a new list containing the last `n` elements of the given list.\n     * If `n > list.length`, returns a list of `list.length` elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n The number of elements to return.\n     * @param {Array} xs The collection to consider.\n     * @return {Array}\n     * @see R.dropLast\n     * @example\n     *\n     *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n     *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n     *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.takeLast(3, 'ramda');               //=> 'mda'\n     */\n    var takeLast = _curry2(function takeLast(n, xs) {\n        return drop(n >= 0 ? xs.length - n : 0, xs);\n    });\n\n    /**\n     * Initializes a transducer using supplied iterator function. Returns a single\n     * item by iterating through the list, successively calling the transformed\n     * iterator function and passing it an accumulator value and the current value\n     * from the array, and then passing the result to the next call.\n     *\n     * The iterator function receives two values: *(acc, value)*. It will be\n     * wrapped as a transformer to initialize the transducer. A transformer can be\n     * passed directly in place of an iterator function. In both cases, iteration\n     * may be stopped early with the `R.reduced` function.\n     *\n     * A transducer is a function that accepts a transformer and returns a\n     * transformer and can be composed directly.\n     *\n     * A transformer is an an object that provides a 2-arity reducing iterator\n     * function, step, 0-arity initial value function, init, and 1-arity result\n     * extraction function, result. The step function is used as the iterator\n     * function in reduce. The result function is used to convert the final\n     * accumulator into the return type and in most cases is R.identity. The init\n     * function can be used to provide an initial accumulator, but is ignored by\n     * transduce.\n     *\n     * The iteration is performed with R.reduce after initializing the transducer.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig (c -> c) -> (a,b -> a) -> a -> [b] -> a\n     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array. Wrapped as transformer, if necessary, and used to\n     *        initialize the transducer\n     * @param {*} acc The initial accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.reduce, R.reduced, R.into\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n     *\n     *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n     */\n    var transduce = curryN(4, function transduce(xf, fn, acc, list) {\n        return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);\n    });\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of the elements\n     * of each list. Duplication is determined according to the value returned by\n     * applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The first and second lists concatenated, with\n     *         duplicates removed.\n     * @see R.union\n     * @example\n     *\n     *      var l1 = [{a: 1}, {a: 2}];\n     *      var l2 = [{a: 1}, {a: 4}];\n     *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n     */\n    var unionWith = _curry3(function unionWith(pred, list1, list2) {\n        return uniqWith(pred, _concat(list1, list2));\n    });\n\n    /**\n     * Takes a spec object and a test object; returns true if the test satisfies\n     * the spec, false otherwise. An object satisfies the spec if, for each of the\n     * spec's own properties, accessing that property of the object gives the same\n     * value (in `R.equals` terms) as accessing that property of the spec.\n     *\n     * `whereEq` is a specialization of [`where`](#where).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @sig {String: *} -> {String: *} -> Boolean\n     * @param {Object} spec\n     * @param {Object} testObj\n     * @return {Boolean}\n     * @see R.where\n     * @example\n     *\n     *      // pred :: Object -> Boolean\n     *      var pred = R.whereEq({a: 1, b: 2});\n     *\n     *      pred({a: 1});              //=> false\n     *      pred({a: 1, b: 2});        //=> true\n     *      pred({a: 1, b: 2, c: 3});  //=> true\n     *      pred({a: 1, b: 1});        //=> false\n     */\n    var whereEq = _curry2(function whereEq(spec, testObj) {\n        return where(map(equals, spec), testObj);\n    });\n\n    var _flatCat = function () {\n        var preservingReduced = function (xf) {\n            return {\n                '@@transducer/init': _xfBase.init,\n                '@@transducer/result': function (result) {\n                    return xf['@@transducer/result'](result);\n                },\n                '@@transducer/step': function (result, input) {\n                    var ret = xf['@@transducer/step'](result, input);\n                    return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;\n                }\n            };\n        };\n        return function _xcat(xf) {\n            var rxf = preservingReduced(xf);\n            return {\n                '@@transducer/init': _xfBase.init,\n                '@@transducer/result': function (result) {\n                    return rxf['@@transducer/result'](result);\n                },\n                '@@transducer/step': function (result, input) {\n                    return !isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);\n                }\n            };\n        };\n    }();\n\n    // Array.prototype.indexOf doesn't exist below IE9\n    // manually crawl the list to distinguish between +0 and -0\n    // NaN\n    // non-zero numbers can utilise Set\n    // all these types can utilise Set\n    // null can utilise Set\n    // anything else not covered above, defer to R.equals\n    var _indexOf = function _indexOf(list, a, idx) {\n        var inf, item;\n        // Array.prototype.indexOf doesn't exist below IE9\n        if (typeof list.indexOf === 'function') {\n            switch (typeof a) {\n            case 'number':\n                if (a === 0) {\n                    // manually crawl the list to distinguish between +0 and -0\n                    inf = 1 / a;\n                    while (idx < list.length) {\n                        item = list[idx];\n                        if (item === 0 && 1 / item === inf) {\n                            return idx;\n                        }\n                        idx += 1;\n                    }\n                    return -1;\n                } else if (a !== a) {\n                    // NaN\n                    while (idx < list.length) {\n                        item = list[idx];\n                        if (typeof item === 'number' && item !== item) {\n                            return idx;\n                        }\n                        idx += 1;\n                    }\n                    return -1;\n                }\n                // non-zero numbers can utilise Set\n                return list.indexOf(a, idx);\n            // all these types can utilise Set\n            case 'string':\n            case 'boolean':\n            case 'function':\n            case 'undefined':\n                return list.indexOf(a, idx);\n            case 'object':\n                if (a === null) {\n                    // null can utilise Set\n                    return list.indexOf(a, idx);\n                }\n            }\n        }\n        // anything else not covered above, defer to R.equals\n        while (idx < list.length) {\n            if (equals(list[idx], a)) {\n                return idx;\n            }\n            idx += 1;\n        }\n        return -1;\n    };\n\n    var _xchain = _curry2(function _xchain(f, xf) {\n        return map(f, _flatCat(xf));\n    });\n\n    /**\n     * Takes a list of predicates and returns a predicate that returns true for a\n     * given list of arguments if every one of the provided predicates is satisfied\n     * by those arguments.\n     *\n     * The function returned is a curried function whose arity matches that of the\n     * highest-arity predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Logic\n     * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n     * @param {Array} preds\n     * @return {Function}\n     * @see R.anyPass\n     * @example\n     *\n     *      var isQueen = R.propEq('rank', 'Q');\n     *      var isSpade = R.propEq('suit', '♠︎');\n     *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);\n     *\n     *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n     *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\n     */\n    var allPass = _curry1(function allPass(preds) {\n        return curryN(reduce(max, 0, pluck('length', preds)), function () {\n            var idx = 0;\n            var len = preds.length;\n            while (idx < len) {\n                if (!preds[idx].apply(this, arguments)) {\n                    return false;\n                }\n                idx += 1;\n            }\n            return true;\n        });\n    });\n\n    /**\n     * Takes a list of predicates and returns a predicate that returns true for a\n     * given list of arguments if at least one of the provided predicates is\n     * satisfied by those arguments.\n     *\n     * The function returned is a curried function whose arity matches that of the\n     * highest-arity predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Logic\n     * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n     * @param {Array} preds\n     * @return {Function}\n     * @see R.allPass\n     * @example\n     *\n     *      var gte = R.anyPass([R.gt, R.equals]);\n     *\n     *      gte(3, 2); //=> true\n     *      gte(2, 2); //=> true\n     *      gte(2, 3); //=> false\n     */\n    var anyPass = _curry1(function anyPass(preds) {\n        return curryN(reduce(max, 0, pluck('length', preds)), function () {\n            var idx = 0;\n            var len = preds.length;\n            while (idx < len) {\n                if (preds[idx].apply(this, arguments)) {\n                    return true;\n                }\n                idx += 1;\n            }\n            return false;\n        });\n    });\n\n    /**\n     * ap applies a list of functions to a list of values.\n     *\n     * Dispatches to the `ap` method of the second argument, if present. Also\n     * treats curried functions as applicatives.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig [a -> b] -> [a] -> [b]\n     * @sig Apply f => f (a -> b) -> f a -> f b\n     * @param {Array} fns An array of functions\n     * @param {Array} vs An array of values\n     * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.\n     * @example\n     *\n     *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n     */\n    // else\n    var ap = _curry2(function ap(applicative, fn) {\n        return typeof applicative.ap === 'function' ? applicative.ap(fn) : typeof applicative === 'function' ? function (x) {\n            return applicative(x)(fn(x));\n        } : // else\n        _reduce(function (acc, f) {\n            return _concat(acc, map(f, fn));\n        }, [], applicative);\n    });\n\n    /**\n     * Given a spec object recursively mapping properties to functions, creates a\n     * function producing an object of the same structure, by mapping each property\n     * to the result of calling its associated function with the supplied arguments.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category Function\n     * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n     * @param {Object} spec an object recursively mapping properties to functions for\n     *        producing the values for these properties.\n     * @return {Function} A function that returns an object of the same structure\n     * as `spec', with each property set to the value returned by calling its\n     * associated function with the supplied arguments.\n     * @see R.converge, R.juxt\n     * @example\n     *\n     *      var getMetrics = R.applySpec({\n     *                                      sum: R.add,\n     *                                      nested: { mul: R.multiply }\n     *                                   });\n     *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n     */\n    var applySpec = _curry1(function applySpec(spec) {\n        spec = map(function (v) {\n            return typeof v == 'function' ? v : applySpec(v);\n        }, spec);\n        return curryN(reduce(max, 0, pluck('length', values(spec))), function () {\n            var args = arguments;\n            return map(function (f) {\n                return apply(f, args);\n            }, spec);\n        });\n    });\n\n    /**\n     * Returns the result of calling its first argument with the remaining\n     * arguments. This is occasionally useful as a converging function for\n     * `R.converge`: the left branch can produce a function while the right branch\n     * produces a value to be passed to that function as an argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig (*... -> a),*... -> a\n     * @param {Function} fn The function to apply to the remaining arguments.\n     * @param {...*} args Any number of positional arguments.\n     * @return {*}\n     * @see R.apply\n     * @example\n     *\n     *      var indentN = R.pipe(R.times(R.always(' ')),\n     *                           R.join(''),\n     *                           R.replace(/^(?!$)/gm));\n     *\n     *      var format = R.converge(R.call, [\n     *                                  R.pipe(R.prop('indent'), indentN),\n     *                                  R.prop('value')\n     *                              ]);\n     *\n     *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n     */\n    var call = curry(function call(fn) {\n        return fn.apply(this, _slice(arguments, 1));\n    });\n\n    /**\n     * `chain` maps a function over a list and concatenates the results. `chain`\n     * is also known as `flatMap` in some libraries\n     *\n     * Dispatches to the `chain` method of the second argument, if present,\n     * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig Chain m => (a -> m b) -> m a -> m b\n     * @param {Function} fn\n     * @param {Array} list\n     * @return {Array}\n     * @example\n     *\n     *      var duplicate = n => [n, n];\n     *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n     */\n    var chain = _curry2(_dispatchable('chain', _xchain, function chain(fn, monad) {\n        if (typeof monad === 'function') {\n            return function () {\n                return monad.call(this, fn.apply(this, arguments)).apply(this, arguments);\n            };\n        }\n        return _makeFlat(false)(map(fn, monad));\n    }));\n\n    /**\n     * Returns a function, `fn`, which encapsulates if/else-if/else logic.\n     * `R.cond` takes a list of [predicate, transform] pairs. All of the arguments\n     * to `fn` are applied to each of the predicates in turn until one returns a\n     * \"truthy\" value, at which point `fn` returns the result of applying its\n     * arguments to the corresponding transformer. If none of the predicates\n     * matches, `fn` returns undefined.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Logic\n     * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n     * @param {Array} pairs\n     * @return {Function}\n     * @example\n     *\n     *      var fn = R.cond([\n     *        [R.equals(0),   R.always('water freezes at 0°C')],\n     *        [R.equals(100), R.always('water boils at 100°C')],\n     *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n     *      ]);\n     *      fn(0); //=> 'water freezes at 0°C'\n     *      fn(50); //=> 'nothing special happens at 50°C'\n     *      fn(100); //=> 'water boils at 100°C'\n     */\n    var cond = _curry1(function cond(pairs) {\n        var arity = reduce(max, 0, map(function (pair) {\n            return pair[0].length;\n        }, pairs));\n        return _arity(arity, function () {\n            var idx = 0;\n            while (idx < pairs.length) {\n                if (pairs[idx][0].apply(this, arguments)) {\n                    return pairs[idx][1].apply(this, arguments);\n                }\n                idx += 1;\n            }\n        });\n    });\n\n    /**\n     * Wraps a constructor function inside a curried function that can be called\n     * with the same arguments and returns the same type. The arity of the function\n     * returned is specified to allow using variadic constructor functions.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Function\n     * @sig Number -> (* -> {*}) -> (* -> {*})\n     * @param {Number} n The arity of the constructor function.\n     * @param {Function} Fn The constructor function to wrap.\n     * @return {Function} A wrapped, curried constructor function.\n     * @example\n     *\n     *      // Variadic constructor function\n     *      var Widget = () => {\n     *        this.children = Array.prototype.slice.call(arguments);\n     *        // ...\n     *      };\n     *      Widget.prototype = {\n     *        // ...\n     *      };\n     *      var allConfigs = [\n     *        // ...\n     *      ];\n     *      R.map(R.constructN(1, Widget), allConfigs); // a list of Widgets\n     */\n    var constructN = _curry2(function constructN(n, Fn) {\n        if (n > 10) {\n            throw new Error('Constructor with greater than ten arguments');\n        }\n        if (n === 0) {\n            return function () {\n                return new Fn();\n            };\n        }\n        return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {\n            switch (arguments.length) {\n            case 1:\n                return new Fn($0);\n            case 2:\n                return new Fn($0, $1);\n            case 3:\n                return new Fn($0, $1, $2);\n            case 4:\n                return new Fn($0, $1, $2, $3);\n            case 5:\n                return new Fn($0, $1, $2, $3, $4);\n            case 6:\n                return new Fn($0, $1, $2, $3, $4, $5);\n            case 7:\n                return new Fn($0, $1, $2, $3, $4, $5, $6);\n            case 8:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7);\n            case 9:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);\n            case 10:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);\n            }\n        }));\n    });\n\n    /**\n     * Accepts a converging function and a list of branching functions and returns\n     * a new function. When invoked, this new function is applied to some\n     * arguments, each branching function is applied to those same arguments. The\n     * results of each branching function are passed as arguments to the converging\n     * function to produce the return value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.2\n     * @category Function\n     * @sig (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)\n     * @param {Function} after A function. `after` will be invoked with the return values of\n     *        `fn1` and `fn2` as its arguments.\n     * @param {Array} functions A list of functions.\n     * @return {Function} A new function.\n     * @example\n     *\n     *      var add = (a, b) => a + b;\n     *      var multiply = (a, b) => a * b;\n     *      var subtract = (a, b) => a - b;\n     *\n     *      //≅ multiply( add(1, 2), subtract(1, 2) );\n     *      R.converge(multiply, [add, subtract])(1, 2); //=> -3\n     *\n     *      var add3 = (a, b, c) => a + b + c;\n     *      R.converge(add3, [multiply, add, subtract])(1, 2); //=> 4\n     */\n    var converge = _curry2(function converge(after, fns) {\n        return curryN(reduce(max, 0, pluck('length', fns)), function () {\n            var args = arguments;\n            var context = this;\n            return after.apply(context, _map(function (fn) {\n                return fn.apply(context, args);\n            }, fns));\n        });\n    });\n\n    /**\n     * Counts the elements of a list according to how many match each value of a\n     * key generated by the supplied function. Returns an object mapping the keys\n     * produced by `fn` to the number of occurrences in the list. Note that all\n     * keys are coerced to strings because of how JavaScript objects work.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> String) -> [a] -> {*}\n     * @param {Function} fn The function used to map values to keys.\n     * @param {Array} list The list to count elements from.\n     * @return {Object} An object mapping keys to number of occurrences in the list.\n     * @example\n     *\n     *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n     *      var letters = R.split('', 'abcABCaaaBBc');\n     *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n     *      R.countBy(R.toLower)(letters);   //=> {'a': 5, 'b': 4, 'c': 3}\n     */\n    var countBy = reduceBy(function (acc, elem) {\n        return acc + 1;\n    }, 0);\n\n    /**\n     * Returns a new list without any consecutively repeating elements. Equality is\n     * determined by applying the supplied predicate two consecutive elements. The\n     * first element in a series of equal element is the one being preserved.\n     *\n     * Dispatches to the `dropRepeatsWith` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig (a, a -> Boolean) -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list The array to consider.\n     * @return {Array} `list` without repeating elements.\n     * @see R.transduce\n     * @example\n     *\n     *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n     *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n     */\n    var dropRepeatsWith = _curry2(_dispatchable('dropRepeatsWith', _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n        var result = [];\n        var idx = 1;\n        var len = list.length;\n        if (len !== 0) {\n            result[0] = list[0];\n            while (idx < len) {\n                if (!pred(last(result), list[idx])) {\n                    result[result.length] = list[idx];\n                }\n                idx += 1;\n            }\n        }\n        return result;\n    }));\n\n    /**\n     * Takes a function and two values in its domain and returns `true` if the\n     * values map to the same value in the codomain; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Relation\n     * @sig (a -> b) -> a -> a -> Boolean\n     * @param {Function} f\n     * @param {*} x\n     * @param {*} y\n     * @return {Boolean}\n     * @example\n     *\n     *      R.eqBy(Math.abs, 5, -5); //=> true\n     */\n    var eqBy = _curry3(function eqBy(f, x, y) {\n        return equals(f(x), f(y));\n    });\n\n    /**\n     * Reports whether two objects have the same value, in `R.equals` terms, for\n     * the specified property. Useful as a curried predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig k -> {k: v} -> {k: v} -> Boolean\n     * @param {String} prop The name of the property to compare\n     * @param {Object} obj1\n     * @param {Object} obj2\n     * @return {Boolean}\n     *\n     * @example\n     *\n     *      var o1 = { a: 1, b: 2, c: 3, d: 4 };\n     *      var o2 = { a: 10, b: 20, c: 3, d: 40 };\n     *      R.eqProps('a', o1, o2); //=> false\n     *      R.eqProps('c', o1, o2); //=> true\n     */\n    var eqProps = _curry3(function eqProps(prop, obj1, obj2) {\n        return equals(obj1[prop], obj2[prop]);\n    });\n\n    /**\n     * Splits a list into sub-lists stored in an object, based on the result of\n     * calling a String-returning function on each element, and grouping the\n     * results according to values returned.\n     *\n     * Dispatches to the `groupBy` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> String) -> [a] -> {String: [a]}\n     * @param {Function} fn Function :: a -> String\n     * @param {Array} list The array to group\n     * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements\n     *         that produced that key when passed to `fn`.\n     * @see R.transduce\n     * @example\n     *\n     *      var byGrade = R.groupBy(function(student) {\n     *        var score = student.score;\n     *        return score < 65 ? 'F' :\n     *               score < 70 ? 'D' :\n     *               score < 80 ? 'C' :\n     *               score < 90 ? 'B' : 'A';\n     *      });\n     *      var students = [{name: 'Abby', score: 84},\n     *                      {name: 'Eddy', score: 58},\n     *                      // ...\n     *                      {name: 'Jack', score: 69}];\n     *      byGrade(students);\n     *      // {\n     *      //   'A': [{name: 'Dianne', score: 99}],\n     *      //   'B': [{name: 'Abby', score: 84}]\n     *      //   // ...,\n     *      //   'F': [{name: 'Eddy', score: 58}]\n     *      // }\n     */\n    var groupBy = _curry2(_checkForMethod('groupBy', reduceBy(function (acc, item) {\n        if (acc == null) {\n            acc = [];\n        }\n        acc.push(item);\n        return acc;\n    }, null)));\n\n    /**\n     * Given a function that generates a key, turns a list of objects into an\n     * object indexing the objects by the given key. Note that if multiple\n     * objects generate the same value for the indexing key only the last value\n     * will be included in the generated object.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}\n     * @param {Function} fn Function :: a -> String\n     * @param {Array} array The array of objects to index\n     * @return {Object} An object indexing each array element by the given property.\n     * @example\n     *\n     *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];\n     *      R.indexBy(R.prop('id'), list);\n     *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}\n     */\n    var indexBy = reduceBy(function (acc, elem) {\n        return elem;\n    }, null);\n\n    /**\n     * Returns the position of the first occurrence of an item in an array, or -1\n     * if the item is not included in the array. `R.equals` is used to determine\n     * equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Number\n     * @param {*} target The item to find.\n     * @param {Array} xs The array to search in.\n     * @return {Number} the index of the target, or -1 if the target is not found.\n     * @see R.lastIndexOf\n     * @example\n     *\n     *      R.indexOf(3, [1,2,3,4]); //=> 2\n     *      R.indexOf(10, [1,2,3,4]); //=> -1\n     */\n    var indexOf = _curry2(function indexOf(target, xs) {\n        return typeof xs.indexOf === 'function' && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);\n    });\n\n    /**\n     * juxt applies a list of functions to a list of values.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Function\n     * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n     * @param {Array} fns An array of functions\n     * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n     * @see R.applySpec\n     * @example\n     *\n     *      var getRange = R.juxt([Math.min, Math.max]);\n     *      getRange(3, 4, 9, -3); //=> [-3, 9]\n     */\n    var juxt = _curry1(function juxt(fns) {\n        return converge(_arrayOf, fns);\n    });\n\n    /**\n     * Returns a lens for the given getter and setter functions. The getter \"gets\"\n     * the value of the focus; the setter \"sets\" the value of the focus. The setter\n     * should not mutate the data structure.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n     * @param {Function} getter\n     * @param {Function} setter\n     * @return {Lens}\n     * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lens(R.prop('x'), R.assoc('x'));\n     *\n     *      R.view(xLens, {x: 1, y: 2});            //=> 1\n     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n     */\n    var lens = _curry2(function lens(getter, setter) {\n        return function (toFunctorFn) {\n            return function (target) {\n                return map(function (focus) {\n                    return setter(focus, target);\n                }, toFunctorFn(getter(target)));\n            };\n        };\n    });\n\n    /**\n     * Returns a lens whose focus is the specified index.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Number -> Lens s a\n     * @param {Number} n\n     * @return {Lens}\n     * @see R.view, R.set, R.over\n     * @example\n     *\n     *      var headLens = R.lensIndex(0);\n     *\n     *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'\n     *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']\n     *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']\n     */\n    var lensIndex = _curry1(function lensIndex(n) {\n        return lens(nth(n), update(n));\n    });\n\n    /**\n     * Returns a lens whose focus is the specified path.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig [String] -> Lens s a\n     * @param {Array} path The path to use.\n     * @return {Lens}\n     * @see R.view, R.set, R.over\n     * @example\n     *\n     *      var xyLens = R.lensPath(['x', 'y']);\n     *\n     *      R.view(xyLens, {x: {y: 2, z: 3}});            //=> 2\n     *      R.set(xyLens, 4, {x: {y: 2, z: 3}});          //=> {x: {y: 4, z: 3}}\n     *      R.over(xyLens, R.negate, {x: {y: 2, z: 3}});  //=> {x: {y: -2, z: 3}}\n     */\n    var lensPath = _curry1(function lensPath(p) {\n        return lens(path(p), assocPath(p));\n    });\n\n    /**\n     * Returns a lens whose focus is the specified property.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig String -> Lens s a\n     * @param {String} k\n     * @return {Lens}\n     * @see R.view, R.set, R.over\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.view(xLens, {x: 1, y: 2});            //=> 1\n     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n     */\n    var lensProp = _curry1(function lensProp(k) {\n        return lens(prop(k), assoc(k));\n    });\n\n    /**\n     * \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n     * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Function\n     * @sig Number -> (*... -> *) -> ([*]... -> [*])\n     * @param {Function} fn The function to lift into higher context\n     * @return {Function} The lifted function.\n     * @see R.lift, R.ap\n     * @example\n     *\n     *      var madd3 = R.liftN(3, R.curryN(3, (...args) => R.sum(args)));\n     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n     */\n    var liftN = _curry2(function liftN(arity, fn) {\n        var lifted = curryN(arity, fn);\n        return curryN(arity, function () {\n            return _reduce(ap, map(lifted, arguments[0]), _slice(arguments, 1));\n        });\n    });\n\n    /**\n     * Returns the mean of the given list of numbers.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list\n     * @return {Number}\n     * @example\n     *\n     *      R.mean([2, 7, 9]); //=> 6\n     *      R.mean([]); //=> NaN\n     */\n    var mean = _curry1(function mean(list) {\n        return sum(list) / list.length;\n    });\n\n    /**\n     * Returns the median of the given list of numbers.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list\n     * @return {Number}\n     * @example\n     *\n     *      R.median([2, 9, 7]); //=> 7\n     *      R.median([7, 2, 10, 9]); //=> 8\n     *      R.median([]); //=> NaN\n     */\n    var median = _curry1(function median(list) {\n        var len = list.length;\n        if (len === 0) {\n            return NaN;\n        }\n        var width = 2 - len % 2;\n        var idx = (len - width) / 2;\n        return mean(_slice(list).sort(function (a, b) {\n            return a < b ? -1 : a > b ? 1 : 0;\n        }).slice(idx, idx + width));\n    });\n\n    /**\n     * Takes a predicate and a list or other \"filterable\" object and returns the\n     * pair of filterable objects of the same type of elements which do and do not\n     * satisfy, the predicate, respectively.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\n     * @param {Function} pred A predicate to determine which side the element belongs to.\n     * @param {Array} filterable the list (or other filterable) to partition.\n     * @return {Array} An array, containing first the subset of elements that satisfy the\n     *         predicate, and second the subset of elements that do not satisfy.\n     * @see R.filter, R.reject\n     * @example\n     *\n     *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);\n     *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n     *\n     *      R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\n     *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\n     */\n    var partition = juxt([\n        filter,\n        reject\n    ]);\n\n    /**\n     * Performs left-to-right function composition. The leftmost function may have\n     * any arity; the remaining functions must be unary.\n     *\n     * In some libraries this function is named `sequence`.\n     *\n     * **Note:** The result of pipe is not automatically curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.compose\n     * @example\n     *\n     *      var f = R.pipe(Math.pow, R.negate, R.inc);\n     *\n     *      f(3, 4); // -(3^4) + 1\n     */\n    var pipe = function pipe() {\n        if (arguments.length === 0) {\n            throw new Error('pipe requires at least one argument');\n        }\n        return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));\n    };\n\n    /**\n     * Performs left-to-right composition of one or more Promise-returning\n     * functions. The leftmost function may have any arity; the remaining functions\n     * must be unary.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.composeP\n     * @example\n     *\n     *      //  followersForUser :: String -> Promise [User]\n     *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);\n     */\n    var pipeP = function pipeP() {\n        if (arguments.length === 0) {\n            throw new Error('pipeP requires at least one argument');\n        }\n        return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));\n    };\n\n    /**\n     * Multiplies together all the elements of a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list An array of numbers\n     * @return {Number} The product of all the numbers in the list.\n     * @see R.reduce\n     * @example\n     *\n     *      R.product([2,4,6,8,100,1]); //=> 38400\n     */\n    var product = reduce(multiply, 1);\n\n    /**\n     * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\n     * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\n     * Applicative of Traversable.\n     *\n     * Dispatches to the `sequence` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\n     * @param {Function} of\n     * @param {*} traversable\n     * @return {*}\n     * @see R.traverse\n     * @example\n     *\n     *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n     *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n     *\n     *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\n     *      R.sequence(R.of, Nothing());       //=> [Nothing()]\n     */\n    var sequence = _curry2(function sequence(of, traversable) {\n        return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (acc, x) {\n            return ap(map(prepend, x), acc);\n        }, of([]), traversable);\n    });\n\n    /**\n     * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n     * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n     * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\n     * into an Applicative of Traversable.\n     *\n     * Dispatches to the `sequence` method of the third argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)\n     * @param {Function} of\n     * @param {Function} f\n     * @param {*} traversable\n     * @return {*}\n     * @see R.sequence\n     * @example\n     *\n     *      // Returns `Nothing` if the given divisor is `0`\n     *      safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)\n     *\n     *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])\n     *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing\n     */\n    var traverse = _curry3(function traverse(of, f, traversable) {\n        return sequence(of, map(f, traversable));\n    });\n\n    /**\n     * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from\n     * any [Chain](https://github.com/fantasyland/fantasy-land#chain).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig Chain c => c (c a) -> c a\n     * @param {*} list\n     * @return {*}\n     * @see R.flatten, R.chain\n     * @example\n     *\n     *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]\n     *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]\n     */\n    var unnest = chain(_identity);\n\n    var _contains = function _contains(a, list) {\n        return _indexOf(list, a, 0) >= 0;\n    };\n\n    //  mapPairs :: (Object, [String]) -> [String]\n    var _toString = function _toString(x, seen) {\n        var recur = function recur(y) {\n            var xs = seen.concat([x]);\n            return _contains(y, xs) ? '<Circular>' : _toString(y, xs);\n        };\n        //  mapPairs :: (Object, [String]) -> [String]\n        var mapPairs = function (obj, keys) {\n            return _map(function (k) {\n                return _quote(k) + ': ' + recur(obj[k]);\n            }, keys.slice().sort());\n        };\n        switch (Object.prototype.toString.call(x)) {\n        case '[object Arguments]':\n            return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n        case '[object Array]':\n            return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {\n                return /^\\d+$/.test(k);\n            }, keys(x)))).join(', ') + ']';\n        case '[object Boolean]':\n            return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n        case '[object Date]':\n            return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n        case '[object Null]':\n            return 'null';\n        case '[object Number]':\n            return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n        case '[object String]':\n            return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n        case '[object Undefined]':\n            return 'undefined';\n        default:\n            if (typeof x.toString === 'function') {\n                var repr = x.toString();\n                if (repr !== '[object Object]') {\n                    return repr;\n                }\n            }\n            return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n        }\n    };\n\n    /**\n     * Performs right-to-left function composition. The rightmost function may have\n     * any arity; the remaining functions must be unary.\n     *\n     * **Note:** The result of compose is not automatically curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.pipe\n     * @example\n     *\n     *      var f = R.compose(R.inc, R.negate, Math.pow);\n     *\n     *      f(3, 4); // -(3^4) + 1\n     */\n    var compose = function compose() {\n        if (arguments.length === 0) {\n            throw new Error('compose requires at least one argument');\n        }\n        return pipe.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Returns the right-to-left Kleisli composition of the provided functions,\n     * each of which must return a value of a type supported by [`chain`](#chain).\n     *\n     * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Function\n     * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (m a -> m z)\n     * @param {...Function}\n     * @return {Function}\n     * @see R.pipeK\n     * @example\n     *\n     *      //  parseJson :: String -> Maybe *\n     *      //  get :: String -> Object -> Maybe *\n     *\n     *      //  getStateCode :: Maybe String -> Maybe String\n     *      var getStateCode = R.composeK(\n     *        R.compose(Maybe.of, R.toUpper),\n     *        get('state'),\n     *        get('address'),\n     *        get('user'),\n     *        parseJson\n     *      );\n     *\n     *      getStateCode(Maybe.of('{\"user\":{\"address\":{\"state\":\"ny\"}}}'));\n     *      //=> Just('NY')\n     *      getStateCode(Maybe.of('[Invalid JSON]'));\n     *      //=> Nothing()\n     */\n    var composeK = function composeK() {\n        return compose.apply(this, prepend(identity, map(chain, arguments)));\n    };\n\n    /**\n     * Performs right-to-left composition of one or more Promise-returning\n     * functions. The rightmost function may have any arity; the remaining\n     * functions must be unary.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.pipeP\n     * @example\n     *\n     *      //  followersForUser :: String -> Promise [User]\n     *      var followersForUser = R.composeP(db.getFollowers, db.getUserById);\n     */\n    var composeP = function composeP() {\n        if (arguments.length === 0) {\n            throw new Error('composeP requires at least one argument');\n        }\n        return pipeP.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Wraps a constructor function inside a curried function that can be called\n     * with the same arguments and returns the same type.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (* -> {*}) -> (* -> {*})\n     * @param {Function} Fn The constructor function to wrap.\n     * @return {Function} A wrapped, curried constructor function.\n     * @example\n     *\n     *      // Constructor function\n     *      var Widget = config => {\n     *        // ...\n     *      };\n     *      Widget.prototype = {\n     *        // ...\n     *      };\n     *      var allConfigs = [\n     *        // ...\n     *      ];\n     *      R.map(R.construct(Widget), allConfigs); // a list of Widgets\n     */\n    var construct = _curry1(function construct(Fn) {\n        return constructN(Fn.length, Fn);\n    });\n\n    /**\n     * Returns `true` if the specified value is equal, in `R.equals` terms, to at\n     * least one element of the given list; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Boolean\n     * @param {Object} a The item to compare against.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the item is in the list, `false` otherwise.\n     * @see R.any\n     * @example\n     *\n     *      R.contains(3, [1, 2, 3]); //=> true\n     *      R.contains(4, [1, 2, 3]); //=> false\n     *      R.contains([42], [[42]]); //=> true\n     */\n    var contains = _curry2(_contains);\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements in the first list not\n     * contained in the second list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` that are not in `list2`.\n     * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith\n     * @example\n     *\n     *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n     *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n     */\n    var difference = _curry2(function difference(first, second) {\n        var out = [];\n        var idx = 0;\n        var firstLen = first.length;\n        while (idx < firstLen) {\n            if (!_contains(first[idx], second) && !_contains(first[idx], out)) {\n                out[out.length] = first[idx];\n            }\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new list without any consecutively repeating elements. `R.equals`\n     * is used to determine equality.\n     *\n     * Dispatches to the `dropRepeats` method of the first argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig [a] -> [a]\n     * @param {Array} list The array to consider.\n     * @return {Array} `list` without repeating elements.\n     * @see R.transduce\n     * @example\n     *\n     *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n     */\n    var dropRepeats = _curry1(_dispatchable('dropRepeats', _xdropRepeatsWith(equals), dropRepeatsWith(equals)));\n\n    /**\n     * \"lifts\" a function of arity > 1 so that it may \"map over\" a list, Function or other\n     * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Function\n     * @sig (*... -> *) -> ([*]... -> [*])\n     * @param {Function} fn The function to lift into higher context\n     * @return {Function} The lifted function.\n     * @see R.liftN\n     * @example\n     *\n     *      var madd3 = R.lift(R.curry((a, b, c) => a + b + c));\n     *\n     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n     *\n     *      var madd5 = R.lift(R.curry((a, b, c, d, e) => a + b + c + d + e));\n     *\n     *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]\n     */\n    var lift = _curry1(function lift(fn) {\n        return liftN(fn.length, fn);\n    });\n\n    /**\n     * Returns a partial copy of an object omitting the keys specified.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [String] -> {String: *} -> {String: *}\n     * @param {Array} names an array of String property names to omit from the new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with properties from `names` not on it.\n     * @see R.pick\n     * @example\n     *\n     *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n     */\n    var omit = _curry2(function omit(names, obj) {\n        var result = {};\n        for (var prop in obj) {\n            if (!_contains(prop, names)) {\n                result[prop] = obj[prop];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Returns the left-to-right Kleisli composition of the provided functions,\n     * each of which must return a value of a type supported by [`chain`](#chain).\n     *\n     * `R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Function\n     * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (m a -> m z)\n     * @param {...Function}\n     * @return {Function}\n     * @see R.composeK\n     * @example\n     *\n     *      //  parseJson :: String -> Maybe *\n     *      //  get :: String -> Object -> Maybe *\n     *\n     *      //  getStateCode :: Maybe String -> Maybe String\n     *      var getStateCode = R.pipeK(\n     *        parseJson,\n     *        get('user'),\n     *        get('address'),\n     *        get('state'),\n     *        R.compose(Maybe.of, R.toUpper)\n     *      );\n     *\n     *      getStateCode(Maybe.of('{\"user\":{\"address\":{\"state\":\"ny\"}}}'));\n     *      //=> Just('NY')\n     *      getStateCode(Maybe.of('[Invalid JSON]'));\n     *      //=> Nothing()\n     */\n    var pipeK = function pipeK() {\n        return composeK.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Returns the string representation of the given value. `eval`'ing the output\n     * should result in a value equivalent to the input value. Many of the built-in\n     * `toString` methods do not satisfy this requirement.\n     *\n     * If the given value is an `[object Object]` with a `toString` method other\n     * than `Object.prototype.toString`, this method is invoked with no arguments\n     * to produce the return value. This means user-defined constructor functions\n     * can provide a suitable `toString` method. For example:\n     *\n     *     function Point(x, y) {\n     *       this.x = x;\n     *       this.y = y;\n     *     }\n     *\n     *     Point.prototype.toString = function() {\n     *       return 'new Point(' + this.x + ', ' + this.y + ')';\n     *     };\n     *\n     *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category String\n     * @sig * -> String\n     * @param {*} val\n     * @return {String}\n     * @example\n     *\n     *      R.toString(42); //=> '42'\n     *      R.toString('abc'); //=> '\"abc\"'\n     *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n     *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n     *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n     */\n    var toString = _curry1(function toString(val) {\n        return _toString(val, []);\n    });\n\n    /**\n     * Returns a new list without values in the first argument.\n     * `R.equals` is used to determine equality.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig [a] -> [a] -> [a]\n     * @param {Array} list1 The values to be removed from `list2`.\n     * @param {Array} list2 The array to remove values from.\n     * @return {Array} The new array without values in `list1`.\n     * @see R.transduce\n     * @example\n     *\n     *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n     */\n    var without = _curry2(function (xs, list) {\n        return reject(flip(_contains)(xs), list);\n    });\n\n    // A simple Set type that honours R.equals semantics\n    /* globals Set */\n    // until we figure out why jsdoc chokes on this\n    // @param item The item to add to the Set\n    // @returns {boolean} true if the item did not exist prior, otherwise false\n    //\n    //\n    // @param item The item to check for existence in the Set\n    // @returns {boolean} true if the item exists in the Set, otherwise false\n    //\n    //\n    // Combines the logic for checking whether an item is a member of the set and\n    // for adding a new item to the set.\n    //\n    // @param item       The item to check or add to the Set instance.\n    // @param shouldAdd  If true, the item will be added to the set if it doesn't\n    //                   already exist.\n    // @param set        The set instance to check or add to.\n    // @return {boolean} true if the item already existed, otherwise false.\n    //\n    // distinguish between +0 and -0\n    // these types can all utilise the native Set\n    // set._items['boolean'] holds a two element array\n    // representing [ falseExists, trueExists ]\n    // compare functions for reference equality\n    /* falls through */\n    // reduce the search size of heterogeneous sets by creating buckets\n    // for each type.\n    // scan through all previously applied items\n    var _Set = function () {\n        function _Set() {\n            /* globals Set */\n            this._nativeSet = typeof Set === 'function' ? new Set() : null;\n            this._items = {};\n        }\n        // until we figure out why jsdoc chokes on this\n        // @param item The item to add to the Set\n        // @returns {boolean} true if the item did not exist prior, otherwise false\n        //\n        _Set.prototype.add = function (item) {\n            return !hasOrAdd(item, true, this);\n        };\n        //\n        // @param item The item to check for existence in the Set\n        // @returns {boolean} true if the item exists in the Set, otherwise false\n        //\n        _Set.prototype.has = function (item) {\n            return hasOrAdd(item, false, this);\n        };\n        //\n        // Combines the logic for checking whether an item is a member of the set and\n        // for adding a new item to the set.\n        //\n        // @param item       The item to check or add to the Set instance.\n        // @param shouldAdd  If true, the item will be added to the set if it doesn't\n        //                   already exist.\n        // @param set        The set instance to check or add to.\n        // @return {boolean} true if the item already existed, otherwise false.\n        //\n        function hasOrAdd(item, shouldAdd, set) {\n            var type = typeof item;\n            var prevSize, newSize;\n            switch (type) {\n            case 'string':\n            case 'number':\n                // distinguish between +0 and -0\n                if (item === 0 && 1 / item === -Infinity) {\n                    if (set._items['-0']) {\n                        return true;\n                    } else {\n                        if (shouldAdd) {\n                            set._items['-0'] = true;\n                        }\n                        return false;\n                    }\n                }\n                // these types can all utilise the native Set\n                if (set._nativeSet !== null) {\n                    if (shouldAdd) {\n                        prevSize = set._nativeSet.size;\n                        set._nativeSet.add(item);\n                        newSize = set._nativeSet.size;\n                        return newSize === prevSize;\n                    } else {\n                        return set._nativeSet.has(item);\n                    }\n                } else {\n                    if (!(type in set._items)) {\n                        if (shouldAdd) {\n                            set._items[type] = {};\n                            set._items[type][item] = true;\n                        }\n                        return false;\n                    } else if (item in set._items[type]) {\n                        return true;\n                    } else {\n                        if (shouldAdd) {\n                            set._items[type][item] = true;\n                        }\n                        return false;\n                    }\n                }\n            case 'boolean':\n                // set._items['boolean'] holds a two element array\n                // representing [ falseExists, trueExists ]\n                if (type in set._items) {\n                    var bIdx = item ? 1 : 0;\n                    if (set._items[type][bIdx]) {\n                        return true;\n                    } else {\n                        if (shouldAdd) {\n                            set._items[type][bIdx] = true;\n                        }\n                        return false;\n                    }\n                } else {\n                    if (shouldAdd) {\n                        set._items[type] = item ? [\n                            false,\n                            true\n                        ] : [\n                            true,\n                            false\n                        ];\n                    }\n                    return false;\n                }\n            case 'function':\n                // compare functions for reference equality\n                if (set._nativeSet !== null) {\n                    if (shouldAdd) {\n                        prevSize = set._nativeSet.size;\n                        set._nativeSet.add(item);\n                        newSize = set._nativeSet.size;\n                        return newSize > prevSize;\n                    } else {\n                        return set._nativeSet.has(item);\n                    }\n                } else {\n                    if (!(type in set._items)) {\n                        if (shouldAdd) {\n                            set._items[type] = [item];\n                        }\n                        return false;\n                    }\n                    if (!_contains(item, set._items[type])) {\n                        if (shouldAdd) {\n                            set._items[type].push(item);\n                        }\n                        return false;\n                    }\n                    return true;\n                }\n            case 'undefined':\n                if (set._items[type]) {\n                    return true;\n                } else {\n                    if (shouldAdd) {\n                        set._items[type] = true;\n                    }\n                    return false;\n                }\n            case 'object':\n                if (item === null) {\n                    if (!set._items['null']) {\n                        if (shouldAdd) {\n                            set._items['null'] = true;\n                        }\n                        return false;\n                    }\n                    return true;\n                }\n            /* falls through */\n            default:\n                // reduce the search size of heterogeneous sets by creating buckets\n                // for each type.\n                type = Object.prototype.toString.call(item);\n                if (!(type in set._items)) {\n                    if (shouldAdd) {\n                        set._items[type] = [item];\n                    }\n                    return false;\n                }\n                // scan through all previously applied items\n                if (!_contains(item, set._items[type])) {\n                    if (shouldAdd) {\n                        set._items[type].push(item);\n                    }\n                    return false;\n                }\n                return true;\n            }\n        }\n        return _Set;\n    }();\n\n    /**\n     * A function wrapping calls to the two functions in an `&&` operation,\n     * returning the result of the first function if it is false-y and the result\n     * of the second function otherwise. Note that this is short-circuited,\n     * meaning that the second function will not be invoked if the first returns a\n     * false-y value.\n     *\n     * In addition to functions, `R.both` also accepts any fantasy-land compatible\n     * applicative functor.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n     * @param {Function} f a predicate\n     * @param {Function} g another predicate\n     * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n     * @see R.and\n     * @example\n     *\n     *      var gt10 = x => x > 10;\n     *      var even = x => x % 2 === 0;\n     *      var f = R.both(gt10, even);\n     *      f(100); //=> true\n     *      f(101); //=> false\n     */\n    var both = _curry2(function both(f, g) {\n        return _isFunction(f) ? function _both() {\n            return f.apply(this, arguments) && g.apply(this, arguments);\n        } : lift(and)(f, g);\n    });\n\n    /**\n     * Takes a function `f` and returns a function `g` such that:\n     *\n     *   - applying `g` to zero or more arguments will give __true__ if applying\n     *     the same arguments to `f` gives a logical __false__ value; and\n     *\n     *   - applying `g` to zero or more arguments will give __false__ if applying\n     *     the same arguments to `f` gives a logical __true__ value.\n     *\n     * `R.complement` will work on all other functors as well.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> *) -> (*... -> Boolean)\n     * @param {Function} f\n     * @return {Function}\n     * @see R.not\n     * @example\n     *\n     *      var isEven = n => n % 2 === 0;\n     *      var isOdd = R.complement(isEven);\n     *      isOdd(21); //=> true\n     *      isOdd(42); //=> false\n     */\n    var complement = lift(not);\n\n    /**\n     * Returns the result of concatenating the given lists or strings.\n     *\n     * Note: `R.concat` expects both arguments to be of the same type,\n     * unlike the native `Array.prototype.concat` method. It will throw\n     * an error if you `concat` an Array with a non-Array value.\n     *\n     * Dispatches to the `concat` method of the first argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a] -> [a]\n     * @sig String -> String -> String\n     * @param {Array|String} a\n     * @param {Array|String} b\n     * @return {Array|String}\n     *\n     * @example\n     *\n     *      R.concat([], []); //=> []\n     *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n     *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n     */\n    var concat = _curry2(function concat(a, b) {\n        if (a == null || !_isFunction(a.concat)) {\n            throw new TypeError(toString(a) + ' does not have a method named \"concat\"');\n        }\n        if (_isArray(a) && !_isArray(b)) {\n            throw new TypeError(toString(b) + ' is not an array');\n        }\n        return a.concat(b);\n    });\n\n    /**\n     * A function wrapping calls to the two functions in an `||` operation,\n     * returning the result of the first function if it is truth-y and the result\n     * of the second function otherwise. Note that this is short-circuited,\n     * meaning that the second function will not be invoked if the first returns a\n     * truth-y value.\n     *\n     * In addition to functions, `R.either` also accepts any fantasy-land compatible\n     * applicative functor.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n     * @param {Function} f a predicate\n     * @param {Function} g another predicate\n     * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n     * @see R.or\n     * @example\n     *\n     *      var gt10 = x => x > 10;\n     *      var even = x => x % 2 === 0;\n     *      var f = R.either(gt10, even);\n     *      f(101); //=> true\n     *      f(8); //=> true\n     */\n    var either = _curry2(function either(f, g) {\n        return _isFunction(f) ? function _either() {\n            return f.apply(this, arguments) || g.apply(this, arguments);\n        } : lift(or)(f, g);\n    });\n\n    /**\n     * Turns a named method with a specified arity into a function that can be\n     * called directly supplied with arguments and a target object.\n     *\n     * The returned function is curried and accepts `arity + 1` parameters where\n     * the final parameter is the target object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n     * @param {Number} arity Number of arguments the returned function should take\n     *        before the target object.\n     * @param {String} method Name of the method to call.\n     * @return {Function} A new curried function.\n     * @example\n     *\n     *      var sliceFrom = R.invoker(1, 'slice');\n     *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n     *      var sliceFrom6 = R.invoker(2, 'slice')(6);\n     *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n     */\n    var invoker = _curry2(function invoker(arity, method) {\n        return curryN(arity + 1, function () {\n            var target = arguments[arity];\n            if (target != null && _isFunction(target[method])) {\n                return target[method].apply(target, _slice(arguments, 0, arity));\n            }\n            throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n        });\n    });\n\n    /**\n     * Returns a string made by inserting the `separator` between each element and\n     * concatenating all the elements into a single string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig String -> [a] -> String\n     * @param {Number|String} separator The string used to separate the elements.\n     * @param {Array} xs The elements to join into a string.\n     * @return {String} str The string made by concatenating `xs` with `separator`.\n     * @see R.split\n     * @example\n     *\n     *      var spacer = R.join(' ');\n     *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n     *      R.join('|', [1, 2, 3]);    //=> '1|2|3'\n     */\n    var join = invoker(1, 'join');\n\n    /**\n     * Creates a new function that, when invoked, caches the result of calling `fn`\n     * for a given argument set and returns the result. Subsequent calls to the\n     * memoized `fn` with the same argument set will not result in an additional\n     * call to `fn`; instead, the cached result for that set of arguments will be\n     * returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (*... -> a) -> (*... -> a)\n     * @param {Function} fn The function to memoize.\n     * @return {Function} Memoized version of `fn`.\n     * @example\n     *\n     *      var count = 0;\n     *      var factorial = R.memoize(n => {\n     *        count += 1;\n     *        return R.product(R.range(1, n + 1));\n     *      });\n     *      factorial(5); //=> 120\n     *      factorial(5); //=> 120\n     *      factorial(5); //=> 120\n     *      count; //=> 1\n     */\n    var memoize = _curry1(function memoize(fn) {\n        var cache = {};\n        return _arity(fn.length, function () {\n            var key = toString(arguments);\n            if (!_has(key, cache)) {\n                cache[key] = fn.apply(this, arguments);\n            }\n            return cache[key];\n        });\n    });\n\n    /**\n     * Splits a string into an array of strings based on the given\n     * separator.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category String\n     * @sig (String | RegExp) -> String -> [String]\n     * @param {String|RegExp} sep The pattern.\n     * @param {String} str The string to separate into an array.\n     * @return {Array} The array of strings from `str` separated by `str`.\n     * @see R.join\n     * @example\n     *\n     *      var pathComponents = R.split('/');\n     *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n     *\n     *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n     */\n    var split = invoker(1, 'split');\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements contained in the first or\n     * second list, but not both.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` or `list2`, but not both.\n     * @see R.symmetricDifferenceWith, R.difference, R.differenceWith\n     * @example\n     *\n     *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\n     *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\n     */\n    var symmetricDifference = _curry2(function symmetricDifference(list1, list2) {\n        return concat(difference(list1, list2), difference(list2, list1));\n    });\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements contained in the first or\n     * second list, but not both. Duplication is determined according to the value\n     * returned by applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [a] -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` or `list2`, but not both.\n     * @see R.symmetricDifference, R.difference, R.differenceWith\n     * @example\n     *\n     *      var eqA = R.eqBy(R.prop('a'));\n     *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n     *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n     *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n     */\n    var symmetricDifferenceWith = _curry3(function symmetricDifferenceWith(pred, list1, list2) {\n        return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));\n    });\n\n    /**\n     * Determines whether a given string matches a given regular expression.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category String\n     * @sig RegExp -> String -> Boolean\n     * @param {RegExp} pattern\n     * @param {String} str\n     * @return {Boolean}\n     * @see R.match\n     * @example\n     *\n     *      R.test(/^x/, 'xyz'); //=> true\n     *      R.test(/^y/, 'xyz'); //=> false\n     */\n    var test = _curry2(function test(pattern, str) {\n        if (!_isRegExp(pattern)) {\n            throw new TypeError('\\u2018test\\u2019 requires a value of type RegExp as its first argument; received ' + toString(pattern));\n        }\n        return _cloneRegExp(pattern).test(str);\n    });\n\n    /**\n     * The lower case version of a string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to lower case.\n     * @return {String} The lower case version of `str`.\n     * @see R.toUpper\n     * @example\n     *\n     *      R.toLower('XYZ'); //=> 'xyz'\n     */\n    var toLower = invoker(0, 'toLowerCase');\n\n    /**\n     * The upper case version of a string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to upper case.\n     * @return {String} The upper case version of `str`.\n     * @see R.toLower\n     * @example\n     *\n     *      R.toUpper('abc'); //=> 'ABC'\n     */\n    var toUpper = invoker(0, 'toUpperCase');\n\n    /**\n     * Returns a new list containing only one copy of each element in the original\n     * list, based upon the value returned by applying the supplied function to\n     * each list element. Prefers the first item if the supplied function produces\n     * the same value on two items. `R.equals` is used for comparison.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> b) -> [a] -> [a]\n     * @param {Function} fn A function used to produce a value to use during comparisons.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n     */\n    var uniqBy = _curry2(function uniqBy(fn, list) {\n        var set = new _Set();\n        var result = [];\n        var idx = 0;\n        var appliedItem, item;\n        while (idx < list.length) {\n            item = list[idx];\n            appliedItem = fn(item);\n            if (set.add(appliedItem)) {\n                result.push(item);\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns a new list containing only one copy of each element in the original\n     * list. `R.equals` is used to determine equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a]\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      R.uniq([1, 1, 2, 1]); //=> [1, 2]\n     *      R.uniq([1, '1']);     //=> [1, '1']\n     *      R.uniq([[42], [42]]); //=> [[42]]\n     */\n    var uniq = uniqBy(identity);\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of those\n     * elements common to both lists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The list of elements found in both `list1` and `list2`.\n     * @see R.intersectionWith\n     * @example\n     *\n     *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n     */\n    var intersection = _curry2(function intersection(list1, list2) {\n        var lookupList, filteredList;\n        if (list1.length > list2.length) {\n            lookupList = list1;\n            filteredList = list2;\n        } else {\n            lookupList = list2;\n            filteredList = list1;\n        }\n        return uniq(_filter(flip(_contains)(lookupList), filteredList));\n    });\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of the elements\n     * of each list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} as The first list.\n     * @param {Array} bs The second list.\n     * @return {Array} The first and second lists concatenated, with\n     *         duplicates removed.\n     * @example\n     *\n     *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n     */\n    var union = _curry2(compose(uniq, _concat));\n\n    var R = {\n        F: F,\n        T: T,\n        __: __,\n        add: add,\n        addIndex: addIndex,\n        adjust: adjust,\n        all: all,\n        allPass: allPass,\n        always: always,\n        and: and,\n        any: any,\n        anyPass: anyPass,\n        ap: ap,\n        aperture: aperture,\n        append: append,\n        apply: apply,\n        applySpec: applySpec,\n        assoc: assoc,\n        assocPath: assocPath,\n        binary: binary,\n        bind: bind,\n        both: both,\n        call: call,\n        chain: chain,\n        clamp: clamp,\n        clone: clone,\n        comparator: comparator,\n        complement: complement,\n        compose: compose,\n        composeK: composeK,\n        composeP: composeP,\n        concat: concat,\n        cond: cond,\n        construct: construct,\n        constructN: constructN,\n        contains: contains,\n        converge: converge,\n        countBy: countBy,\n        curry: curry,\n        curryN: curryN,\n        dec: dec,\n        defaultTo: defaultTo,\n        difference: difference,\n        differenceWith: differenceWith,\n        dissoc: dissoc,\n        dissocPath: dissocPath,\n        divide: divide,\n        drop: drop,\n        dropLast: dropLast,\n        dropLastWhile: dropLastWhile,\n        dropRepeats: dropRepeats,\n        dropRepeatsWith: dropRepeatsWith,\n        dropWhile: dropWhile,\n        either: either,\n        empty: empty,\n        eqBy: eqBy,\n        eqProps: eqProps,\n        equals: equals,\n        evolve: evolve,\n        filter: filter,\n        find: find,\n        findIndex: findIndex,\n        findLast: findLast,\n        findLastIndex: findLastIndex,\n        flatten: flatten,\n        flip: flip,\n        forEach: forEach,\n        fromPairs: fromPairs,\n        groupBy: groupBy,\n        groupWith: groupWith,\n        gt: gt,\n        gte: gte,\n        has: has,\n        hasIn: hasIn,\n        head: head,\n        identical: identical,\n        identity: identity,\n        ifElse: ifElse,\n        inc: inc,\n        indexBy: indexBy,\n        indexOf: indexOf,\n        init: init,\n        insert: insert,\n        insertAll: insertAll,\n        intersection: intersection,\n        intersectionWith: intersectionWith,\n        intersperse: intersperse,\n        into: into,\n        invert: invert,\n        invertObj: invertObj,\n        invoker: invoker,\n        is: is,\n        isArrayLike: isArrayLike,\n        isEmpty: isEmpty,\n        isNil: isNil,\n        join: join,\n        juxt: juxt,\n        keys: keys,\n        keysIn: keysIn,\n        last: last,\n        lastIndexOf: lastIndexOf,\n        length: length,\n        lens: lens,\n        lensIndex: lensIndex,\n        lensPath: lensPath,\n        lensProp: lensProp,\n        lift: lift,\n        liftN: liftN,\n        lt: lt,\n        lte: lte,\n        map: map,\n        mapAccum: mapAccum,\n        mapAccumRight: mapAccumRight,\n        mapObjIndexed: mapObjIndexed,\n        match: match,\n        mathMod: mathMod,\n        max: max,\n        maxBy: maxBy,\n        mean: mean,\n        median: median,\n        memoize: memoize,\n        merge: merge,\n        mergeAll: mergeAll,\n        mergeWith: mergeWith,\n        mergeWithKey: mergeWithKey,\n        min: min,\n        minBy: minBy,\n        modulo: modulo,\n        multiply: multiply,\n        nAry: nAry,\n        negate: negate,\n        none: none,\n        not: not,\n        nth: nth,\n        nthArg: nthArg,\n        objOf: objOf,\n        of: of,\n        omit: omit,\n        once: once,\n        or: or,\n        over: over,\n        pair: pair,\n        partial: partial,\n        partialRight: partialRight,\n        partition: partition,\n        path: path,\n        pathEq: pathEq,\n        pathOr: pathOr,\n        pathSatisfies: pathSatisfies,\n        pick: pick,\n        pickAll: pickAll,\n        pickBy: pickBy,\n        pipe: pipe,\n        pipeK: pipeK,\n        pipeP: pipeP,\n        pluck: pluck,\n        prepend: prepend,\n        product: product,\n        project: project,\n        prop: prop,\n        propEq: propEq,\n        propIs: propIs,\n        propOr: propOr,\n        propSatisfies: propSatisfies,\n        props: props,\n        range: range,\n        reduce: reduce,\n        reduceBy: reduceBy,\n        reduceRight: reduceRight,\n        reduceWhile: reduceWhile,\n        reduced: reduced,\n        reject: reject,\n        remove: remove,\n        repeat: repeat,\n        replace: replace,\n        reverse: reverse,\n        scan: scan,\n        sequence: sequence,\n        set: set,\n        slice: slice,\n        sort: sort,\n        sortBy: sortBy,\n        split: split,\n        splitAt: splitAt,\n        splitEvery: splitEvery,\n        splitWhen: splitWhen,\n        subtract: subtract,\n        sum: sum,\n        symmetricDifference: symmetricDifference,\n        symmetricDifferenceWith: symmetricDifferenceWith,\n        tail: tail,\n        take: take,\n        takeLast: takeLast,\n        takeLastWhile: takeLastWhile,\n        takeWhile: takeWhile,\n        tap: tap,\n        test: test,\n        times: times,\n        toLower: toLower,\n        toPairs: toPairs,\n        toPairsIn: toPairsIn,\n        toString: toString,\n        toUpper: toUpper,\n        transduce: transduce,\n        transpose: transpose,\n        traverse: traverse,\n        trim: trim,\n        tryCatch: tryCatch,\n        type: type,\n        unapply: unapply,\n        unary: unary,\n        uncurryN: uncurryN,\n        unfold: unfold,\n        union: union,\n        unionWith: unionWith,\n        uniq: uniq,\n        uniqBy: uniqBy,\n        uniqWith: uniqWith,\n        unless: unless,\n        unnest: unnest,\n        until: until,\n        update: update,\n        useWith: useWith,\n        values: values,\n        valuesIn: valuesIn,\n        view: view,\n        when: when,\n        where: where,\n        whereEq: whereEq,\n        without: without,\n        wrap: wrap,\n        xprod: xprod,\n        zip: zip,\n        zipObj: zipObj,\n        zipWith: zipWith\n    };\n  /* eslint-env amd */\n\n  /* TEST_ENTRY_POINT */\n\n  if (typeof exports === 'object') {\n    module.exports = R;\n  } else if (typeof define === 'function' && define.amd) {\n    define(function() { return R; });\n  } else {\n    this.R = R;\n  }\n\n}.call(this));\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":327,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":328,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":329,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":330,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":331,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":332,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":333,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":334,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":335,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":336,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":337,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":338,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":339,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":340,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":341,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":342,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":343,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":344,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":345,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":346,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":347,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":348,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":349,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":350,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":351,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":352,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":353,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":354,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":355,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":356,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":357,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":358,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":359,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":360,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":361,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":362,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":363,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":364,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":365,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":366,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":367,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":368,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":369,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":370,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":371,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":372,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":373,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":374,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":375,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":376,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":377,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":378,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":379,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":380,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":381,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":382,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":383,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":384,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":385,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":386,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":387,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":388,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":389,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":390,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":391,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":392,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":393,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":394,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":395,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":396,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":397,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":398,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":399,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":400,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":401,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":402,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":403,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":404,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":405,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":406,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":407,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":408,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":409,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":410,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":411,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":412,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":413,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":414,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":415,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":416,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":417,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":418,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":419,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":420,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":421,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":422,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":423,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":424,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":425,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":426,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":427,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":428,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":429,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":430,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":431,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":432,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":433,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":434,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":435,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":436,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":437,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":438,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":439,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":440,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":441,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":442,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":443,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":444,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":445,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":446,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":447,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":448,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":449,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":450,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":451,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":452,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":453,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":454,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":455,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":456,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":457,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":458,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":459,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":460,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":461,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":462,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":463,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":464,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":465,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":466,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":467,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":468,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":469,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":470,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":471,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":472,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":473,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":474,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":475,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":476,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":477,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":478,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":479,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":480,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":481,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":482,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":483,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":484,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":485,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":486,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":487,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":488,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":489,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":490,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":491,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":492,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":493,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":494,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":495,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":496,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":497,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":498,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":499,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":500,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":501,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":502,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":503,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":504,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":505,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":506,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":507,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":508,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":509,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":510,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":511,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":512,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":513,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":514,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":515,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":516,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":517,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":518,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":519,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":520,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":521,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":522,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":523,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":524,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":525,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":526,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":527,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":528,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":529,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":530,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":531,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":532,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":533,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":534,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":535,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":536,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":537,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":538,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":539,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":540,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":541,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":542,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":543,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":544,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":545,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":546,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":547,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":548,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":549,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":550,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":551,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":552,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":553,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":554,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":555,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":556,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":557,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":558,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":559,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":560,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":561,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":562,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":563,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":564,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":565,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":566,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":567,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":568,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":569,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":570,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":571,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":572,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":573,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":574,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":575,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":576,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":577,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":578,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":579,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":580,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":581,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":582,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":583,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":584,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":585,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":586,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":587,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":588,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":589,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":590,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":591,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":592,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":593,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":594,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":595,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":596,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":597,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":598,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":599,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":600,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":601,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":602,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":603,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":604,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":605,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":606,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":607,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":608,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":609,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":610,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":611,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":612,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":613,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":614,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":615,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":616,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":617,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":618,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":619,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":620,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":621,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":622,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":623,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":624,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":625,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":626,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":627,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":628,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":629,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":630,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":631,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":632,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":633,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":634,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":635,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":636,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":637,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":638,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":639,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":640,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":641,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":642,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":643,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":644,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":645,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":646,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":647,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":648,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":649,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":650,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":651,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":652,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":653,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":654,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":655,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":656,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":657,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":658,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":659,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":660,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":661,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":662,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":663,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":664,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":665,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":666,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":667,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":668,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":669,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":670,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":671,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":672,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":673,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":674,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":675,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":676,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":677,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":678,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":679,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":680,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":681,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":682,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":683,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":684,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":685,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":686,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":687,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":688,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":689,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":690,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":691,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":692,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":693,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":694,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":695,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":696,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":697,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":698,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":699,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":700,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":701,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":702,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":703,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":704,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":705,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":706,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":707,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":708,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":709,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":710,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":711,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":712,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":713,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":714,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":715,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":716,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":717,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":718,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":719,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":720,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":721,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":722,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":723,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":724,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":725,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":726,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":727,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":728,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":729,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":730,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":731,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":732,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":733,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":734,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":735,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":736,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":737,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":738,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":739,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":740,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":741,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":742,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":743,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":744,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":745,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":746,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":747,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":748,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":749,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":750,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":751,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":752,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":753,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":754,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":755,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":756,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":757,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":758,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":759,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":760,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":761,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":762,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":763,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":764,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":765,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":766,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":767,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":768,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":769,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":770,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":771,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":772,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":773,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":774,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":775,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":776,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":777,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":778,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":779,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":780,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":781,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":782,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":783,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":784,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":785,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":786,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":787,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":788,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":789,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":790,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":791,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":792,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":793,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":794,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":795,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":796,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":797,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":798,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":799,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":800,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":801,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":802,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":803,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":804,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":805,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":806,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":807,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":808,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":809,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":810,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":811,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":812,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":813,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":814,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":815,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":816,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":817,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":818,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":819,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":820,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":821,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":822,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":823,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":824,"column":0},"generated":{"line":825,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":825,"column":0},"generated":{"line":826,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":826,"column":0},"generated":{"line":827,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":827,"column":0},"generated":{"line":828,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":828,"column":0},"generated":{"line":829,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":829,"column":0},"generated":{"line":830,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":830,"column":0},"generated":{"line":831,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":831,"column":0},"generated":{"line":832,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":832,"column":0},"generated":{"line":833,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":833,"column":0},"generated":{"line":834,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":834,"column":0},"generated":{"line":835,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":835,"column":0},"generated":{"line":836,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":836,"column":0},"generated":{"line":837,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":837,"column":0},"generated":{"line":838,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":838,"column":0},"generated":{"line":839,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":839,"column":0},"generated":{"line":840,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":840,"column":0},"generated":{"line":841,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":841,"column":0},"generated":{"line":842,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":842,"column":0},"generated":{"line":843,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":843,"column":0},"generated":{"line":844,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":844,"column":0},"generated":{"line":845,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":845,"column":0},"generated":{"line":846,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":846,"column":0},"generated":{"line":847,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":847,"column":0},"generated":{"line":848,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":848,"column":0},"generated":{"line":849,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":849,"column":0},"generated":{"line":850,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":850,"column":0},"generated":{"line":851,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":851,"column":0},"generated":{"line":852,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":852,"column":0},"generated":{"line":853,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":853,"column":0},"generated":{"line":854,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":854,"column":0},"generated":{"line":855,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":855,"column":0},"generated":{"line":856,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":856,"column":0},"generated":{"line":857,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":857,"column":0},"generated":{"line":858,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":858,"column":0},"generated":{"line":859,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":859,"column":0},"generated":{"line":860,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":860,"column":0},"generated":{"line":861,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":861,"column":0},"generated":{"line":862,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":862,"column":0},"generated":{"line":863,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":863,"column":0},"generated":{"line":864,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":864,"column":0},"generated":{"line":865,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":865,"column":0},"generated":{"line":866,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":866,"column":0},"generated":{"line":867,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":867,"column":0},"generated":{"line":868,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":868,"column":0},"generated":{"line":869,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":869,"column":0},"generated":{"line":870,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":870,"column":0},"generated":{"line":871,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":871,"column":0},"generated":{"line":872,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":872,"column":0},"generated":{"line":873,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":873,"column":0},"generated":{"line":874,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":874,"column":0},"generated":{"line":875,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":875,"column":0},"generated":{"line":876,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":876,"column":0},"generated":{"line":877,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":877,"column":0},"generated":{"line":878,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":878,"column":0},"generated":{"line":879,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":879,"column":0},"generated":{"line":880,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":880,"column":0},"generated":{"line":881,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":881,"column":0},"generated":{"line":882,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":882,"column":0},"generated":{"line":883,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":883,"column":0},"generated":{"line":884,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":884,"column":0},"generated":{"line":885,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":885,"column":0},"generated":{"line":886,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":886,"column":0},"generated":{"line":887,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":887,"column":0},"generated":{"line":888,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":888,"column":0},"generated":{"line":889,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":889,"column":0},"generated":{"line":890,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":890,"column":0},"generated":{"line":891,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":891,"column":0},"generated":{"line":892,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":892,"column":0},"generated":{"line":893,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":893,"column":0},"generated":{"line":894,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":894,"column":0},"generated":{"line":895,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":895,"column":0},"generated":{"line":896,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":896,"column":0},"generated":{"line":897,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":897,"column":0},"generated":{"line":898,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":898,"column":0},"generated":{"line":899,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":899,"column":0},"generated":{"line":900,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":900,"column":0},"generated":{"line":901,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":901,"column":0},"generated":{"line":902,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":902,"column":0},"generated":{"line":903,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":903,"column":0},"generated":{"line":904,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":904,"column":0},"generated":{"line":905,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":905,"column":0},"generated":{"line":906,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":906,"column":0},"generated":{"line":907,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":907,"column":0},"generated":{"line":908,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":908,"column":0},"generated":{"line":909,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":909,"column":0},"generated":{"line":910,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":910,"column":0},"generated":{"line":911,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":911,"column":0},"generated":{"line":912,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":912,"column":0},"generated":{"line":913,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":913,"column":0},"generated":{"line":914,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":914,"column":0},"generated":{"line":915,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":915,"column":0},"generated":{"line":916,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":916,"column":0},"generated":{"line":917,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":917,"column":0},"generated":{"line":918,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":918,"column":0},"generated":{"line":919,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":919,"column":0},"generated":{"line":920,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":920,"column":0},"generated":{"line":921,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":921,"column":0},"generated":{"line":922,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":922,"column":0},"generated":{"line":923,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":923,"column":0},"generated":{"line":924,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":924,"column":0},"generated":{"line":925,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":925,"column":0},"generated":{"line":926,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":926,"column":0},"generated":{"line":927,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":927,"column":0},"generated":{"line":928,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":928,"column":0},"generated":{"line":929,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":929,"column":0},"generated":{"line":930,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":930,"column":0},"generated":{"line":931,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":931,"column":0},"generated":{"line":932,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":932,"column":0},"generated":{"line":933,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":933,"column":0},"generated":{"line":934,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":934,"column":0},"generated":{"line":935,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":935,"column":0},"generated":{"line":936,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":936,"column":0},"generated":{"line":937,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":937,"column":0},"generated":{"line":938,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":938,"column":0},"generated":{"line":939,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":939,"column":0},"generated":{"line":940,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":940,"column":0},"generated":{"line":941,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":941,"column":0},"generated":{"line":942,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":942,"column":0},"generated":{"line":943,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":943,"column":0},"generated":{"line":944,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":944,"column":0},"generated":{"line":945,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":945,"column":0},"generated":{"line":946,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":946,"column":0},"generated":{"line":947,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":947,"column":0},"generated":{"line":948,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":948,"column":0},"generated":{"line":949,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":949,"column":0},"generated":{"line":950,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":950,"column":0},"generated":{"line":951,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":951,"column":0},"generated":{"line":952,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":952,"column":0},"generated":{"line":953,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":953,"column":0},"generated":{"line":954,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":954,"column":0},"generated":{"line":955,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":955,"column":0},"generated":{"line":956,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":956,"column":0},"generated":{"line":957,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":957,"column":0},"generated":{"line":958,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":958,"column":0},"generated":{"line":959,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":959,"column":0},"generated":{"line":960,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":960,"column":0},"generated":{"line":961,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":961,"column":0},"generated":{"line":962,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":962,"column":0},"generated":{"line":963,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":963,"column":0},"generated":{"line":964,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":964,"column":0},"generated":{"line":965,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":965,"column":0},"generated":{"line":966,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":966,"column":0},"generated":{"line":967,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":967,"column":0},"generated":{"line":968,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":968,"column":0},"generated":{"line":969,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":969,"column":0},"generated":{"line":970,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":970,"column":0},"generated":{"line":971,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":971,"column":0},"generated":{"line":972,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":972,"column":0},"generated":{"line":973,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":973,"column":0},"generated":{"line":974,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":974,"column":0},"generated":{"line":975,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":975,"column":0},"generated":{"line":976,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":976,"column":0},"generated":{"line":977,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":977,"column":0},"generated":{"line":978,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":978,"column":0},"generated":{"line":979,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":979,"column":0},"generated":{"line":980,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":980,"column":0},"generated":{"line":981,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":981,"column":0},"generated":{"line":982,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":982,"column":0},"generated":{"line":983,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":983,"column":0},"generated":{"line":984,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":984,"column":0},"generated":{"line":985,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":985,"column":0},"generated":{"line":986,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":986,"column":0},"generated":{"line":987,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":987,"column":0},"generated":{"line":988,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":988,"column":0},"generated":{"line":989,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":989,"column":0},"generated":{"line":990,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":990,"column":0},"generated":{"line":991,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":991,"column":0},"generated":{"line":992,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":992,"column":0},"generated":{"line":993,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":993,"column":0},"generated":{"line":994,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":994,"column":0},"generated":{"line":995,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":995,"column":0},"generated":{"line":996,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":996,"column":0},"generated":{"line":997,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":997,"column":0},"generated":{"line":998,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":998,"column":0},"generated":{"line":999,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":999,"column":0},"generated":{"line":1000,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1000,"column":0},"generated":{"line":1001,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1001,"column":0},"generated":{"line":1002,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1002,"column":0},"generated":{"line":1003,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1003,"column":0},"generated":{"line":1004,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1004,"column":0},"generated":{"line":1005,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1005,"column":0},"generated":{"line":1006,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1006,"column":0},"generated":{"line":1007,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1007,"column":0},"generated":{"line":1008,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1008,"column":0},"generated":{"line":1009,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1009,"column":0},"generated":{"line":1010,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1010,"column":0},"generated":{"line":1011,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1011,"column":0},"generated":{"line":1012,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1012,"column":0},"generated":{"line":1013,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1013,"column":0},"generated":{"line":1014,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1014,"column":0},"generated":{"line":1015,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1015,"column":0},"generated":{"line":1016,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1016,"column":0},"generated":{"line":1017,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1017,"column":0},"generated":{"line":1018,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1018,"column":0},"generated":{"line":1019,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1019,"column":0},"generated":{"line":1020,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1020,"column":0},"generated":{"line":1021,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1021,"column":0},"generated":{"line":1022,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1022,"column":0},"generated":{"line":1023,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1023,"column":0},"generated":{"line":1024,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1024,"column":0},"generated":{"line":1025,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1025,"column":0},"generated":{"line":1026,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1026,"column":0},"generated":{"line":1027,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1027,"column":0},"generated":{"line":1028,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1028,"column":0},"generated":{"line":1029,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1029,"column":0},"generated":{"line":1030,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1030,"column":0},"generated":{"line":1031,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1031,"column":0},"generated":{"line":1032,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1032,"column":0},"generated":{"line":1033,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1033,"column":0},"generated":{"line":1034,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1034,"column":0},"generated":{"line":1035,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1035,"column":0},"generated":{"line":1036,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1036,"column":0},"generated":{"line":1037,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1037,"column":0},"generated":{"line":1038,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1038,"column":0},"generated":{"line":1039,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1039,"column":0},"generated":{"line":1040,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1040,"column":0},"generated":{"line":1041,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1041,"column":0},"generated":{"line":1042,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1042,"column":0},"generated":{"line":1043,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1043,"column":0},"generated":{"line":1044,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1044,"column":0},"generated":{"line":1045,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1045,"column":0},"generated":{"line":1046,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1046,"column":0},"generated":{"line":1047,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1047,"column":0},"generated":{"line":1048,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1048,"column":0},"generated":{"line":1049,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1049,"column":0},"generated":{"line":1050,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1050,"column":0},"generated":{"line":1051,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1051,"column":0},"generated":{"line":1052,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1052,"column":0},"generated":{"line":1053,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1053,"column":0},"generated":{"line":1054,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1054,"column":0},"generated":{"line":1055,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1055,"column":0},"generated":{"line":1056,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1056,"column":0},"generated":{"line":1057,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1057,"column":0},"generated":{"line":1058,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1058,"column":0},"generated":{"line":1059,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1059,"column":0},"generated":{"line":1060,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1060,"column":0},"generated":{"line":1061,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1061,"column":0},"generated":{"line":1062,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1062,"column":0},"generated":{"line":1063,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1063,"column":0},"generated":{"line":1064,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1064,"column":0},"generated":{"line":1065,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1065,"column":0},"generated":{"line":1066,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1066,"column":0},"generated":{"line":1067,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1067,"column":0},"generated":{"line":1068,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1068,"column":0},"generated":{"line":1069,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1069,"column":0},"generated":{"line":1070,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1070,"column":0},"generated":{"line":1071,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1071,"column":0},"generated":{"line":1072,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1072,"column":0},"generated":{"line":1073,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1073,"column":0},"generated":{"line":1074,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1074,"column":0},"generated":{"line":1075,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1075,"column":0},"generated":{"line":1076,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1076,"column":0},"generated":{"line":1077,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1077,"column":0},"generated":{"line":1078,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1078,"column":0},"generated":{"line":1079,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1079,"column":0},"generated":{"line":1080,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1080,"column":0},"generated":{"line":1081,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1081,"column":0},"generated":{"line":1082,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1082,"column":0},"generated":{"line":1083,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1083,"column":0},"generated":{"line":1084,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1084,"column":0},"generated":{"line":1085,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1085,"column":0},"generated":{"line":1086,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1086,"column":0},"generated":{"line":1087,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1087,"column":0},"generated":{"line":1088,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1088,"column":0},"generated":{"line":1089,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1089,"column":0},"generated":{"line":1090,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1090,"column":0},"generated":{"line":1091,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1091,"column":0},"generated":{"line":1092,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1092,"column":0},"generated":{"line":1093,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1093,"column":0},"generated":{"line":1094,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1094,"column":0},"generated":{"line":1095,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1095,"column":0},"generated":{"line":1096,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1096,"column":0},"generated":{"line":1097,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1097,"column":0},"generated":{"line":1098,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1098,"column":0},"generated":{"line":1099,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1099,"column":0},"generated":{"line":1100,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1100,"column":0},"generated":{"line":1101,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1101,"column":0},"generated":{"line":1102,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1102,"column":0},"generated":{"line":1103,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1103,"column":0},"generated":{"line":1104,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1104,"column":0},"generated":{"line":1105,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1105,"column":0},"generated":{"line":1106,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1106,"column":0},"generated":{"line":1107,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1107,"column":0},"generated":{"line":1108,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1108,"column":0},"generated":{"line":1109,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1109,"column":0},"generated":{"line":1110,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1110,"column":0},"generated":{"line":1111,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1111,"column":0},"generated":{"line":1112,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1112,"column":0},"generated":{"line":1113,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1113,"column":0},"generated":{"line":1114,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1114,"column":0},"generated":{"line":1115,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1115,"column":0},"generated":{"line":1116,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1116,"column":0},"generated":{"line":1117,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1117,"column":0},"generated":{"line":1118,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1118,"column":0},"generated":{"line":1119,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1119,"column":0},"generated":{"line":1120,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1120,"column":0},"generated":{"line":1121,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1121,"column":0},"generated":{"line":1122,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1122,"column":0},"generated":{"line":1123,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1123,"column":0},"generated":{"line":1124,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1124,"column":0},"generated":{"line":1125,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1125,"column":0},"generated":{"line":1126,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1126,"column":0},"generated":{"line":1127,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1127,"column":0},"generated":{"line":1128,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1128,"column":0},"generated":{"line":1129,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1129,"column":0},"generated":{"line":1130,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1130,"column":0},"generated":{"line":1131,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1131,"column":0},"generated":{"line":1132,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1132,"column":0},"generated":{"line":1133,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1133,"column":0},"generated":{"line":1134,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1134,"column":0},"generated":{"line":1135,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1135,"column":0},"generated":{"line":1136,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1136,"column":0},"generated":{"line":1137,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1137,"column":0},"generated":{"line":1138,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1138,"column":0},"generated":{"line":1139,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1139,"column":0},"generated":{"line":1140,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1140,"column":0},"generated":{"line":1141,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1141,"column":0},"generated":{"line":1142,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1142,"column":0},"generated":{"line":1143,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1143,"column":0},"generated":{"line":1144,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1144,"column":0},"generated":{"line":1145,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1145,"column":0},"generated":{"line":1146,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1146,"column":0},"generated":{"line":1147,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1147,"column":0},"generated":{"line":1148,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1148,"column":0},"generated":{"line":1149,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1149,"column":0},"generated":{"line":1150,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1150,"column":0},"generated":{"line":1151,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1151,"column":0},"generated":{"line":1152,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1152,"column":0},"generated":{"line":1153,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1153,"column":0},"generated":{"line":1154,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1154,"column":0},"generated":{"line":1155,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1155,"column":0},"generated":{"line":1156,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1156,"column":0},"generated":{"line":1157,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1157,"column":0},"generated":{"line":1158,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1158,"column":0},"generated":{"line":1159,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1159,"column":0},"generated":{"line":1160,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1160,"column":0},"generated":{"line":1161,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1161,"column":0},"generated":{"line":1162,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1162,"column":0},"generated":{"line":1163,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1163,"column":0},"generated":{"line":1164,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1164,"column":0},"generated":{"line":1165,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1165,"column":0},"generated":{"line":1166,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1166,"column":0},"generated":{"line":1167,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1167,"column":0},"generated":{"line":1168,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1168,"column":0},"generated":{"line":1169,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1169,"column":0},"generated":{"line":1170,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1170,"column":0},"generated":{"line":1171,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1171,"column":0},"generated":{"line":1172,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1172,"column":0},"generated":{"line":1173,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1173,"column":0},"generated":{"line":1174,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1174,"column":0},"generated":{"line":1175,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1175,"column":0},"generated":{"line":1176,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1176,"column":0},"generated":{"line":1177,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1177,"column":0},"generated":{"line":1178,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1178,"column":0},"generated":{"line":1179,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1179,"column":0},"generated":{"line":1180,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1180,"column":0},"generated":{"line":1181,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1181,"column":0},"generated":{"line":1182,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1182,"column":0},"generated":{"line":1183,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1183,"column":0},"generated":{"line":1184,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1184,"column":0},"generated":{"line":1185,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1185,"column":0},"generated":{"line":1186,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1186,"column":0},"generated":{"line":1187,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1187,"column":0},"generated":{"line":1188,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1188,"column":0},"generated":{"line":1189,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1189,"column":0},"generated":{"line":1190,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1190,"column":0},"generated":{"line":1191,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1191,"column":0},"generated":{"line":1192,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1192,"column":0},"generated":{"line":1193,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1193,"column":0},"generated":{"line":1194,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1194,"column":0},"generated":{"line":1195,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1195,"column":0},"generated":{"line":1196,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1196,"column":0},"generated":{"line":1197,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1197,"column":0},"generated":{"line":1198,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1198,"column":0},"generated":{"line":1199,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1199,"column":0},"generated":{"line":1200,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1200,"column":0},"generated":{"line":1201,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1201,"column":0},"generated":{"line":1202,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1202,"column":0},"generated":{"line":1203,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1203,"column":0},"generated":{"line":1204,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1204,"column":0},"generated":{"line":1205,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1205,"column":0},"generated":{"line":1206,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1206,"column":0},"generated":{"line":1207,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1207,"column":0},"generated":{"line":1208,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1208,"column":0},"generated":{"line":1209,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1209,"column":0},"generated":{"line":1210,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1210,"column":0},"generated":{"line":1211,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1211,"column":0},"generated":{"line":1212,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1212,"column":0},"generated":{"line":1213,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1213,"column":0},"generated":{"line":1214,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1214,"column":0},"generated":{"line":1215,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1215,"column":0},"generated":{"line":1216,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1216,"column":0},"generated":{"line":1217,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1217,"column":0},"generated":{"line":1218,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1218,"column":0},"generated":{"line":1219,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1219,"column":0},"generated":{"line":1220,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1220,"column":0},"generated":{"line":1221,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1221,"column":0},"generated":{"line":1222,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1222,"column":0},"generated":{"line":1223,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1223,"column":0},"generated":{"line":1224,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1224,"column":0},"generated":{"line":1225,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1225,"column":0},"generated":{"line":1226,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1226,"column":0},"generated":{"line":1227,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1227,"column":0},"generated":{"line":1228,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1228,"column":0},"generated":{"line":1229,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1229,"column":0},"generated":{"line":1230,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1230,"column":0},"generated":{"line":1231,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1231,"column":0},"generated":{"line":1232,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1232,"column":0},"generated":{"line":1233,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1233,"column":0},"generated":{"line":1234,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1234,"column":0},"generated":{"line":1235,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1235,"column":0},"generated":{"line":1236,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1236,"column":0},"generated":{"line":1237,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1237,"column":0},"generated":{"line":1238,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1238,"column":0},"generated":{"line":1239,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1239,"column":0},"generated":{"line":1240,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1240,"column":0},"generated":{"line":1241,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1241,"column":0},"generated":{"line":1242,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1242,"column":0},"generated":{"line":1243,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1243,"column":0},"generated":{"line":1244,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1244,"column":0},"generated":{"line":1245,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1245,"column":0},"generated":{"line":1246,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1246,"column":0},"generated":{"line":1247,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1247,"column":0},"generated":{"line":1248,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1248,"column":0},"generated":{"line":1249,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1249,"column":0},"generated":{"line":1250,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1250,"column":0},"generated":{"line":1251,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1251,"column":0},"generated":{"line":1252,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1252,"column":0},"generated":{"line":1253,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1253,"column":0},"generated":{"line":1254,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1254,"column":0},"generated":{"line":1255,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1255,"column":0},"generated":{"line":1256,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1256,"column":0},"generated":{"line":1257,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1257,"column":0},"generated":{"line":1258,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1258,"column":0},"generated":{"line":1259,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1259,"column":0},"generated":{"line":1260,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1260,"column":0},"generated":{"line":1261,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1261,"column":0},"generated":{"line":1262,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1262,"column":0},"generated":{"line":1263,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1263,"column":0},"generated":{"line":1264,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1264,"column":0},"generated":{"line":1265,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1265,"column":0},"generated":{"line":1266,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1266,"column":0},"generated":{"line":1267,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1267,"column":0},"generated":{"line":1268,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1268,"column":0},"generated":{"line":1269,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1269,"column":0},"generated":{"line":1270,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1270,"column":0},"generated":{"line":1271,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1271,"column":0},"generated":{"line":1272,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1272,"column":0},"generated":{"line":1273,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1273,"column":0},"generated":{"line":1274,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1274,"column":0},"generated":{"line":1275,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1275,"column":0},"generated":{"line":1276,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1276,"column":0},"generated":{"line":1277,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1277,"column":0},"generated":{"line":1278,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1278,"column":0},"generated":{"line":1279,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1279,"column":0},"generated":{"line":1280,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1280,"column":0},"generated":{"line":1281,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1281,"column":0},"generated":{"line":1282,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1282,"column":0},"generated":{"line":1283,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1283,"column":0},"generated":{"line":1284,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1284,"column":0},"generated":{"line":1285,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1285,"column":0},"generated":{"line":1286,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1286,"column":0},"generated":{"line":1287,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1287,"column":0},"generated":{"line":1288,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1288,"column":0},"generated":{"line":1289,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1289,"column":0},"generated":{"line":1290,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1290,"column":0},"generated":{"line":1291,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1291,"column":0},"generated":{"line":1292,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1292,"column":0},"generated":{"line":1293,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1293,"column":0},"generated":{"line":1294,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1294,"column":0},"generated":{"line":1295,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1295,"column":0},"generated":{"line":1296,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1296,"column":0},"generated":{"line":1297,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1297,"column":0},"generated":{"line":1298,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1298,"column":0},"generated":{"line":1299,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1299,"column":0},"generated":{"line":1300,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1300,"column":0},"generated":{"line":1301,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1301,"column":0},"generated":{"line":1302,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1302,"column":0},"generated":{"line":1303,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1303,"column":0},"generated":{"line":1304,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1304,"column":0},"generated":{"line":1305,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1305,"column":0},"generated":{"line":1306,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1306,"column":0},"generated":{"line":1307,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1307,"column":0},"generated":{"line":1308,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1308,"column":0},"generated":{"line":1309,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1309,"column":0},"generated":{"line":1310,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1310,"column":0},"generated":{"line":1311,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1311,"column":0},"generated":{"line":1312,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1312,"column":0},"generated":{"line":1313,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1313,"column":0},"generated":{"line":1314,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1314,"column":0},"generated":{"line":1315,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1315,"column":0},"generated":{"line":1316,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1316,"column":0},"generated":{"line":1317,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1317,"column":0},"generated":{"line":1318,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1318,"column":0},"generated":{"line":1319,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1319,"column":0},"generated":{"line":1320,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1320,"column":0},"generated":{"line":1321,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1321,"column":0},"generated":{"line":1322,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1322,"column":0},"generated":{"line":1323,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1323,"column":0},"generated":{"line":1324,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1324,"column":0},"generated":{"line":1325,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1325,"column":0},"generated":{"line":1326,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1326,"column":0},"generated":{"line":1327,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1327,"column":0},"generated":{"line":1328,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1328,"column":0},"generated":{"line":1329,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1329,"column":0},"generated":{"line":1330,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1330,"column":0},"generated":{"line":1331,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1331,"column":0},"generated":{"line":1332,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1332,"column":0},"generated":{"line":1333,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1333,"column":0},"generated":{"line":1334,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1334,"column":0},"generated":{"line":1335,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1335,"column":0},"generated":{"line":1336,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1336,"column":0},"generated":{"line":1337,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1337,"column":0},"generated":{"line":1338,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1338,"column":0},"generated":{"line":1339,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1339,"column":0},"generated":{"line":1340,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1340,"column":0},"generated":{"line":1341,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1341,"column":0},"generated":{"line":1342,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1342,"column":0},"generated":{"line":1343,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1343,"column":0},"generated":{"line":1344,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1344,"column":0},"generated":{"line":1345,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1345,"column":0},"generated":{"line":1346,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1346,"column":0},"generated":{"line":1347,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1347,"column":0},"generated":{"line":1348,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1348,"column":0},"generated":{"line":1349,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1349,"column":0},"generated":{"line":1350,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1350,"column":0},"generated":{"line":1351,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1351,"column":0},"generated":{"line":1352,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1352,"column":0},"generated":{"line":1353,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1353,"column":0},"generated":{"line":1354,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1354,"column":0},"generated":{"line":1355,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1355,"column":0},"generated":{"line":1356,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1356,"column":0},"generated":{"line":1357,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1357,"column":0},"generated":{"line":1358,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1358,"column":0},"generated":{"line":1359,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1359,"column":0},"generated":{"line":1360,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1360,"column":0},"generated":{"line":1361,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1361,"column":0},"generated":{"line":1362,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1362,"column":0},"generated":{"line":1363,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1363,"column":0},"generated":{"line":1364,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1364,"column":0},"generated":{"line":1365,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1365,"column":0},"generated":{"line":1366,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1366,"column":0},"generated":{"line":1367,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1367,"column":0},"generated":{"line":1368,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1368,"column":0},"generated":{"line":1369,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1369,"column":0},"generated":{"line":1370,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1370,"column":0},"generated":{"line":1371,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1371,"column":0},"generated":{"line":1372,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1372,"column":0},"generated":{"line":1373,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1373,"column":0},"generated":{"line":1374,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1374,"column":0},"generated":{"line":1375,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1375,"column":0},"generated":{"line":1376,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1376,"column":0},"generated":{"line":1377,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1377,"column":0},"generated":{"line":1378,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1378,"column":0},"generated":{"line":1379,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1379,"column":0},"generated":{"line":1380,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1380,"column":0},"generated":{"line":1381,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1381,"column":0},"generated":{"line":1382,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1382,"column":0},"generated":{"line":1383,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1383,"column":0},"generated":{"line":1384,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1384,"column":0},"generated":{"line":1385,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1385,"column":0},"generated":{"line":1386,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1386,"column":0},"generated":{"line":1387,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1387,"column":0},"generated":{"line":1388,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1388,"column":0},"generated":{"line":1389,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1389,"column":0},"generated":{"line":1390,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1390,"column":0},"generated":{"line":1391,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1391,"column":0},"generated":{"line":1392,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1392,"column":0},"generated":{"line":1393,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1393,"column":0},"generated":{"line":1394,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1394,"column":0},"generated":{"line":1395,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1395,"column":0},"generated":{"line":1396,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1396,"column":0},"generated":{"line":1397,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1397,"column":0},"generated":{"line":1398,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1398,"column":0},"generated":{"line":1399,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1399,"column":0},"generated":{"line":1400,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1400,"column":0},"generated":{"line":1401,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1401,"column":0},"generated":{"line":1402,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1402,"column":0},"generated":{"line":1403,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1403,"column":0},"generated":{"line":1404,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1404,"column":0},"generated":{"line":1405,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1405,"column":0},"generated":{"line":1406,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1406,"column":0},"generated":{"line":1407,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1407,"column":0},"generated":{"line":1408,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1408,"column":0},"generated":{"line":1409,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1409,"column":0},"generated":{"line":1410,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1410,"column":0},"generated":{"line":1411,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1411,"column":0},"generated":{"line":1412,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1412,"column":0},"generated":{"line":1413,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1413,"column":0},"generated":{"line":1414,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1414,"column":0},"generated":{"line":1415,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1415,"column":0},"generated":{"line":1416,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1416,"column":0},"generated":{"line":1417,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1417,"column":0},"generated":{"line":1418,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1418,"column":0},"generated":{"line":1419,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1419,"column":0},"generated":{"line":1420,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1420,"column":0},"generated":{"line":1421,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1421,"column":0},"generated":{"line":1422,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1422,"column":0},"generated":{"line":1423,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1423,"column":0},"generated":{"line":1424,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1424,"column":0},"generated":{"line":1425,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1425,"column":0},"generated":{"line":1426,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1426,"column":0},"generated":{"line":1427,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1427,"column":0},"generated":{"line":1428,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1428,"column":0},"generated":{"line":1429,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1429,"column":0},"generated":{"line":1430,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1430,"column":0},"generated":{"line":1431,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1431,"column":0},"generated":{"line":1432,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1432,"column":0},"generated":{"line":1433,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1433,"column":0},"generated":{"line":1434,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1434,"column":0},"generated":{"line":1435,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1435,"column":0},"generated":{"line":1436,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1436,"column":0},"generated":{"line":1437,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1437,"column":0},"generated":{"line":1438,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1438,"column":0},"generated":{"line":1439,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1439,"column":0},"generated":{"line":1440,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1440,"column":0},"generated":{"line":1441,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1441,"column":0},"generated":{"line":1442,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1442,"column":0},"generated":{"line":1443,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1443,"column":0},"generated":{"line":1444,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1444,"column":0},"generated":{"line":1445,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1445,"column":0},"generated":{"line":1446,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1446,"column":0},"generated":{"line":1447,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1447,"column":0},"generated":{"line":1448,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1448,"column":0},"generated":{"line":1449,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1449,"column":0},"generated":{"line":1450,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1450,"column":0},"generated":{"line":1451,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1451,"column":0},"generated":{"line":1452,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1452,"column":0},"generated":{"line":1453,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1453,"column":0},"generated":{"line":1454,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1454,"column":0},"generated":{"line":1455,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1455,"column":0},"generated":{"line":1456,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1456,"column":0},"generated":{"line":1457,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1457,"column":0},"generated":{"line":1458,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1458,"column":0},"generated":{"line":1459,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1459,"column":0},"generated":{"line":1460,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1460,"column":0},"generated":{"line":1461,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1461,"column":0},"generated":{"line":1462,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1462,"column":0},"generated":{"line":1463,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1463,"column":0},"generated":{"line":1464,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1464,"column":0},"generated":{"line":1465,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1465,"column":0},"generated":{"line":1466,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1466,"column":0},"generated":{"line":1467,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1467,"column":0},"generated":{"line":1468,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1468,"column":0},"generated":{"line":1469,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1469,"column":0},"generated":{"line":1470,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1470,"column":0},"generated":{"line":1471,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1471,"column":0},"generated":{"line":1472,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1472,"column":0},"generated":{"line":1473,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1473,"column":0},"generated":{"line":1474,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1474,"column":0},"generated":{"line":1475,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1475,"column":0},"generated":{"line":1476,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1476,"column":0},"generated":{"line":1477,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1477,"column":0},"generated":{"line":1478,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1478,"column":0},"generated":{"line":1479,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1479,"column":0},"generated":{"line":1480,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1480,"column":0},"generated":{"line":1481,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1481,"column":0},"generated":{"line":1482,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1482,"column":0},"generated":{"line":1483,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1483,"column":0},"generated":{"line":1484,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1484,"column":0},"generated":{"line":1485,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1485,"column":0},"generated":{"line":1486,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1486,"column":0},"generated":{"line":1487,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1487,"column":0},"generated":{"line":1488,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1488,"column":0},"generated":{"line":1489,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1489,"column":0},"generated":{"line":1490,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1490,"column":0},"generated":{"line":1491,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1491,"column":0},"generated":{"line":1492,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1492,"column":0},"generated":{"line":1493,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1493,"column":0},"generated":{"line":1494,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1494,"column":0},"generated":{"line":1495,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1495,"column":0},"generated":{"line":1496,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1496,"column":0},"generated":{"line":1497,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1497,"column":0},"generated":{"line":1498,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1498,"column":0},"generated":{"line":1499,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1499,"column":0},"generated":{"line":1500,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1500,"column":0},"generated":{"line":1501,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1501,"column":0},"generated":{"line":1502,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1502,"column":0},"generated":{"line":1503,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1503,"column":0},"generated":{"line":1504,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1504,"column":0},"generated":{"line":1505,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1505,"column":0},"generated":{"line":1506,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1506,"column":0},"generated":{"line":1507,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1507,"column":0},"generated":{"line":1508,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1508,"column":0},"generated":{"line":1509,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1509,"column":0},"generated":{"line":1510,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1510,"column":0},"generated":{"line":1511,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1511,"column":0},"generated":{"line":1512,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1512,"column":0},"generated":{"line":1513,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1513,"column":0},"generated":{"line":1514,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1514,"column":0},"generated":{"line":1515,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1515,"column":0},"generated":{"line":1516,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1516,"column":0},"generated":{"line":1517,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1517,"column":0},"generated":{"line":1518,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1518,"column":0},"generated":{"line":1519,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1519,"column":0},"generated":{"line":1520,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1520,"column":0},"generated":{"line":1521,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1521,"column":0},"generated":{"line":1522,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1522,"column":0},"generated":{"line":1523,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1523,"column":0},"generated":{"line":1524,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1524,"column":0},"generated":{"line":1525,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1525,"column":0},"generated":{"line":1526,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1526,"column":0},"generated":{"line":1527,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1527,"column":0},"generated":{"line":1528,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1528,"column":0},"generated":{"line":1529,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1529,"column":0},"generated":{"line":1530,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1530,"column":0},"generated":{"line":1531,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1531,"column":0},"generated":{"line":1532,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1532,"column":0},"generated":{"line":1533,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1533,"column":0},"generated":{"line":1534,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1534,"column":0},"generated":{"line":1535,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1535,"column":0},"generated":{"line":1536,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1536,"column":0},"generated":{"line":1537,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1537,"column":0},"generated":{"line":1538,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1538,"column":0},"generated":{"line":1539,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1539,"column":0},"generated":{"line":1540,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1540,"column":0},"generated":{"line":1541,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1541,"column":0},"generated":{"line":1542,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1542,"column":0},"generated":{"line":1543,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1543,"column":0},"generated":{"line":1544,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1544,"column":0},"generated":{"line":1545,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1545,"column":0},"generated":{"line":1546,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1546,"column":0},"generated":{"line":1547,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1547,"column":0},"generated":{"line":1548,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1548,"column":0},"generated":{"line":1549,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1549,"column":0},"generated":{"line":1550,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1550,"column":0},"generated":{"line":1551,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1551,"column":0},"generated":{"line":1552,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1552,"column":0},"generated":{"line":1553,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1553,"column":0},"generated":{"line":1554,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1554,"column":0},"generated":{"line":1555,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1555,"column":0},"generated":{"line":1556,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1556,"column":0},"generated":{"line":1557,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1557,"column":0},"generated":{"line":1558,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1558,"column":0},"generated":{"line":1559,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1559,"column":0},"generated":{"line":1560,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1560,"column":0},"generated":{"line":1561,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1561,"column":0},"generated":{"line":1562,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1562,"column":0},"generated":{"line":1563,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1563,"column":0},"generated":{"line":1564,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1564,"column":0},"generated":{"line":1565,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1565,"column":0},"generated":{"line":1566,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1566,"column":0},"generated":{"line":1567,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1567,"column":0},"generated":{"line":1568,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1568,"column":0},"generated":{"line":1569,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1569,"column":0},"generated":{"line":1570,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1570,"column":0},"generated":{"line":1571,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1571,"column":0},"generated":{"line":1572,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1572,"column":0},"generated":{"line":1573,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1573,"column":0},"generated":{"line":1574,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1574,"column":0},"generated":{"line":1575,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1575,"column":0},"generated":{"line":1576,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1576,"column":0},"generated":{"line":1577,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1577,"column":0},"generated":{"line":1578,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1578,"column":0},"generated":{"line":1579,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1579,"column":0},"generated":{"line":1580,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1580,"column":0},"generated":{"line":1581,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1581,"column":0},"generated":{"line":1582,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1582,"column":0},"generated":{"line":1583,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1583,"column":0},"generated":{"line":1584,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1584,"column":0},"generated":{"line":1585,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1585,"column":0},"generated":{"line":1586,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1586,"column":0},"generated":{"line":1587,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1587,"column":0},"generated":{"line":1588,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1588,"column":0},"generated":{"line":1589,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1589,"column":0},"generated":{"line":1590,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1590,"column":0},"generated":{"line":1591,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1591,"column":0},"generated":{"line":1592,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1592,"column":0},"generated":{"line":1593,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1593,"column":0},"generated":{"line":1594,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1594,"column":0},"generated":{"line":1595,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1595,"column":0},"generated":{"line":1596,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1596,"column":0},"generated":{"line":1597,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1597,"column":0},"generated":{"line":1598,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1598,"column":0},"generated":{"line":1599,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1599,"column":0},"generated":{"line":1600,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1600,"column":0},"generated":{"line":1601,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1601,"column":0},"generated":{"line":1602,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1602,"column":0},"generated":{"line":1603,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1603,"column":0},"generated":{"line":1604,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1604,"column":0},"generated":{"line":1605,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1605,"column":0},"generated":{"line":1606,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1606,"column":0},"generated":{"line":1607,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1607,"column":0},"generated":{"line":1608,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1608,"column":0},"generated":{"line":1609,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1609,"column":0},"generated":{"line":1610,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1610,"column":0},"generated":{"line":1611,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1611,"column":0},"generated":{"line":1612,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1612,"column":0},"generated":{"line":1613,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1613,"column":0},"generated":{"line":1614,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1614,"column":0},"generated":{"line":1615,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1615,"column":0},"generated":{"line":1616,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1616,"column":0},"generated":{"line":1617,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1617,"column":0},"generated":{"line":1618,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1618,"column":0},"generated":{"line":1619,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1619,"column":0},"generated":{"line":1620,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1620,"column":0},"generated":{"line":1621,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1621,"column":0},"generated":{"line":1622,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1622,"column":0},"generated":{"line":1623,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1623,"column":0},"generated":{"line":1624,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1624,"column":0},"generated":{"line":1625,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1625,"column":0},"generated":{"line":1626,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1626,"column":0},"generated":{"line":1627,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1627,"column":0},"generated":{"line":1628,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1628,"column":0},"generated":{"line":1629,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1629,"column":0},"generated":{"line":1630,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1630,"column":0},"generated":{"line":1631,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1631,"column":0},"generated":{"line":1632,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1632,"column":0},"generated":{"line":1633,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1633,"column":0},"generated":{"line":1634,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1634,"column":0},"generated":{"line":1635,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1635,"column":0},"generated":{"line":1636,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1636,"column":0},"generated":{"line":1637,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1637,"column":0},"generated":{"line":1638,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1638,"column":0},"generated":{"line":1639,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1639,"column":0},"generated":{"line":1640,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1640,"column":0},"generated":{"line":1641,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1641,"column":0},"generated":{"line":1642,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1642,"column":0},"generated":{"line":1643,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1643,"column":0},"generated":{"line":1644,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1644,"column":0},"generated":{"line":1645,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1645,"column":0},"generated":{"line":1646,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1646,"column":0},"generated":{"line":1647,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1647,"column":0},"generated":{"line":1648,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1648,"column":0},"generated":{"line":1649,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1649,"column":0},"generated":{"line":1650,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1650,"column":0},"generated":{"line":1651,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1651,"column":0},"generated":{"line":1652,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1652,"column":0},"generated":{"line":1653,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1653,"column":0},"generated":{"line":1654,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1654,"column":0},"generated":{"line":1655,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1655,"column":0},"generated":{"line":1656,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1656,"column":0},"generated":{"line":1657,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1657,"column":0},"generated":{"line":1658,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1658,"column":0},"generated":{"line":1659,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1659,"column":0},"generated":{"line":1660,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1660,"column":0},"generated":{"line":1661,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1661,"column":0},"generated":{"line":1662,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1662,"column":0},"generated":{"line":1663,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1663,"column":0},"generated":{"line":1664,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1664,"column":0},"generated":{"line":1665,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1665,"column":0},"generated":{"line":1666,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1666,"column":0},"generated":{"line":1667,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1667,"column":0},"generated":{"line":1668,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1668,"column":0},"generated":{"line":1669,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1669,"column":0},"generated":{"line":1670,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1670,"column":0},"generated":{"line":1671,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1671,"column":0},"generated":{"line":1672,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1672,"column":0},"generated":{"line":1673,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1673,"column":0},"generated":{"line":1674,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1674,"column":0},"generated":{"line":1675,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1675,"column":0},"generated":{"line":1676,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1676,"column":0},"generated":{"line":1677,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1677,"column":0},"generated":{"line":1678,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1678,"column":0},"generated":{"line":1679,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1679,"column":0},"generated":{"line":1680,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1680,"column":0},"generated":{"line":1681,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1681,"column":0},"generated":{"line":1682,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1682,"column":0},"generated":{"line":1683,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1683,"column":0},"generated":{"line":1684,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1684,"column":0},"generated":{"line":1685,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1685,"column":0},"generated":{"line":1686,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1686,"column":0},"generated":{"line":1687,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1687,"column":0},"generated":{"line":1688,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1688,"column":0},"generated":{"line":1689,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1689,"column":0},"generated":{"line":1690,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1690,"column":0},"generated":{"line":1691,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1691,"column":0},"generated":{"line":1692,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1692,"column":0},"generated":{"line":1693,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1693,"column":0},"generated":{"line":1694,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1694,"column":0},"generated":{"line":1695,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1695,"column":0},"generated":{"line":1696,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1696,"column":0},"generated":{"line":1697,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1697,"column":0},"generated":{"line":1698,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1698,"column":0},"generated":{"line":1699,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1699,"column":0},"generated":{"line":1700,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1700,"column":0},"generated":{"line":1701,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1701,"column":0},"generated":{"line":1702,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1702,"column":0},"generated":{"line":1703,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1703,"column":0},"generated":{"line":1704,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1704,"column":0},"generated":{"line":1705,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1705,"column":0},"generated":{"line":1706,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1706,"column":0},"generated":{"line":1707,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1707,"column":0},"generated":{"line":1708,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1708,"column":0},"generated":{"line":1709,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1709,"column":0},"generated":{"line":1710,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1710,"column":0},"generated":{"line":1711,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1711,"column":0},"generated":{"line":1712,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1712,"column":0},"generated":{"line":1713,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1713,"column":0},"generated":{"line":1714,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1714,"column":0},"generated":{"line":1715,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1715,"column":0},"generated":{"line":1716,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1716,"column":0},"generated":{"line":1717,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1717,"column":0},"generated":{"line":1718,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1718,"column":0},"generated":{"line":1719,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1719,"column":0},"generated":{"line":1720,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1720,"column":0},"generated":{"line":1721,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1721,"column":0},"generated":{"line":1722,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1722,"column":0},"generated":{"line":1723,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1723,"column":0},"generated":{"line":1724,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1724,"column":0},"generated":{"line":1725,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1725,"column":0},"generated":{"line":1726,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1726,"column":0},"generated":{"line":1727,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1727,"column":0},"generated":{"line":1728,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1728,"column":0},"generated":{"line":1729,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1729,"column":0},"generated":{"line":1730,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1730,"column":0},"generated":{"line":1731,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1731,"column":0},"generated":{"line":1732,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1732,"column":0},"generated":{"line":1733,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1733,"column":0},"generated":{"line":1734,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1734,"column":0},"generated":{"line":1735,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1735,"column":0},"generated":{"line":1736,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1736,"column":0},"generated":{"line":1737,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1737,"column":0},"generated":{"line":1738,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1738,"column":0},"generated":{"line":1739,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1739,"column":0},"generated":{"line":1740,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1740,"column":0},"generated":{"line":1741,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1741,"column":0},"generated":{"line":1742,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1742,"column":0},"generated":{"line":1743,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1743,"column":0},"generated":{"line":1744,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1744,"column":0},"generated":{"line":1745,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1745,"column":0},"generated":{"line":1746,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1746,"column":0},"generated":{"line":1747,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1747,"column":0},"generated":{"line":1748,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1748,"column":0},"generated":{"line":1749,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1749,"column":0},"generated":{"line":1750,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1750,"column":0},"generated":{"line":1751,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1751,"column":0},"generated":{"line":1752,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1752,"column":0},"generated":{"line":1753,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1753,"column":0},"generated":{"line":1754,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1754,"column":0},"generated":{"line":1755,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1755,"column":0},"generated":{"line":1756,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1756,"column":0},"generated":{"line":1757,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1757,"column":0},"generated":{"line":1758,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1758,"column":0},"generated":{"line":1759,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1759,"column":0},"generated":{"line":1760,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1760,"column":0},"generated":{"line":1761,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1761,"column":0},"generated":{"line":1762,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1762,"column":0},"generated":{"line":1763,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1763,"column":0},"generated":{"line":1764,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1764,"column":0},"generated":{"line":1765,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1765,"column":0},"generated":{"line":1766,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1766,"column":0},"generated":{"line":1767,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1767,"column":0},"generated":{"line":1768,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1768,"column":0},"generated":{"line":1769,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1769,"column":0},"generated":{"line":1770,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1770,"column":0},"generated":{"line":1771,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1771,"column":0},"generated":{"line":1772,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1772,"column":0},"generated":{"line":1773,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1773,"column":0},"generated":{"line":1774,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1774,"column":0},"generated":{"line":1775,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1775,"column":0},"generated":{"line":1776,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1776,"column":0},"generated":{"line":1777,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1777,"column":0},"generated":{"line":1778,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1778,"column":0},"generated":{"line":1779,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1779,"column":0},"generated":{"line":1780,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1780,"column":0},"generated":{"line":1781,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1781,"column":0},"generated":{"line":1782,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1782,"column":0},"generated":{"line":1783,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1783,"column":0},"generated":{"line":1784,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1784,"column":0},"generated":{"line":1785,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1785,"column":0},"generated":{"line":1786,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1786,"column":0},"generated":{"line":1787,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1787,"column":0},"generated":{"line":1788,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1788,"column":0},"generated":{"line":1789,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1789,"column":0},"generated":{"line":1790,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1790,"column":0},"generated":{"line":1791,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1791,"column":0},"generated":{"line":1792,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1792,"column":0},"generated":{"line":1793,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1793,"column":0},"generated":{"line":1794,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1794,"column":0},"generated":{"line":1795,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1795,"column":0},"generated":{"line":1796,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1796,"column":0},"generated":{"line":1797,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1797,"column":0},"generated":{"line":1798,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1798,"column":0},"generated":{"line":1799,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1799,"column":0},"generated":{"line":1800,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1800,"column":0},"generated":{"line":1801,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1801,"column":0},"generated":{"line":1802,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1802,"column":0},"generated":{"line":1803,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1803,"column":0},"generated":{"line":1804,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1804,"column":0},"generated":{"line":1805,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1805,"column":0},"generated":{"line":1806,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1806,"column":0},"generated":{"line":1807,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1807,"column":0},"generated":{"line":1808,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1808,"column":0},"generated":{"line":1809,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1809,"column":0},"generated":{"line":1810,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1810,"column":0},"generated":{"line":1811,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1811,"column":0},"generated":{"line":1812,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1812,"column":0},"generated":{"line":1813,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1813,"column":0},"generated":{"line":1814,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1814,"column":0},"generated":{"line":1815,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1815,"column":0},"generated":{"line":1816,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1816,"column":0},"generated":{"line":1817,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1817,"column":0},"generated":{"line":1818,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1818,"column":0},"generated":{"line":1819,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1819,"column":0},"generated":{"line":1820,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1820,"column":0},"generated":{"line":1821,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1821,"column":0},"generated":{"line":1822,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1822,"column":0},"generated":{"line":1823,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1823,"column":0},"generated":{"line":1824,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1824,"column":0},"generated":{"line":1825,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1825,"column":0},"generated":{"line":1826,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1826,"column":0},"generated":{"line":1827,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1827,"column":0},"generated":{"line":1828,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1828,"column":0},"generated":{"line":1829,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1829,"column":0},"generated":{"line":1830,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1830,"column":0},"generated":{"line":1831,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1831,"column":0},"generated":{"line":1832,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1832,"column":0},"generated":{"line":1833,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1833,"column":0},"generated":{"line":1834,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1834,"column":0},"generated":{"line":1835,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1835,"column":0},"generated":{"line":1836,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1836,"column":0},"generated":{"line":1837,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1837,"column":0},"generated":{"line":1838,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1838,"column":0},"generated":{"line":1839,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1839,"column":0},"generated":{"line":1840,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1840,"column":0},"generated":{"line":1841,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1841,"column":0},"generated":{"line":1842,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1842,"column":0},"generated":{"line":1843,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1843,"column":0},"generated":{"line":1844,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1844,"column":0},"generated":{"line":1845,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1845,"column":0},"generated":{"line":1846,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1846,"column":0},"generated":{"line":1847,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1847,"column":0},"generated":{"line":1848,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1848,"column":0},"generated":{"line":1849,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1849,"column":0},"generated":{"line":1850,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1850,"column":0},"generated":{"line":1851,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1851,"column":0},"generated":{"line":1852,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1852,"column":0},"generated":{"line":1853,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1853,"column":0},"generated":{"line":1854,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1854,"column":0},"generated":{"line":1855,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1855,"column":0},"generated":{"line":1856,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1856,"column":0},"generated":{"line":1857,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1857,"column":0},"generated":{"line":1858,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1858,"column":0},"generated":{"line":1859,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1859,"column":0},"generated":{"line":1860,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1860,"column":0},"generated":{"line":1861,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1861,"column":0},"generated":{"line":1862,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1862,"column":0},"generated":{"line":1863,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1863,"column":0},"generated":{"line":1864,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1864,"column":0},"generated":{"line":1865,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1865,"column":0},"generated":{"line":1866,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1866,"column":0},"generated":{"line":1867,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1867,"column":0},"generated":{"line":1868,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1868,"column":0},"generated":{"line":1869,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1869,"column":0},"generated":{"line":1870,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1870,"column":0},"generated":{"line":1871,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1871,"column":0},"generated":{"line":1872,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1872,"column":0},"generated":{"line":1873,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1873,"column":0},"generated":{"line":1874,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1874,"column":0},"generated":{"line":1875,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1875,"column":0},"generated":{"line":1876,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1876,"column":0},"generated":{"line":1877,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1877,"column":0},"generated":{"line":1878,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1878,"column":0},"generated":{"line":1879,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1879,"column":0},"generated":{"line":1880,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1880,"column":0},"generated":{"line":1881,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1881,"column":0},"generated":{"line":1882,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1882,"column":0},"generated":{"line":1883,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1883,"column":0},"generated":{"line":1884,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1884,"column":0},"generated":{"line":1885,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1885,"column":0},"generated":{"line":1886,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1886,"column":0},"generated":{"line":1887,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1887,"column":0},"generated":{"line":1888,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1888,"column":0},"generated":{"line":1889,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1889,"column":0},"generated":{"line":1890,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1890,"column":0},"generated":{"line":1891,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1891,"column":0},"generated":{"line":1892,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1892,"column":0},"generated":{"line":1893,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1893,"column":0},"generated":{"line":1894,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1894,"column":0},"generated":{"line":1895,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1895,"column":0},"generated":{"line":1896,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1896,"column":0},"generated":{"line":1897,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1897,"column":0},"generated":{"line":1898,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1898,"column":0},"generated":{"line":1899,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1899,"column":0},"generated":{"line":1900,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1900,"column":0},"generated":{"line":1901,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1901,"column":0},"generated":{"line":1902,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1902,"column":0},"generated":{"line":1903,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1903,"column":0},"generated":{"line":1904,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1904,"column":0},"generated":{"line":1905,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1905,"column":0},"generated":{"line":1906,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1906,"column":0},"generated":{"line":1907,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1907,"column":0},"generated":{"line":1908,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1908,"column":0},"generated":{"line":1909,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1909,"column":0},"generated":{"line":1910,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1910,"column":0},"generated":{"line":1911,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1911,"column":0},"generated":{"line":1912,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1912,"column":0},"generated":{"line":1913,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1913,"column":0},"generated":{"line":1914,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1914,"column":0},"generated":{"line":1915,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1915,"column":0},"generated":{"line":1916,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1916,"column":0},"generated":{"line":1917,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1917,"column":0},"generated":{"line":1918,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1918,"column":0},"generated":{"line":1919,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1919,"column":0},"generated":{"line":1920,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1920,"column":0},"generated":{"line":1921,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1921,"column":0},"generated":{"line":1922,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1922,"column":0},"generated":{"line":1923,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1923,"column":0},"generated":{"line":1924,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1924,"column":0},"generated":{"line":1925,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1925,"column":0},"generated":{"line":1926,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1926,"column":0},"generated":{"line":1927,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1927,"column":0},"generated":{"line":1928,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1928,"column":0},"generated":{"line":1929,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1929,"column":0},"generated":{"line":1930,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1930,"column":0},"generated":{"line":1931,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1931,"column":0},"generated":{"line":1932,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1932,"column":0},"generated":{"line":1933,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1933,"column":0},"generated":{"line":1934,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1934,"column":0},"generated":{"line":1935,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1935,"column":0},"generated":{"line":1936,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1936,"column":0},"generated":{"line":1937,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1937,"column":0},"generated":{"line":1938,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1938,"column":0},"generated":{"line":1939,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1939,"column":0},"generated":{"line":1940,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1940,"column":0},"generated":{"line":1941,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1941,"column":0},"generated":{"line":1942,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1942,"column":0},"generated":{"line":1943,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1943,"column":0},"generated":{"line":1944,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1944,"column":0},"generated":{"line":1945,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1945,"column":0},"generated":{"line":1946,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1946,"column":0},"generated":{"line":1947,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1947,"column":0},"generated":{"line":1948,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1948,"column":0},"generated":{"line":1949,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1949,"column":0},"generated":{"line":1950,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1950,"column":0},"generated":{"line":1951,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1951,"column":0},"generated":{"line":1952,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1952,"column":0},"generated":{"line":1953,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1953,"column":0},"generated":{"line":1954,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1954,"column":0},"generated":{"line":1955,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1955,"column":0},"generated":{"line":1956,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1956,"column":0},"generated":{"line":1957,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1957,"column":0},"generated":{"line":1958,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1958,"column":0},"generated":{"line":1959,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1959,"column":0},"generated":{"line":1960,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1960,"column":0},"generated":{"line":1961,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1961,"column":0},"generated":{"line":1962,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1962,"column":0},"generated":{"line":1963,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1963,"column":0},"generated":{"line":1964,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1964,"column":0},"generated":{"line":1965,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1965,"column":0},"generated":{"line":1966,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1966,"column":0},"generated":{"line":1967,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1967,"column":0},"generated":{"line":1968,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1968,"column":0},"generated":{"line":1969,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1969,"column":0},"generated":{"line":1970,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1970,"column":0},"generated":{"line":1971,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1971,"column":0},"generated":{"line":1972,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1972,"column":0},"generated":{"line":1973,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1973,"column":0},"generated":{"line":1974,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1974,"column":0},"generated":{"line":1975,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1975,"column":0},"generated":{"line":1976,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1976,"column":0},"generated":{"line":1977,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1977,"column":0},"generated":{"line":1978,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1978,"column":0},"generated":{"line":1979,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1979,"column":0},"generated":{"line":1980,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1980,"column":0},"generated":{"line":1981,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1981,"column":0},"generated":{"line":1982,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1982,"column":0},"generated":{"line":1983,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1983,"column":0},"generated":{"line":1984,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1984,"column":0},"generated":{"line":1985,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1985,"column":0},"generated":{"line":1986,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1986,"column":0},"generated":{"line":1987,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1987,"column":0},"generated":{"line":1988,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1988,"column":0},"generated":{"line":1989,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1989,"column":0},"generated":{"line":1990,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1990,"column":0},"generated":{"line":1991,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1991,"column":0},"generated":{"line":1992,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1992,"column":0},"generated":{"line":1993,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1993,"column":0},"generated":{"line":1994,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1994,"column":0},"generated":{"line":1995,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1995,"column":0},"generated":{"line":1996,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1996,"column":0},"generated":{"line":1997,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1997,"column":0},"generated":{"line":1998,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1998,"column":0},"generated":{"line":1999,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":1999,"column":0},"generated":{"line":2000,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2000,"column":0},"generated":{"line":2001,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2001,"column":0},"generated":{"line":2002,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2002,"column":0},"generated":{"line":2003,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2003,"column":0},"generated":{"line":2004,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2004,"column":0},"generated":{"line":2005,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2005,"column":0},"generated":{"line":2006,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2006,"column":0},"generated":{"line":2007,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2007,"column":0},"generated":{"line":2008,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2008,"column":0},"generated":{"line":2009,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2009,"column":0},"generated":{"line":2010,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2010,"column":0},"generated":{"line":2011,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2011,"column":0},"generated":{"line":2012,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2012,"column":0},"generated":{"line":2013,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2013,"column":0},"generated":{"line":2014,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2014,"column":0},"generated":{"line":2015,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2015,"column":0},"generated":{"line":2016,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2016,"column":0},"generated":{"line":2017,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2017,"column":0},"generated":{"line":2018,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2018,"column":0},"generated":{"line":2019,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2019,"column":0},"generated":{"line":2020,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2020,"column":0},"generated":{"line":2021,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2021,"column":0},"generated":{"line":2022,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2022,"column":0},"generated":{"line":2023,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2023,"column":0},"generated":{"line":2024,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2024,"column":0},"generated":{"line":2025,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2025,"column":0},"generated":{"line":2026,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2026,"column":0},"generated":{"line":2027,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2027,"column":0},"generated":{"line":2028,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2028,"column":0},"generated":{"line":2029,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2029,"column":0},"generated":{"line":2030,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2030,"column":0},"generated":{"line":2031,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2031,"column":0},"generated":{"line":2032,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2032,"column":0},"generated":{"line":2033,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2033,"column":0},"generated":{"line":2034,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2034,"column":0},"generated":{"line":2035,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2035,"column":0},"generated":{"line":2036,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2036,"column":0},"generated":{"line":2037,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2037,"column":0},"generated":{"line":2038,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2038,"column":0},"generated":{"line":2039,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2039,"column":0},"generated":{"line":2040,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2040,"column":0},"generated":{"line":2041,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2041,"column":0},"generated":{"line":2042,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2042,"column":0},"generated":{"line":2043,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2043,"column":0},"generated":{"line":2044,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2044,"column":0},"generated":{"line":2045,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2045,"column":0},"generated":{"line":2046,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2046,"column":0},"generated":{"line":2047,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2047,"column":0},"generated":{"line":2048,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2048,"column":0},"generated":{"line":2049,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2049,"column":0},"generated":{"line":2050,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2050,"column":0},"generated":{"line":2051,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2051,"column":0},"generated":{"line":2052,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2052,"column":0},"generated":{"line":2053,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2053,"column":0},"generated":{"line":2054,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2054,"column":0},"generated":{"line":2055,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2055,"column":0},"generated":{"line":2056,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2056,"column":0},"generated":{"line":2057,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2057,"column":0},"generated":{"line":2058,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2058,"column":0},"generated":{"line":2059,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2059,"column":0},"generated":{"line":2060,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2060,"column":0},"generated":{"line":2061,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2061,"column":0},"generated":{"line":2062,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2062,"column":0},"generated":{"line":2063,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2063,"column":0},"generated":{"line":2064,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2064,"column":0},"generated":{"line":2065,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2065,"column":0},"generated":{"line":2066,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2066,"column":0},"generated":{"line":2067,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2067,"column":0},"generated":{"line":2068,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2068,"column":0},"generated":{"line":2069,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2069,"column":0},"generated":{"line":2070,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2070,"column":0},"generated":{"line":2071,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2071,"column":0},"generated":{"line":2072,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2072,"column":0},"generated":{"line":2073,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2073,"column":0},"generated":{"line":2074,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2074,"column":0},"generated":{"line":2075,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2075,"column":0},"generated":{"line":2076,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2076,"column":0},"generated":{"line":2077,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2077,"column":0},"generated":{"line":2078,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2078,"column":0},"generated":{"line":2079,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2079,"column":0},"generated":{"line":2080,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2080,"column":0},"generated":{"line":2081,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2081,"column":0},"generated":{"line":2082,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2082,"column":0},"generated":{"line":2083,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2083,"column":0},"generated":{"line":2084,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2084,"column":0},"generated":{"line":2085,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2085,"column":0},"generated":{"line":2086,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2086,"column":0},"generated":{"line":2087,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2087,"column":0},"generated":{"line":2088,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2088,"column":0},"generated":{"line":2089,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2089,"column":0},"generated":{"line":2090,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2090,"column":0},"generated":{"line":2091,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2091,"column":0},"generated":{"line":2092,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2092,"column":0},"generated":{"line":2093,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2093,"column":0},"generated":{"line":2094,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2094,"column":0},"generated":{"line":2095,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2095,"column":0},"generated":{"line":2096,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2096,"column":0},"generated":{"line":2097,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2097,"column":0},"generated":{"line":2098,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2098,"column":0},"generated":{"line":2099,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2099,"column":0},"generated":{"line":2100,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2100,"column":0},"generated":{"line":2101,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2101,"column":0},"generated":{"line":2102,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2102,"column":0},"generated":{"line":2103,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2103,"column":0},"generated":{"line":2104,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2104,"column":0},"generated":{"line":2105,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2105,"column":0},"generated":{"line":2106,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2106,"column":0},"generated":{"line":2107,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2107,"column":0},"generated":{"line":2108,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2108,"column":0},"generated":{"line":2109,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2109,"column":0},"generated":{"line":2110,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2110,"column":0},"generated":{"line":2111,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2111,"column":0},"generated":{"line":2112,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2112,"column":0},"generated":{"line":2113,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2113,"column":0},"generated":{"line":2114,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2114,"column":0},"generated":{"line":2115,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2115,"column":0},"generated":{"line":2116,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2116,"column":0},"generated":{"line":2117,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2117,"column":0},"generated":{"line":2118,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2118,"column":0},"generated":{"line":2119,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2119,"column":0},"generated":{"line":2120,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2120,"column":0},"generated":{"line":2121,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2121,"column":0},"generated":{"line":2122,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2122,"column":0},"generated":{"line":2123,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2123,"column":0},"generated":{"line":2124,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2124,"column":0},"generated":{"line":2125,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2125,"column":0},"generated":{"line":2126,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2126,"column":0},"generated":{"line":2127,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2127,"column":0},"generated":{"line":2128,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2128,"column":0},"generated":{"line":2129,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2129,"column":0},"generated":{"line":2130,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2130,"column":0},"generated":{"line":2131,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2131,"column":0},"generated":{"line":2132,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2132,"column":0},"generated":{"line":2133,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2133,"column":0},"generated":{"line":2134,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2134,"column":0},"generated":{"line":2135,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2135,"column":0},"generated":{"line":2136,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2136,"column":0},"generated":{"line":2137,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2137,"column":0},"generated":{"line":2138,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2138,"column":0},"generated":{"line":2139,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2139,"column":0},"generated":{"line":2140,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2140,"column":0},"generated":{"line":2141,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2141,"column":0},"generated":{"line":2142,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2142,"column":0},"generated":{"line":2143,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2143,"column":0},"generated":{"line":2144,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2144,"column":0},"generated":{"line":2145,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2145,"column":0},"generated":{"line":2146,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2146,"column":0},"generated":{"line":2147,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2147,"column":0},"generated":{"line":2148,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2148,"column":0},"generated":{"line":2149,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2149,"column":0},"generated":{"line":2150,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2150,"column":0},"generated":{"line":2151,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2151,"column":0},"generated":{"line":2152,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2152,"column":0},"generated":{"line":2153,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2153,"column":0},"generated":{"line":2154,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2154,"column":0},"generated":{"line":2155,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2155,"column":0},"generated":{"line":2156,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2156,"column":0},"generated":{"line":2157,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2157,"column":0},"generated":{"line":2158,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2158,"column":0},"generated":{"line":2159,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2159,"column":0},"generated":{"line":2160,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2160,"column":0},"generated":{"line":2161,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2161,"column":0},"generated":{"line":2162,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2162,"column":0},"generated":{"line":2163,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2163,"column":0},"generated":{"line":2164,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2164,"column":0},"generated":{"line":2165,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2165,"column":0},"generated":{"line":2166,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2166,"column":0},"generated":{"line":2167,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2167,"column":0},"generated":{"line":2168,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2168,"column":0},"generated":{"line":2169,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2169,"column":0},"generated":{"line":2170,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2170,"column":0},"generated":{"line":2171,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2171,"column":0},"generated":{"line":2172,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2172,"column":0},"generated":{"line":2173,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2173,"column":0},"generated":{"line":2174,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2174,"column":0},"generated":{"line":2175,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2175,"column":0},"generated":{"line":2176,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2176,"column":0},"generated":{"line":2177,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2177,"column":0},"generated":{"line":2178,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2178,"column":0},"generated":{"line":2179,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2179,"column":0},"generated":{"line":2180,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2180,"column":0},"generated":{"line":2181,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2181,"column":0},"generated":{"line":2182,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2182,"column":0},"generated":{"line":2183,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2183,"column":0},"generated":{"line":2184,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2184,"column":0},"generated":{"line":2185,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2185,"column":0},"generated":{"line":2186,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2186,"column":0},"generated":{"line":2187,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2187,"column":0},"generated":{"line":2188,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2188,"column":0},"generated":{"line":2189,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2189,"column":0},"generated":{"line":2190,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2190,"column":0},"generated":{"line":2191,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2191,"column":0},"generated":{"line":2192,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2192,"column":0},"generated":{"line":2193,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2193,"column":0},"generated":{"line":2194,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2194,"column":0},"generated":{"line":2195,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2195,"column":0},"generated":{"line":2196,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2196,"column":0},"generated":{"line":2197,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2197,"column":0},"generated":{"line":2198,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2198,"column":0},"generated":{"line":2199,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2199,"column":0},"generated":{"line":2200,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2200,"column":0},"generated":{"line":2201,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2201,"column":0},"generated":{"line":2202,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2202,"column":0},"generated":{"line":2203,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2203,"column":0},"generated":{"line":2204,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2204,"column":0},"generated":{"line":2205,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2205,"column":0},"generated":{"line":2206,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2206,"column":0},"generated":{"line":2207,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2207,"column":0},"generated":{"line":2208,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2208,"column":0},"generated":{"line":2209,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2209,"column":0},"generated":{"line":2210,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2210,"column":0},"generated":{"line":2211,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2211,"column":0},"generated":{"line":2212,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2212,"column":0},"generated":{"line":2213,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2213,"column":0},"generated":{"line":2214,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2214,"column":0},"generated":{"line":2215,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2215,"column":0},"generated":{"line":2216,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2216,"column":0},"generated":{"line":2217,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2217,"column":0},"generated":{"line":2218,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2218,"column":0},"generated":{"line":2219,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2219,"column":0},"generated":{"line":2220,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2220,"column":0},"generated":{"line":2221,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2221,"column":0},"generated":{"line":2222,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2222,"column":0},"generated":{"line":2223,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2223,"column":0},"generated":{"line":2224,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2224,"column":0},"generated":{"line":2225,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2225,"column":0},"generated":{"line":2226,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2226,"column":0},"generated":{"line":2227,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2227,"column":0},"generated":{"line":2228,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2228,"column":0},"generated":{"line":2229,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2229,"column":0},"generated":{"line":2230,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2230,"column":0},"generated":{"line":2231,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2231,"column":0},"generated":{"line":2232,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2232,"column":0},"generated":{"line":2233,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2233,"column":0},"generated":{"line":2234,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2234,"column":0},"generated":{"line":2235,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2235,"column":0},"generated":{"line":2236,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2236,"column":0},"generated":{"line":2237,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2237,"column":0},"generated":{"line":2238,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2238,"column":0},"generated":{"line":2239,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2239,"column":0},"generated":{"line":2240,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2240,"column":0},"generated":{"line":2241,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2241,"column":0},"generated":{"line":2242,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2242,"column":0},"generated":{"line":2243,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2243,"column":0},"generated":{"line":2244,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2244,"column":0},"generated":{"line":2245,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2245,"column":0},"generated":{"line":2246,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2246,"column":0},"generated":{"line":2247,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2247,"column":0},"generated":{"line":2248,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2248,"column":0},"generated":{"line":2249,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2249,"column":0},"generated":{"line":2250,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2250,"column":0},"generated":{"line":2251,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2251,"column":0},"generated":{"line":2252,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2252,"column":0},"generated":{"line":2253,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2253,"column":0},"generated":{"line":2254,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2254,"column":0},"generated":{"line":2255,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2255,"column":0},"generated":{"line":2256,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2256,"column":0},"generated":{"line":2257,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2257,"column":0},"generated":{"line":2258,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2258,"column":0},"generated":{"line":2259,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2259,"column":0},"generated":{"line":2260,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2260,"column":0},"generated":{"line":2261,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2261,"column":0},"generated":{"line":2262,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2262,"column":0},"generated":{"line":2263,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2263,"column":0},"generated":{"line":2264,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2264,"column":0},"generated":{"line":2265,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2265,"column":0},"generated":{"line":2266,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2266,"column":0},"generated":{"line":2267,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2267,"column":0},"generated":{"line":2268,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2268,"column":0},"generated":{"line":2269,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2269,"column":0},"generated":{"line":2270,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2270,"column":0},"generated":{"line":2271,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2271,"column":0},"generated":{"line":2272,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2272,"column":0},"generated":{"line":2273,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2273,"column":0},"generated":{"line":2274,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2274,"column":0},"generated":{"line":2275,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2275,"column":0},"generated":{"line":2276,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2276,"column":0},"generated":{"line":2277,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2277,"column":0},"generated":{"line":2278,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2278,"column":0},"generated":{"line":2279,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2279,"column":0},"generated":{"line":2280,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2280,"column":0},"generated":{"line":2281,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2281,"column":0},"generated":{"line":2282,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2282,"column":0},"generated":{"line":2283,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2283,"column":0},"generated":{"line":2284,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2284,"column":0},"generated":{"line":2285,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2285,"column":0},"generated":{"line":2286,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2286,"column":0},"generated":{"line":2287,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2287,"column":0},"generated":{"line":2288,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2288,"column":0},"generated":{"line":2289,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2289,"column":0},"generated":{"line":2290,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2290,"column":0},"generated":{"line":2291,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2291,"column":0},"generated":{"line":2292,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2292,"column":0},"generated":{"line":2293,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2293,"column":0},"generated":{"line":2294,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2294,"column":0},"generated":{"line":2295,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2295,"column":0},"generated":{"line":2296,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2296,"column":0},"generated":{"line":2297,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2297,"column":0},"generated":{"line":2298,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2298,"column":0},"generated":{"line":2299,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2299,"column":0},"generated":{"line":2300,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2300,"column":0},"generated":{"line":2301,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2301,"column":0},"generated":{"line":2302,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2302,"column":0},"generated":{"line":2303,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2303,"column":0},"generated":{"line":2304,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2304,"column":0},"generated":{"line":2305,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2305,"column":0},"generated":{"line":2306,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2306,"column":0},"generated":{"line":2307,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2307,"column":0},"generated":{"line":2308,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2308,"column":0},"generated":{"line":2309,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2309,"column":0},"generated":{"line":2310,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2310,"column":0},"generated":{"line":2311,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2311,"column":0},"generated":{"line":2312,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2312,"column":0},"generated":{"line":2313,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2313,"column":0},"generated":{"line":2314,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2314,"column":0},"generated":{"line":2315,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2315,"column":0},"generated":{"line":2316,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2316,"column":0},"generated":{"line":2317,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2317,"column":0},"generated":{"line":2318,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2318,"column":0},"generated":{"line":2319,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2319,"column":0},"generated":{"line":2320,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2320,"column":0},"generated":{"line":2321,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2321,"column":0},"generated":{"line":2322,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2322,"column":0},"generated":{"line":2323,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2323,"column":0},"generated":{"line":2324,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2324,"column":0},"generated":{"line":2325,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2325,"column":0},"generated":{"line":2326,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2326,"column":0},"generated":{"line":2327,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2327,"column":0},"generated":{"line":2328,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2328,"column":0},"generated":{"line":2329,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2329,"column":0},"generated":{"line":2330,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2330,"column":0},"generated":{"line":2331,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2331,"column":0},"generated":{"line":2332,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2332,"column":0},"generated":{"line":2333,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2333,"column":0},"generated":{"line":2334,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2334,"column":0},"generated":{"line":2335,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2335,"column":0},"generated":{"line":2336,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2336,"column":0},"generated":{"line":2337,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2337,"column":0},"generated":{"line":2338,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2338,"column":0},"generated":{"line":2339,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2339,"column":0},"generated":{"line":2340,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2340,"column":0},"generated":{"line":2341,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2341,"column":0},"generated":{"line":2342,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2342,"column":0},"generated":{"line":2343,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2343,"column":0},"generated":{"line":2344,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2344,"column":0},"generated":{"line":2345,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2345,"column":0},"generated":{"line":2346,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2346,"column":0},"generated":{"line":2347,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2347,"column":0},"generated":{"line":2348,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2348,"column":0},"generated":{"line":2349,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2349,"column":0},"generated":{"line":2350,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2350,"column":0},"generated":{"line":2351,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2351,"column":0},"generated":{"line":2352,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2352,"column":0},"generated":{"line":2353,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2353,"column":0},"generated":{"line":2354,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2354,"column":0},"generated":{"line":2355,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2355,"column":0},"generated":{"line":2356,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2356,"column":0},"generated":{"line":2357,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2357,"column":0},"generated":{"line":2358,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2358,"column":0},"generated":{"line":2359,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2359,"column":0},"generated":{"line":2360,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2360,"column":0},"generated":{"line":2361,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2361,"column":0},"generated":{"line":2362,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2362,"column":0},"generated":{"line":2363,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2363,"column":0},"generated":{"line":2364,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2364,"column":0},"generated":{"line":2365,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2365,"column":0},"generated":{"line":2366,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2366,"column":0},"generated":{"line":2367,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2367,"column":0},"generated":{"line":2368,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2368,"column":0},"generated":{"line":2369,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2369,"column":0},"generated":{"line":2370,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2370,"column":0},"generated":{"line":2371,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2371,"column":0},"generated":{"line":2372,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2372,"column":0},"generated":{"line":2373,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2373,"column":0},"generated":{"line":2374,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2374,"column":0},"generated":{"line":2375,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2375,"column":0},"generated":{"line":2376,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2376,"column":0},"generated":{"line":2377,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2377,"column":0},"generated":{"line":2378,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2378,"column":0},"generated":{"line":2379,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2379,"column":0},"generated":{"line":2380,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2380,"column":0},"generated":{"line":2381,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2381,"column":0},"generated":{"line":2382,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2382,"column":0},"generated":{"line":2383,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2383,"column":0},"generated":{"line":2384,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2384,"column":0},"generated":{"line":2385,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2385,"column":0},"generated":{"line":2386,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2386,"column":0},"generated":{"line":2387,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2387,"column":0},"generated":{"line":2388,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2388,"column":0},"generated":{"line":2389,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2389,"column":0},"generated":{"line":2390,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2390,"column":0},"generated":{"line":2391,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2391,"column":0},"generated":{"line":2392,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2392,"column":0},"generated":{"line":2393,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2393,"column":0},"generated":{"line":2394,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2394,"column":0},"generated":{"line":2395,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2395,"column":0},"generated":{"line":2396,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2396,"column":0},"generated":{"line":2397,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2397,"column":0},"generated":{"line":2398,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2398,"column":0},"generated":{"line":2399,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2399,"column":0},"generated":{"line":2400,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2400,"column":0},"generated":{"line":2401,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2401,"column":0},"generated":{"line":2402,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2402,"column":0},"generated":{"line":2403,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2403,"column":0},"generated":{"line":2404,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2404,"column":0},"generated":{"line":2405,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2405,"column":0},"generated":{"line":2406,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2406,"column":0},"generated":{"line":2407,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2407,"column":0},"generated":{"line":2408,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2408,"column":0},"generated":{"line":2409,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2409,"column":0},"generated":{"line":2410,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2410,"column":0},"generated":{"line":2411,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2411,"column":0},"generated":{"line":2412,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2412,"column":0},"generated":{"line":2413,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2413,"column":0},"generated":{"line":2414,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2414,"column":0},"generated":{"line":2415,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2415,"column":0},"generated":{"line":2416,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2416,"column":0},"generated":{"line":2417,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2417,"column":0},"generated":{"line":2418,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2418,"column":0},"generated":{"line":2419,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2419,"column":0},"generated":{"line":2420,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2420,"column":0},"generated":{"line":2421,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2421,"column":0},"generated":{"line":2422,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2422,"column":0},"generated":{"line":2423,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2423,"column":0},"generated":{"line":2424,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2424,"column":0},"generated":{"line":2425,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2425,"column":0},"generated":{"line":2426,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2426,"column":0},"generated":{"line":2427,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2427,"column":0},"generated":{"line":2428,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2428,"column":0},"generated":{"line":2429,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2429,"column":0},"generated":{"line":2430,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2430,"column":0},"generated":{"line":2431,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2431,"column":0},"generated":{"line":2432,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2432,"column":0},"generated":{"line":2433,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2433,"column":0},"generated":{"line":2434,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2434,"column":0},"generated":{"line":2435,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2435,"column":0},"generated":{"line":2436,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2436,"column":0},"generated":{"line":2437,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2437,"column":0},"generated":{"line":2438,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2438,"column":0},"generated":{"line":2439,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2439,"column":0},"generated":{"line":2440,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2440,"column":0},"generated":{"line":2441,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2441,"column":0},"generated":{"line":2442,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2442,"column":0},"generated":{"line":2443,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2443,"column":0},"generated":{"line":2444,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2444,"column":0},"generated":{"line":2445,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2445,"column":0},"generated":{"line":2446,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2446,"column":0},"generated":{"line":2447,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2447,"column":0},"generated":{"line":2448,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2448,"column":0},"generated":{"line":2449,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2449,"column":0},"generated":{"line":2450,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2450,"column":0},"generated":{"line":2451,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2451,"column":0},"generated":{"line":2452,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2452,"column":0},"generated":{"line":2453,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2453,"column":0},"generated":{"line":2454,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2454,"column":0},"generated":{"line":2455,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2455,"column":0},"generated":{"line":2456,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2456,"column":0},"generated":{"line":2457,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2457,"column":0},"generated":{"line":2458,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2458,"column":0},"generated":{"line":2459,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2459,"column":0},"generated":{"line":2460,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2460,"column":0},"generated":{"line":2461,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2461,"column":0},"generated":{"line":2462,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2462,"column":0},"generated":{"line":2463,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2463,"column":0},"generated":{"line":2464,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2464,"column":0},"generated":{"line":2465,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2465,"column":0},"generated":{"line":2466,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2466,"column":0},"generated":{"line":2467,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2467,"column":0},"generated":{"line":2468,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2468,"column":0},"generated":{"line":2469,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2469,"column":0},"generated":{"line":2470,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2470,"column":0},"generated":{"line":2471,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2471,"column":0},"generated":{"line":2472,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2472,"column":0},"generated":{"line":2473,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2473,"column":0},"generated":{"line":2474,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2474,"column":0},"generated":{"line":2475,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2475,"column":0},"generated":{"line":2476,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2476,"column":0},"generated":{"line":2477,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2477,"column":0},"generated":{"line":2478,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2478,"column":0},"generated":{"line":2479,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2479,"column":0},"generated":{"line":2480,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2480,"column":0},"generated":{"line":2481,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2481,"column":0},"generated":{"line":2482,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2482,"column":0},"generated":{"line":2483,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2483,"column":0},"generated":{"line":2484,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2484,"column":0},"generated":{"line":2485,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2485,"column":0},"generated":{"line":2486,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2486,"column":0},"generated":{"line":2487,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2487,"column":0},"generated":{"line":2488,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2488,"column":0},"generated":{"line":2489,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2489,"column":0},"generated":{"line":2490,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2490,"column":0},"generated":{"line":2491,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2491,"column":0},"generated":{"line":2492,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2492,"column":0},"generated":{"line":2493,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2493,"column":0},"generated":{"line":2494,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2494,"column":0},"generated":{"line":2495,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2495,"column":0},"generated":{"line":2496,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2496,"column":0},"generated":{"line":2497,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2497,"column":0},"generated":{"line":2498,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2498,"column":0},"generated":{"line":2499,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2499,"column":0},"generated":{"line":2500,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2500,"column":0},"generated":{"line":2501,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2501,"column":0},"generated":{"line":2502,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2502,"column":0},"generated":{"line":2503,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2503,"column":0},"generated":{"line":2504,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2504,"column":0},"generated":{"line":2505,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2505,"column":0},"generated":{"line":2506,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2506,"column":0},"generated":{"line":2507,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2507,"column":0},"generated":{"line":2508,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2508,"column":0},"generated":{"line":2509,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2509,"column":0},"generated":{"line":2510,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2510,"column":0},"generated":{"line":2511,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2511,"column":0},"generated":{"line":2512,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2512,"column":0},"generated":{"line":2513,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2513,"column":0},"generated":{"line":2514,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2514,"column":0},"generated":{"line":2515,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2515,"column":0},"generated":{"line":2516,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2516,"column":0},"generated":{"line":2517,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2517,"column":0},"generated":{"line":2518,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2518,"column":0},"generated":{"line":2519,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2519,"column":0},"generated":{"line":2520,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2520,"column":0},"generated":{"line":2521,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2521,"column":0},"generated":{"line":2522,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2522,"column":0},"generated":{"line":2523,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2523,"column":0},"generated":{"line":2524,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2524,"column":0},"generated":{"line":2525,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2525,"column":0},"generated":{"line":2526,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2526,"column":0},"generated":{"line":2527,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2527,"column":0},"generated":{"line":2528,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2528,"column":0},"generated":{"line":2529,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2529,"column":0},"generated":{"line":2530,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2530,"column":0},"generated":{"line":2531,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2531,"column":0},"generated":{"line":2532,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2532,"column":0},"generated":{"line":2533,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2533,"column":0},"generated":{"line":2534,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2534,"column":0},"generated":{"line":2535,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2535,"column":0},"generated":{"line":2536,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2536,"column":0},"generated":{"line":2537,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2537,"column":0},"generated":{"line":2538,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2538,"column":0},"generated":{"line":2539,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2539,"column":0},"generated":{"line":2540,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2540,"column":0},"generated":{"line":2541,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2541,"column":0},"generated":{"line":2542,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2542,"column":0},"generated":{"line":2543,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2543,"column":0},"generated":{"line":2544,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2544,"column":0},"generated":{"line":2545,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2545,"column":0},"generated":{"line":2546,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2546,"column":0},"generated":{"line":2547,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2547,"column":0},"generated":{"line":2548,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2548,"column":0},"generated":{"line":2549,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2549,"column":0},"generated":{"line":2550,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2550,"column":0},"generated":{"line":2551,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2551,"column":0},"generated":{"line":2552,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2552,"column":0},"generated":{"line":2553,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2553,"column":0},"generated":{"line":2554,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2554,"column":0},"generated":{"line":2555,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2555,"column":0},"generated":{"line":2556,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2556,"column":0},"generated":{"line":2557,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2557,"column":0},"generated":{"line":2558,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2558,"column":0},"generated":{"line":2559,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2559,"column":0},"generated":{"line":2560,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2560,"column":0},"generated":{"line":2561,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2561,"column":0},"generated":{"line":2562,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2562,"column":0},"generated":{"line":2563,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2563,"column":0},"generated":{"line":2564,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2564,"column":0},"generated":{"line":2565,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2565,"column":0},"generated":{"line":2566,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2566,"column":0},"generated":{"line":2567,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2567,"column":0},"generated":{"line":2568,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2568,"column":0},"generated":{"line":2569,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2569,"column":0},"generated":{"line":2570,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2570,"column":0},"generated":{"line":2571,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2571,"column":0},"generated":{"line":2572,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2572,"column":0},"generated":{"line":2573,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2573,"column":0},"generated":{"line":2574,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2574,"column":0},"generated":{"line":2575,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2575,"column":0},"generated":{"line":2576,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2576,"column":0},"generated":{"line":2577,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2577,"column":0},"generated":{"line":2578,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2578,"column":0},"generated":{"line":2579,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2579,"column":0},"generated":{"line":2580,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2580,"column":0},"generated":{"line":2581,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2581,"column":0},"generated":{"line":2582,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2582,"column":0},"generated":{"line":2583,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2583,"column":0},"generated":{"line":2584,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2584,"column":0},"generated":{"line":2585,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2585,"column":0},"generated":{"line":2586,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2586,"column":0},"generated":{"line":2587,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2587,"column":0},"generated":{"line":2588,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2588,"column":0},"generated":{"line":2589,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2589,"column":0},"generated":{"line":2590,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2590,"column":0},"generated":{"line":2591,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2591,"column":0},"generated":{"line":2592,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2592,"column":0},"generated":{"line":2593,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2593,"column":0},"generated":{"line":2594,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2594,"column":0},"generated":{"line":2595,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2595,"column":0},"generated":{"line":2596,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2596,"column":0},"generated":{"line":2597,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2597,"column":0},"generated":{"line":2598,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2598,"column":0},"generated":{"line":2599,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2599,"column":0},"generated":{"line":2600,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2600,"column":0},"generated":{"line":2601,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2601,"column":0},"generated":{"line":2602,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2602,"column":0},"generated":{"line":2603,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2603,"column":0},"generated":{"line":2604,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2604,"column":0},"generated":{"line":2605,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2605,"column":0},"generated":{"line":2606,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2606,"column":0},"generated":{"line":2607,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2607,"column":0},"generated":{"line":2608,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2608,"column":0},"generated":{"line":2609,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2609,"column":0},"generated":{"line":2610,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2610,"column":0},"generated":{"line":2611,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2611,"column":0},"generated":{"line":2612,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2612,"column":0},"generated":{"line":2613,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2613,"column":0},"generated":{"line":2614,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2614,"column":0},"generated":{"line":2615,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2615,"column":0},"generated":{"line":2616,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2616,"column":0},"generated":{"line":2617,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2617,"column":0},"generated":{"line":2618,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2618,"column":0},"generated":{"line":2619,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2619,"column":0},"generated":{"line":2620,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2620,"column":0},"generated":{"line":2621,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2621,"column":0},"generated":{"line":2622,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2622,"column":0},"generated":{"line":2623,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2623,"column":0},"generated":{"line":2624,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2624,"column":0},"generated":{"line":2625,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2625,"column":0},"generated":{"line":2626,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2626,"column":0},"generated":{"line":2627,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2627,"column":0},"generated":{"line":2628,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2628,"column":0},"generated":{"line":2629,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2629,"column":0},"generated":{"line":2630,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2630,"column":0},"generated":{"line":2631,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2631,"column":0},"generated":{"line":2632,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2632,"column":0},"generated":{"line":2633,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2633,"column":0},"generated":{"line":2634,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2634,"column":0},"generated":{"line":2635,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2635,"column":0},"generated":{"line":2636,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2636,"column":0},"generated":{"line":2637,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2637,"column":0},"generated":{"line":2638,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2638,"column":0},"generated":{"line":2639,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2639,"column":0},"generated":{"line":2640,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2640,"column":0},"generated":{"line":2641,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2641,"column":0},"generated":{"line":2642,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2642,"column":0},"generated":{"line":2643,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2643,"column":0},"generated":{"line":2644,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2644,"column":0},"generated":{"line":2645,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2645,"column":0},"generated":{"line":2646,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2646,"column":0},"generated":{"line":2647,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2647,"column":0},"generated":{"line":2648,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2648,"column":0},"generated":{"line":2649,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2649,"column":0},"generated":{"line":2650,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2650,"column":0},"generated":{"line":2651,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2651,"column":0},"generated":{"line":2652,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2652,"column":0},"generated":{"line":2653,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2653,"column":0},"generated":{"line":2654,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2654,"column":0},"generated":{"line":2655,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2655,"column":0},"generated":{"line":2656,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2656,"column":0},"generated":{"line":2657,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2657,"column":0},"generated":{"line":2658,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2658,"column":0},"generated":{"line":2659,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2659,"column":0},"generated":{"line":2660,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2660,"column":0},"generated":{"line":2661,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2661,"column":0},"generated":{"line":2662,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2662,"column":0},"generated":{"line":2663,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2663,"column":0},"generated":{"line":2664,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2664,"column":0},"generated":{"line":2665,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2665,"column":0},"generated":{"line":2666,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2666,"column":0},"generated":{"line":2667,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2667,"column":0},"generated":{"line":2668,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2668,"column":0},"generated":{"line":2669,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2669,"column":0},"generated":{"line":2670,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2670,"column":0},"generated":{"line":2671,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2671,"column":0},"generated":{"line":2672,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2672,"column":0},"generated":{"line":2673,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2673,"column":0},"generated":{"line":2674,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2674,"column":0},"generated":{"line":2675,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2675,"column":0},"generated":{"line":2676,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2676,"column":0},"generated":{"line":2677,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2677,"column":0},"generated":{"line":2678,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2678,"column":0},"generated":{"line":2679,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2679,"column":0},"generated":{"line":2680,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2680,"column":0},"generated":{"line":2681,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2681,"column":0},"generated":{"line":2682,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2682,"column":0},"generated":{"line":2683,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2683,"column":0},"generated":{"line":2684,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2684,"column":0},"generated":{"line":2685,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2685,"column":0},"generated":{"line":2686,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2686,"column":0},"generated":{"line":2687,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2687,"column":0},"generated":{"line":2688,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2688,"column":0},"generated":{"line":2689,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2689,"column":0},"generated":{"line":2690,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2690,"column":0},"generated":{"line":2691,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2691,"column":0},"generated":{"line":2692,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2692,"column":0},"generated":{"line":2693,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2693,"column":0},"generated":{"line":2694,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2694,"column":0},"generated":{"line":2695,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2695,"column":0},"generated":{"line":2696,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2696,"column":0},"generated":{"line":2697,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2697,"column":0},"generated":{"line":2698,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2698,"column":0},"generated":{"line":2699,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2699,"column":0},"generated":{"line":2700,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2700,"column":0},"generated":{"line":2701,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2701,"column":0},"generated":{"line":2702,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2702,"column":0},"generated":{"line":2703,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2703,"column":0},"generated":{"line":2704,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2704,"column":0},"generated":{"line":2705,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2705,"column":0},"generated":{"line":2706,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2706,"column":0},"generated":{"line":2707,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2707,"column":0},"generated":{"line":2708,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2708,"column":0},"generated":{"line":2709,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2709,"column":0},"generated":{"line":2710,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2710,"column":0},"generated":{"line":2711,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2711,"column":0},"generated":{"line":2712,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2712,"column":0},"generated":{"line":2713,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2713,"column":0},"generated":{"line":2714,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2714,"column":0},"generated":{"line":2715,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2715,"column":0},"generated":{"line":2716,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2716,"column":0},"generated":{"line":2717,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2717,"column":0},"generated":{"line":2718,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2718,"column":0},"generated":{"line":2719,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2719,"column":0},"generated":{"line":2720,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2720,"column":0},"generated":{"line":2721,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2721,"column":0},"generated":{"line":2722,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2722,"column":0},"generated":{"line":2723,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2723,"column":0},"generated":{"line":2724,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2724,"column":0},"generated":{"line":2725,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2725,"column":0},"generated":{"line":2726,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2726,"column":0},"generated":{"line":2727,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2727,"column":0},"generated":{"line":2728,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2728,"column":0},"generated":{"line":2729,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2729,"column":0},"generated":{"line":2730,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2730,"column":0},"generated":{"line":2731,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2731,"column":0},"generated":{"line":2732,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2732,"column":0},"generated":{"line":2733,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2733,"column":0},"generated":{"line":2734,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2734,"column":0},"generated":{"line":2735,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2735,"column":0},"generated":{"line":2736,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2736,"column":0},"generated":{"line":2737,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2737,"column":0},"generated":{"line":2738,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2738,"column":0},"generated":{"line":2739,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2739,"column":0},"generated":{"line":2740,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2740,"column":0},"generated":{"line":2741,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2741,"column":0},"generated":{"line":2742,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2742,"column":0},"generated":{"line":2743,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2743,"column":0},"generated":{"line":2744,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2744,"column":0},"generated":{"line":2745,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2745,"column":0},"generated":{"line":2746,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2746,"column":0},"generated":{"line":2747,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2747,"column":0},"generated":{"line":2748,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2748,"column":0},"generated":{"line":2749,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2749,"column":0},"generated":{"line":2750,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2750,"column":0},"generated":{"line":2751,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2751,"column":0},"generated":{"line":2752,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2752,"column":0},"generated":{"line":2753,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2753,"column":0},"generated":{"line":2754,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2754,"column":0},"generated":{"line":2755,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2755,"column":0},"generated":{"line":2756,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2756,"column":0},"generated":{"line":2757,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2757,"column":0},"generated":{"line":2758,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2758,"column":0},"generated":{"line":2759,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2759,"column":0},"generated":{"line":2760,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2760,"column":0},"generated":{"line":2761,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2761,"column":0},"generated":{"line":2762,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2762,"column":0},"generated":{"line":2763,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2763,"column":0},"generated":{"line":2764,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2764,"column":0},"generated":{"line":2765,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2765,"column":0},"generated":{"line":2766,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2766,"column":0},"generated":{"line":2767,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2767,"column":0},"generated":{"line":2768,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2768,"column":0},"generated":{"line":2769,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2769,"column":0},"generated":{"line":2770,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2770,"column":0},"generated":{"line":2771,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2771,"column":0},"generated":{"line":2772,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2772,"column":0},"generated":{"line":2773,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2773,"column":0},"generated":{"line":2774,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2774,"column":0},"generated":{"line":2775,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2775,"column":0},"generated":{"line":2776,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2776,"column":0},"generated":{"line":2777,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2777,"column":0},"generated":{"line":2778,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2778,"column":0},"generated":{"line":2779,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2779,"column":0},"generated":{"line":2780,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2780,"column":0},"generated":{"line":2781,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2781,"column":0},"generated":{"line":2782,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2782,"column":0},"generated":{"line":2783,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2783,"column":0},"generated":{"line":2784,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2784,"column":0},"generated":{"line":2785,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2785,"column":0},"generated":{"line":2786,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2786,"column":0},"generated":{"line":2787,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2787,"column":0},"generated":{"line":2788,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2788,"column":0},"generated":{"line":2789,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2789,"column":0},"generated":{"line":2790,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2790,"column":0},"generated":{"line":2791,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2791,"column":0},"generated":{"line":2792,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2792,"column":0},"generated":{"line":2793,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2793,"column":0},"generated":{"line":2794,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2794,"column":0},"generated":{"line":2795,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2795,"column":0},"generated":{"line":2796,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2796,"column":0},"generated":{"line":2797,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2797,"column":0},"generated":{"line":2798,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2798,"column":0},"generated":{"line":2799,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2799,"column":0},"generated":{"line":2800,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2800,"column":0},"generated":{"line":2801,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2801,"column":0},"generated":{"line":2802,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2802,"column":0},"generated":{"line":2803,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2803,"column":0},"generated":{"line":2804,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2804,"column":0},"generated":{"line":2805,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2805,"column":0},"generated":{"line":2806,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2806,"column":0},"generated":{"line":2807,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2807,"column":0},"generated":{"line":2808,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2808,"column":0},"generated":{"line":2809,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2809,"column":0},"generated":{"line":2810,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2810,"column":0},"generated":{"line":2811,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2811,"column":0},"generated":{"line":2812,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2812,"column":0},"generated":{"line":2813,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2813,"column":0},"generated":{"line":2814,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2814,"column":0},"generated":{"line":2815,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2815,"column":0},"generated":{"line":2816,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2816,"column":0},"generated":{"line":2817,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2817,"column":0},"generated":{"line":2818,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2818,"column":0},"generated":{"line":2819,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2819,"column":0},"generated":{"line":2820,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2820,"column":0},"generated":{"line":2821,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2821,"column":0},"generated":{"line":2822,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2822,"column":0},"generated":{"line":2823,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2823,"column":0},"generated":{"line":2824,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2824,"column":0},"generated":{"line":2825,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2825,"column":0},"generated":{"line":2826,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2826,"column":0},"generated":{"line":2827,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2827,"column":0},"generated":{"line":2828,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2828,"column":0},"generated":{"line":2829,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2829,"column":0},"generated":{"line":2830,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2830,"column":0},"generated":{"line":2831,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2831,"column":0},"generated":{"line":2832,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2832,"column":0},"generated":{"line":2833,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2833,"column":0},"generated":{"line":2834,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2834,"column":0},"generated":{"line":2835,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2835,"column":0},"generated":{"line":2836,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2836,"column":0},"generated":{"line":2837,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2837,"column":0},"generated":{"line":2838,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2838,"column":0},"generated":{"line":2839,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2839,"column":0},"generated":{"line":2840,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2840,"column":0},"generated":{"line":2841,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2841,"column":0},"generated":{"line":2842,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2842,"column":0},"generated":{"line":2843,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2843,"column":0},"generated":{"line":2844,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2844,"column":0},"generated":{"line":2845,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2845,"column":0},"generated":{"line":2846,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2846,"column":0},"generated":{"line":2847,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2847,"column":0},"generated":{"line":2848,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2848,"column":0},"generated":{"line":2849,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2849,"column":0},"generated":{"line":2850,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2850,"column":0},"generated":{"line":2851,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2851,"column":0},"generated":{"line":2852,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2852,"column":0},"generated":{"line":2853,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2853,"column":0},"generated":{"line":2854,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2854,"column":0},"generated":{"line":2855,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2855,"column":0},"generated":{"line":2856,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2856,"column":0},"generated":{"line":2857,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2857,"column":0},"generated":{"line":2858,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2858,"column":0},"generated":{"line":2859,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2859,"column":0},"generated":{"line":2860,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2860,"column":0},"generated":{"line":2861,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2861,"column":0},"generated":{"line":2862,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2862,"column":0},"generated":{"line":2863,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2863,"column":0},"generated":{"line":2864,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2864,"column":0},"generated":{"line":2865,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2865,"column":0},"generated":{"line":2866,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2866,"column":0},"generated":{"line":2867,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2867,"column":0},"generated":{"line":2868,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2868,"column":0},"generated":{"line":2869,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2869,"column":0},"generated":{"line":2870,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2870,"column":0},"generated":{"line":2871,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2871,"column":0},"generated":{"line":2872,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2872,"column":0},"generated":{"line":2873,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2873,"column":0},"generated":{"line":2874,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2874,"column":0},"generated":{"line":2875,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2875,"column":0},"generated":{"line":2876,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2876,"column":0},"generated":{"line":2877,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2877,"column":0},"generated":{"line":2878,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2878,"column":0},"generated":{"line":2879,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2879,"column":0},"generated":{"line":2880,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2880,"column":0},"generated":{"line":2881,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2881,"column":0},"generated":{"line":2882,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2882,"column":0},"generated":{"line":2883,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2883,"column":0},"generated":{"line":2884,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2884,"column":0},"generated":{"line":2885,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2885,"column":0},"generated":{"line":2886,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2886,"column":0},"generated":{"line":2887,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2887,"column":0},"generated":{"line":2888,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2888,"column":0},"generated":{"line":2889,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2889,"column":0},"generated":{"line":2890,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2890,"column":0},"generated":{"line":2891,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2891,"column":0},"generated":{"line":2892,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2892,"column":0},"generated":{"line":2893,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2893,"column":0},"generated":{"line":2894,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2894,"column":0},"generated":{"line":2895,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2895,"column":0},"generated":{"line":2896,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2896,"column":0},"generated":{"line":2897,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2897,"column":0},"generated":{"line":2898,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2898,"column":0},"generated":{"line":2899,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2899,"column":0},"generated":{"line":2900,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2900,"column":0},"generated":{"line":2901,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2901,"column":0},"generated":{"line":2902,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2902,"column":0},"generated":{"line":2903,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2903,"column":0},"generated":{"line":2904,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2904,"column":0},"generated":{"line":2905,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2905,"column":0},"generated":{"line":2906,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2906,"column":0},"generated":{"line":2907,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2907,"column":0},"generated":{"line":2908,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2908,"column":0},"generated":{"line":2909,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2909,"column":0},"generated":{"line":2910,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2910,"column":0},"generated":{"line":2911,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2911,"column":0},"generated":{"line":2912,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2912,"column":0},"generated":{"line":2913,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2913,"column":0},"generated":{"line":2914,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2914,"column":0},"generated":{"line":2915,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2915,"column":0},"generated":{"line":2916,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2916,"column":0},"generated":{"line":2917,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2917,"column":0},"generated":{"line":2918,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2918,"column":0},"generated":{"line":2919,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2919,"column":0},"generated":{"line":2920,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2920,"column":0},"generated":{"line":2921,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2921,"column":0},"generated":{"line":2922,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2922,"column":0},"generated":{"line":2923,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2923,"column":0},"generated":{"line":2924,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2924,"column":0},"generated":{"line":2925,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2925,"column":0},"generated":{"line":2926,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2926,"column":0},"generated":{"line":2927,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2927,"column":0},"generated":{"line":2928,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2928,"column":0},"generated":{"line":2929,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2929,"column":0},"generated":{"line":2930,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2930,"column":0},"generated":{"line":2931,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2931,"column":0},"generated":{"line":2932,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2932,"column":0},"generated":{"line":2933,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2933,"column":0},"generated":{"line":2934,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2934,"column":0},"generated":{"line":2935,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2935,"column":0},"generated":{"line":2936,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2936,"column":0},"generated":{"line":2937,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2937,"column":0},"generated":{"line":2938,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2938,"column":0},"generated":{"line":2939,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2939,"column":0},"generated":{"line":2940,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2940,"column":0},"generated":{"line":2941,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2941,"column":0},"generated":{"line":2942,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2942,"column":0},"generated":{"line":2943,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2943,"column":0},"generated":{"line":2944,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2944,"column":0},"generated":{"line":2945,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2945,"column":0},"generated":{"line":2946,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2946,"column":0},"generated":{"line":2947,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2947,"column":0},"generated":{"line":2948,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2948,"column":0},"generated":{"line":2949,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2949,"column":0},"generated":{"line":2950,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2950,"column":0},"generated":{"line":2951,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2951,"column":0},"generated":{"line":2952,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2952,"column":0},"generated":{"line":2953,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2953,"column":0},"generated":{"line":2954,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2954,"column":0},"generated":{"line":2955,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2955,"column":0},"generated":{"line":2956,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2956,"column":0},"generated":{"line":2957,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2957,"column":0},"generated":{"line":2958,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2958,"column":0},"generated":{"line":2959,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2959,"column":0},"generated":{"line":2960,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2960,"column":0},"generated":{"line":2961,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2961,"column":0},"generated":{"line":2962,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2962,"column":0},"generated":{"line":2963,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2963,"column":0},"generated":{"line":2964,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2964,"column":0},"generated":{"line":2965,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2965,"column":0},"generated":{"line":2966,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2966,"column":0},"generated":{"line":2967,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2967,"column":0},"generated":{"line":2968,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2968,"column":0},"generated":{"line":2969,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2969,"column":0},"generated":{"line":2970,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2970,"column":0},"generated":{"line":2971,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2971,"column":0},"generated":{"line":2972,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2972,"column":0},"generated":{"line":2973,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2973,"column":0},"generated":{"line":2974,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2974,"column":0},"generated":{"line":2975,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2975,"column":0},"generated":{"line":2976,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2976,"column":0},"generated":{"line":2977,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2977,"column":0},"generated":{"line":2978,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2978,"column":0},"generated":{"line":2979,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2979,"column":0},"generated":{"line":2980,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2980,"column":0},"generated":{"line":2981,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2981,"column":0},"generated":{"line":2982,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2982,"column":0},"generated":{"line":2983,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2983,"column":0},"generated":{"line":2984,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2984,"column":0},"generated":{"line":2985,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2985,"column":0},"generated":{"line":2986,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2986,"column":0},"generated":{"line":2987,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2987,"column":0},"generated":{"line":2988,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2988,"column":0},"generated":{"line":2989,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2989,"column":0},"generated":{"line":2990,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2990,"column":0},"generated":{"line":2991,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2991,"column":0},"generated":{"line":2992,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2992,"column":0},"generated":{"line":2993,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2993,"column":0},"generated":{"line":2994,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2994,"column":0},"generated":{"line":2995,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2995,"column":0},"generated":{"line":2996,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2996,"column":0},"generated":{"line":2997,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2997,"column":0},"generated":{"line":2998,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2998,"column":0},"generated":{"line":2999,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":2999,"column":0},"generated":{"line":3000,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3000,"column":0},"generated":{"line":3001,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3001,"column":0},"generated":{"line":3002,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3002,"column":0},"generated":{"line":3003,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3003,"column":0},"generated":{"line":3004,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3004,"column":0},"generated":{"line":3005,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3005,"column":0},"generated":{"line":3006,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3006,"column":0},"generated":{"line":3007,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3007,"column":0},"generated":{"line":3008,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3008,"column":0},"generated":{"line":3009,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3009,"column":0},"generated":{"line":3010,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3010,"column":0},"generated":{"line":3011,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3011,"column":0},"generated":{"line":3012,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3012,"column":0},"generated":{"line":3013,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3013,"column":0},"generated":{"line":3014,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3014,"column":0},"generated":{"line":3015,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3015,"column":0},"generated":{"line":3016,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3016,"column":0},"generated":{"line":3017,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3017,"column":0},"generated":{"line":3018,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3018,"column":0},"generated":{"line":3019,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3019,"column":0},"generated":{"line":3020,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3020,"column":0},"generated":{"line":3021,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3021,"column":0},"generated":{"line":3022,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3022,"column":0},"generated":{"line":3023,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3023,"column":0},"generated":{"line":3024,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3024,"column":0},"generated":{"line":3025,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3025,"column":0},"generated":{"line":3026,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3026,"column":0},"generated":{"line":3027,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3027,"column":0},"generated":{"line":3028,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3028,"column":0},"generated":{"line":3029,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3029,"column":0},"generated":{"line":3030,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3030,"column":0},"generated":{"line":3031,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3031,"column":0},"generated":{"line":3032,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3032,"column":0},"generated":{"line":3033,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3033,"column":0},"generated":{"line":3034,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3034,"column":0},"generated":{"line":3035,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3035,"column":0},"generated":{"line":3036,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3036,"column":0},"generated":{"line":3037,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3037,"column":0},"generated":{"line":3038,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3038,"column":0},"generated":{"line":3039,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3039,"column":0},"generated":{"line":3040,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3040,"column":0},"generated":{"line":3041,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3041,"column":0},"generated":{"line":3042,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3042,"column":0},"generated":{"line":3043,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3043,"column":0},"generated":{"line":3044,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3044,"column":0},"generated":{"line":3045,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3045,"column":0},"generated":{"line":3046,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3046,"column":0},"generated":{"line":3047,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3047,"column":0},"generated":{"line":3048,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3048,"column":0},"generated":{"line":3049,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3049,"column":0},"generated":{"line":3050,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3050,"column":0},"generated":{"line":3051,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3051,"column":0},"generated":{"line":3052,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3052,"column":0},"generated":{"line":3053,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3053,"column":0},"generated":{"line":3054,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3054,"column":0},"generated":{"line":3055,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3055,"column":0},"generated":{"line":3056,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3056,"column":0},"generated":{"line":3057,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3057,"column":0},"generated":{"line":3058,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3058,"column":0},"generated":{"line":3059,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3059,"column":0},"generated":{"line":3060,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3060,"column":0},"generated":{"line":3061,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3061,"column":0},"generated":{"line":3062,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3062,"column":0},"generated":{"line":3063,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3063,"column":0},"generated":{"line":3064,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3064,"column":0},"generated":{"line":3065,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3065,"column":0},"generated":{"line":3066,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3066,"column":0},"generated":{"line":3067,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3067,"column":0},"generated":{"line":3068,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3068,"column":0},"generated":{"line":3069,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3069,"column":0},"generated":{"line":3070,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3070,"column":0},"generated":{"line":3071,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3071,"column":0},"generated":{"line":3072,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3072,"column":0},"generated":{"line":3073,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3073,"column":0},"generated":{"line":3074,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3074,"column":0},"generated":{"line":3075,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3075,"column":0},"generated":{"line":3076,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3076,"column":0},"generated":{"line":3077,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3077,"column":0},"generated":{"line":3078,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3078,"column":0},"generated":{"line":3079,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3079,"column":0},"generated":{"line":3080,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3080,"column":0},"generated":{"line":3081,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3081,"column":0},"generated":{"line":3082,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3082,"column":0},"generated":{"line":3083,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3083,"column":0},"generated":{"line":3084,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3084,"column":0},"generated":{"line":3085,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3085,"column":0},"generated":{"line":3086,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3086,"column":0},"generated":{"line":3087,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3087,"column":0},"generated":{"line":3088,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3088,"column":0},"generated":{"line":3089,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3089,"column":0},"generated":{"line":3090,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3090,"column":0},"generated":{"line":3091,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3091,"column":0},"generated":{"line":3092,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3092,"column":0},"generated":{"line":3093,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3093,"column":0},"generated":{"line":3094,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3094,"column":0},"generated":{"line":3095,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3095,"column":0},"generated":{"line":3096,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3096,"column":0},"generated":{"line":3097,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3097,"column":0},"generated":{"line":3098,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3098,"column":0},"generated":{"line":3099,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3099,"column":0},"generated":{"line":3100,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3100,"column":0},"generated":{"line":3101,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3101,"column":0},"generated":{"line":3102,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3102,"column":0},"generated":{"line":3103,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3103,"column":0},"generated":{"line":3104,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3104,"column":0},"generated":{"line":3105,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3105,"column":0},"generated":{"line":3106,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3106,"column":0},"generated":{"line":3107,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3107,"column":0},"generated":{"line":3108,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3108,"column":0},"generated":{"line":3109,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3109,"column":0},"generated":{"line":3110,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3110,"column":0},"generated":{"line":3111,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3111,"column":0},"generated":{"line":3112,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3112,"column":0},"generated":{"line":3113,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3113,"column":0},"generated":{"line":3114,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3114,"column":0},"generated":{"line":3115,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3115,"column":0},"generated":{"line":3116,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3116,"column":0},"generated":{"line":3117,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3117,"column":0},"generated":{"line":3118,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3118,"column":0},"generated":{"line":3119,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3119,"column":0},"generated":{"line":3120,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3120,"column":0},"generated":{"line":3121,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3121,"column":0},"generated":{"line":3122,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3122,"column":0},"generated":{"line":3123,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3123,"column":0},"generated":{"line":3124,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3124,"column":0},"generated":{"line":3125,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3125,"column":0},"generated":{"line":3126,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3126,"column":0},"generated":{"line":3127,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3127,"column":0},"generated":{"line":3128,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3128,"column":0},"generated":{"line":3129,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3129,"column":0},"generated":{"line":3130,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3130,"column":0},"generated":{"line":3131,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3131,"column":0},"generated":{"line":3132,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3132,"column":0},"generated":{"line":3133,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3133,"column":0},"generated":{"line":3134,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3134,"column":0},"generated":{"line":3135,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3135,"column":0},"generated":{"line":3136,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3136,"column":0},"generated":{"line":3137,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3137,"column":0},"generated":{"line":3138,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3138,"column":0},"generated":{"line":3139,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3139,"column":0},"generated":{"line":3140,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3140,"column":0},"generated":{"line":3141,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3141,"column":0},"generated":{"line":3142,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3142,"column":0},"generated":{"line":3143,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3143,"column":0},"generated":{"line":3144,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3144,"column":0},"generated":{"line":3145,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3145,"column":0},"generated":{"line":3146,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3146,"column":0},"generated":{"line":3147,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3147,"column":0},"generated":{"line":3148,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3148,"column":0},"generated":{"line":3149,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3149,"column":0},"generated":{"line":3150,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3150,"column":0},"generated":{"line":3151,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3151,"column":0},"generated":{"line":3152,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3152,"column":0},"generated":{"line":3153,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3153,"column":0},"generated":{"line":3154,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3154,"column":0},"generated":{"line":3155,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3155,"column":0},"generated":{"line":3156,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3156,"column":0},"generated":{"line":3157,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3157,"column":0},"generated":{"line":3158,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3158,"column":0},"generated":{"line":3159,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3159,"column":0},"generated":{"line":3160,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3160,"column":0},"generated":{"line":3161,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3161,"column":0},"generated":{"line":3162,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3162,"column":0},"generated":{"line":3163,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3163,"column":0},"generated":{"line":3164,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3164,"column":0},"generated":{"line":3165,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3165,"column":0},"generated":{"line":3166,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3166,"column":0},"generated":{"line":3167,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3167,"column":0},"generated":{"line":3168,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3168,"column":0},"generated":{"line":3169,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3169,"column":0},"generated":{"line":3170,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3170,"column":0},"generated":{"line":3171,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3171,"column":0},"generated":{"line":3172,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3172,"column":0},"generated":{"line":3173,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3173,"column":0},"generated":{"line":3174,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3174,"column":0},"generated":{"line":3175,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3175,"column":0},"generated":{"line":3176,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3176,"column":0},"generated":{"line":3177,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3177,"column":0},"generated":{"line":3178,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3178,"column":0},"generated":{"line":3179,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3179,"column":0},"generated":{"line":3180,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3180,"column":0},"generated":{"line":3181,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3181,"column":0},"generated":{"line":3182,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3182,"column":0},"generated":{"line":3183,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3183,"column":0},"generated":{"line":3184,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3184,"column":0},"generated":{"line":3185,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3185,"column":0},"generated":{"line":3186,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3186,"column":0},"generated":{"line":3187,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3187,"column":0},"generated":{"line":3188,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3188,"column":0},"generated":{"line":3189,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3189,"column":0},"generated":{"line":3190,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3190,"column":0},"generated":{"line":3191,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3191,"column":0},"generated":{"line":3192,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3192,"column":0},"generated":{"line":3193,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3193,"column":0},"generated":{"line":3194,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3194,"column":0},"generated":{"line":3195,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3195,"column":0},"generated":{"line":3196,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3196,"column":0},"generated":{"line":3197,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3197,"column":0},"generated":{"line":3198,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3198,"column":0},"generated":{"line":3199,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3199,"column":0},"generated":{"line":3200,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3200,"column":0},"generated":{"line":3201,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3201,"column":0},"generated":{"line":3202,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3202,"column":0},"generated":{"line":3203,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3203,"column":0},"generated":{"line":3204,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3204,"column":0},"generated":{"line":3205,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3205,"column":0},"generated":{"line":3206,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3206,"column":0},"generated":{"line":3207,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3207,"column":0},"generated":{"line":3208,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3208,"column":0},"generated":{"line":3209,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3209,"column":0},"generated":{"line":3210,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3210,"column":0},"generated":{"line":3211,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3211,"column":0},"generated":{"line":3212,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3212,"column":0},"generated":{"line":3213,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3213,"column":0},"generated":{"line":3214,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3214,"column":0},"generated":{"line":3215,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3215,"column":0},"generated":{"line":3216,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3216,"column":0},"generated":{"line":3217,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3217,"column":0},"generated":{"line":3218,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3218,"column":0},"generated":{"line":3219,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3219,"column":0},"generated":{"line":3220,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3220,"column":0},"generated":{"line":3221,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3221,"column":0},"generated":{"line":3222,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3222,"column":0},"generated":{"line":3223,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3223,"column":0},"generated":{"line":3224,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3224,"column":0},"generated":{"line":3225,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3225,"column":0},"generated":{"line":3226,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3226,"column":0},"generated":{"line":3227,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3227,"column":0},"generated":{"line":3228,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3228,"column":0},"generated":{"line":3229,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3229,"column":0},"generated":{"line":3230,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3230,"column":0},"generated":{"line":3231,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3231,"column":0},"generated":{"line":3232,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3232,"column":0},"generated":{"line":3233,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3233,"column":0},"generated":{"line":3234,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3234,"column":0},"generated":{"line":3235,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3235,"column":0},"generated":{"line":3236,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3236,"column":0},"generated":{"line":3237,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3237,"column":0},"generated":{"line":3238,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3238,"column":0},"generated":{"line":3239,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3239,"column":0},"generated":{"line":3240,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3240,"column":0},"generated":{"line":3241,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3241,"column":0},"generated":{"line":3242,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3242,"column":0},"generated":{"line":3243,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3243,"column":0},"generated":{"line":3244,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3244,"column":0},"generated":{"line":3245,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3245,"column":0},"generated":{"line":3246,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3246,"column":0},"generated":{"line":3247,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3247,"column":0},"generated":{"line":3248,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3248,"column":0},"generated":{"line":3249,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3249,"column":0},"generated":{"line":3250,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3250,"column":0},"generated":{"line":3251,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3251,"column":0},"generated":{"line":3252,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3252,"column":0},"generated":{"line":3253,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3253,"column":0},"generated":{"line":3254,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3254,"column":0},"generated":{"line":3255,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3255,"column":0},"generated":{"line":3256,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3256,"column":0},"generated":{"line":3257,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3257,"column":0},"generated":{"line":3258,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3258,"column":0},"generated":{"line":3259,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3259,"column":0},"generated":{"line":3260,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3260,"column":0},"generated":{"line":3261,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3261,"column":0},"generated":{"line":3262,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3262,"column":0},"generated":{"line":3263,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3263,"column":0},"generated":{"line":3264,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3264,"column":0},"generated":{"line":3265,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3265,"column":0},"generated":{"line":3266,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3266,"column":0},"generated":{"line":3267,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3267,"column":0},"generated":{"line":3268,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3268,"column":0},"generated":{"line":3269,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3269,"column":0},"generated":{"line":3270,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3270,"column":0},"generated":{"line":3271,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3271,"column":0},"generated":{"line":3272,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3272,"column":0},"generated":{"line":3273,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3273,"column":0},"generated":{"line":3274,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3274,"column":0},"generated":{"line":3275,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3275,"column":0},"generated":{"line":3276,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3276,"column":0},"generated":{"line":3277,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3277,"column":0},"generated":{"line":3278,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3278,"column":0},"generated":{"line":3279,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3279,"column":0},"generated":{"line":3280,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3280,"column":0},"generated":{"line":3281,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3281,"column":0},"generated":{"line":3282,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3282,"column":0},"generated":{"line":3283,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3283,"column":0},"generated":{"line":3284,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3284,"column":0},"generated":{"line":3285,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3285,"column":0},"generated":{"line":3286,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3286,"column":0},"generated":{"line":3287,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3287,"column":0},"generated":{"line":3288,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3288,"column":0},"generated":{"line":3289,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3289,"column":0},"generated":{"line":3290,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3290,"column":0},"generated":{"line":3291,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3291,"column":0},"generated":{"line":3292,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3292,"column":0},"generated":{"line":3293,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3293,"column":0},"generated":{"line":3294,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3294,"column":0},"generated":{"line":3295,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3295,"column":0},"generated":{"line":3296,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3296,"column":0},"generated":{"line":3297,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3297,"column":0},"generated":{"line":3298,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3298,"column":0},"generated":{"line":3299,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3299,"column":0},"generated":{"line":3300,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3300,"column":0},"generated":{"line":3301,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3301,"column":0},"generated":{"line":3302,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3302,"column":0},"generated":{"line":3303,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3303,"column":0},"generated":{"line":3304,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3304,"column":0},"generated":{"line":3305,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3305,"column":0},"generated":{"line":3306,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3306,"column":0},"generated":{"line":3307,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3307,"column":0},"generated":{"line":3308,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3308,"column":0},"generated":{"line":3309,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3309,"column":0},"generated":{"line":3310,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3310,"column":0},"generated":{"line":3311,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3311,"column":0},"generated":{"line":3312,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3312,"column":0},"generated":{"line":3313,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3313,"column":0},"generated":{"line":3314,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3314,"column":0},"generated":{"line":3315,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3315,"column":0},"generated":{"line":3316,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3316,"column":0},"generated":{"line":3317,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3317,"column":0},"generated":{"line":3318,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3318,"column":0},"generated":{"line":3319,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3319,"column":0},"generated":{"line":3320,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3320,"column":0},"generated":{"line":3321,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3321,"column":0},"generated":{"line":3322,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3322,"column":0},"generated":{"line":3323,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3323,"column":0},"generated":{"line":3324,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3324,"column":0},"generated":{"line":3325,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3325,"column":0},"generated":{"line":3326,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3326,"column":0},"generated":{"line":3327,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3327,"column":0},"generated":{"line":3328,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3328,"column":0},"generated":{"line":3329,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3329,"column":0},"generated":{"line":3330,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3330,"column":0},"generated":{"line":3331,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3331,"column":0},"generated":{"line":3332,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3332,"column":0},"generated":{"line":3333,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3333,"column":0},"generated":{"line":3334,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3334,"column":0},"generated":{"line":3335,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3335,"column":0},"generated":{"line":3336,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3336,"column":0},"generated":{"line":3337,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3337,"column":0},"generated":{"line":3338,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3338,"column":0},"generated":{"line":3339,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3339,"column":0},"generated":{"line":3340,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3340,"column":0},"generated":{"line":3341,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3341,"column":0},"generated":{"line":3342,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3342,"column":0},"generated":{"line":3343,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3343,"column":0},"generated":{"line":3344,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3344,"column":0},"generated":{"line":3345,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3345,"column":0},"generated":{"line":3346,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3346,"column":0},"generated":{"line":3347,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3347,"column":0},"generated":{"line":3348,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3348,"column":0},"generated":{"line":3349,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3349,"column":0},"generated":{"line":3350,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3350,"column":0},"generated":{"line":3351,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3351,"column":0},"generated":{"line":3352,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3352,"column":0},"generated":{"line":3353,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3353,"column":0},"generated":{"line":3354,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3354,"column":0},"generated":{"line":3355,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3355,"column":0},"generated":{"line":3356,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3356,"column":0},"generated":{"line":3357,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3357,"column":0},"generated":{"line":3358,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3358,"column":0},"generated":{"line":3359,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3359,"column":0},"generated":{"line":3360,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3360,"column":0},"generated":{"line":3361,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3361,"column":0},"generated":{"line":3362,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3362,"column":0},"generated":{"line":3363,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3363,"column":0},"generated":{"line":3364,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3364,"column":0},"generated":{"line":3365,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3365,"column":0},"generated":{"line":3366,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3366,"column":0},"generated":{"line":3367,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3367,"column":0},"generated":{"line":3368,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3368,"column":0},"generated":{"line":3369,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3369,"column":0},"generated":{"line":3370,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3370,"column":0},"generated":{"line":3371,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3371,"column":0},"generated":{"line":3372,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3372,"column":0},"generated":{"line":3373,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3373,"column":0},"generated":{"line":3374,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3374,"column":0},"generated":{"line":3375,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3375,"column":0},"generated":{"line":3376,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3376,"column":0},"generated":{"line":3377,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3377,"column":0},"generated":{"line":3378,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3378,"column":0},"generated":{"line":3379,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3379,"column":0},"generated":{"line":3380,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3380,"column":0},"generated":{"line":3381,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3381,"column":0},"generated":{"line":3382,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3382,"column":0},"generated":{"line":3383,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3383,"column":0},"generated":{"line":3384,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3384,"column":0},"generated":{"line":3385,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3385,"column":0},"generated":{"line":3386,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3386,"column":0},"generated":{"line":3387,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3387,"column":0},"generated":{"line":3388,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3388,"column":0},"generated":{"line":3389,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3389,"column":0},"generated":{"line":3390,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3390,"column":0},"generated":{"line":3391,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3391,"column":0},"generated":{"line":3392,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3392,"column":0},"generated":{"line":3393,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3393,"column":0},"generated":{"line":3394,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3394,"column":0},"generated":{"line":3395,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3395,"column":0},"generated":{"line":3396,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3396,"column":0},"generated":{"line":3397,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3397,"column":0},"generated":{"line":3398,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3398,"column":0},"generated":{"line":3399,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3399,"column":0},"generated":{"line":3400,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3400,"column":0},"generated":{"line":3401,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3401,"column":0},"generated":{"line":3402,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3402,"column":0},"generated":{"line":3403,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3403,"column":0},"generated":{"line":3404,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3404,"column":0},"generated":{"line":3405,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3405,"column":0},"generated":{"line":3406,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3406,"column":0},"generated":{"line":3407,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3407,"column":0},"generated":{"line":3408,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3408,"column":0},"generated":{"line":3409,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3409,"column":0},"generated":{"line":3410,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3410,"column":0},"generated":{"line":3411,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3411,"column":0},"generated":{"line":3412,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3412,"column":0},"generated":{"line":3413,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3413,"column":0},"generated":{"line":3414,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3414,"column":0},"generated":{"line":3415,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3415,"column":0},"generated":{"line":3416,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3416,"column":0},"generated":{"line":3417,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3417,"column":0},"generated":{"line":3418,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3418,"column":0},"generated":{"line":3419,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3419,"column":0},"generated":{"line":3420,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3420,"column":0},"generated":{"line":3421,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3421,"column":0},"generated":{"line":3422,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3422,"column":0},"generated":{"line":3423,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3423,"column":0},"generated":{"line":3424,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3424,"column":0},"generated":{"line":3425,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3425,"column":0},"generated":{"line":3426,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3426,"column":0},"generated":{"line":3427,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3427,"column":0},"generated":{"line":3428,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3428,"column":0},"generated":{"line":3429,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3429,"column":0},"generated":{"line":3430,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3430,"column":0},"generated":{"line":3431,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3431,"column":0},"generated":{"line":3432,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3432,"column":0},"generated":{"line":3433,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3433,"column":0},"generated":{"line":3434,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3434,"column":0},"generated":{"line":3435,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3435,"column":0},"generated":{"line":3436,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3436,"column":0},"generated":{"line":3437,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3437,"column":0},"generated":{"line":3438,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3438,"column":0},"generated":{"line":3439,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3439,"column":0},"generated":{"line":3440,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3440,"column":0},"generated":{"line":3441,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3441,"column":0},"generated":{"line":3442,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3442,"column":0},"generated":{"line":3443,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3443,"column":0},"generated":{"line":3444,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3444,"column":0},"generated":{"line":3445,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3445,"column":0},"generated":{"line":3446,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3446,"column":0},"generated":{"line":3447,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3447,"column":0},"generated":{"line":3448,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3448,"column":0},"generated":{"line":3449,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3449,"column":0},"generated":{"line":3450,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3450,"column":0},"generated":{"line":3451,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3451,"column":0},"generated":{"line":3452,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3452,"column":0},"generated":{"line":3453,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3453,"column":0},"generated":{"line":3454,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3454,"column":0},"generated":{"line":3455,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3455,"column":0},"generated":{"line":3456,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3456,"column":0},"generated":{"line":3457,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3457,"column":0},"generated":{"line":3458,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3458,"column":0},"generated":{"line":3459,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3459,"column":0},"generated":{"line":3460,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3460,"column":0},"generated":{"line":3461,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3461,"column":0},"generated":{"line":3462,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3462,"column":0},"generated":{"line":3463,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3463,"column":0},"generated":{"line":3464,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3464,"column":0},"generated":{"line":3465,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3465,"column":0},"generated":{"line":3466,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3466,"column":0},"generated":{"line":3467,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3467,"column":0},"generated":{"line":3468,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3468,"column":0},"generated":{"line":3469,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3469,"column":0},"generated":{"line":3470,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3470,"column":0},"generated":{"line":3471,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3471,"column":0},"generated":{"line":3472,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3472,"column":0},"generated":{"line":3473,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3473,"column":0},"generated":{"line":3474,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3474,"column":0},"generated":{"line":3475,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3475,"column":0},"generated":{"line":3476,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3476,"column":0},"generated":{"line":3477,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3477,"column":0},"generated":{"line":3478,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3478,"column":0},"generated":{"line":3479,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3479,"column":0},"generated":{"line":3480,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3480,"column":0},"generated":{"line":3481,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3481,"column":0},"generated":{"line":3482,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3482,"column":0},"generated":{"line":3483,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3483,"column":0},"generated":{"line":3484,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3484,"column":0},"generated":{"line":3485,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3485,"column":0},"generated":{"line":3486,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3486,"column":0},"generated":{"line":3487,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3487,"column":0},"generated":{"line":3488,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3488,"column":0},"generated":{"line":3489,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3489,"column":0},"generated":{"line":3490,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3490,"column":0},"generated":{"line":3491,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3491,"column":0},"generated":{"line":3492,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3492,"column":0},"generated":{"line":3493,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3493,"column":0},"generated":{"line":3494,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3494,"column":0},"generated":{"line":3495,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3495,"column":0},"generated":{"line":3496,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3496,"column":0},"generated":{"line":3497,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3497,"column":0},"generated":{"line":3498,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3498,"column":0},"generated":{"line":3499,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3499,"column":0},"generated":{"line":3500,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3500,"column":0},"generated":{"line":3501,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3501,"column":0},"generated":{"line":3502,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3502,"column":0},"generated":{"line":3503,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3503,"column":0},"generated":{"line":3504,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3504,"column":0},"generated":{"line":3505,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3505,"column":0},"generated":{"line":3506,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3506,"column":0},"generated":{"line":3507,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3507,"column":0},"generated":{"line":3508,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3508,"column":0},"generated":{"line":3509,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3509,"column":0},"generated":{"line":3510,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3510,"column":0},"generated":{"line":3511,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3511,"column":0},"generated":{"line":3512,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3512,"column":0},"generated":{"line":3513,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3513,"column":0},"generated":{"line":3514,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3514,"column":0},"generated":{"line":3515,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3515,"column":0},"generated":{"line":3516,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3516,"column":0},"generated":{"line":3517,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3517,"column":0},"generated":{"line":3518,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3518,"column":0},"generated":{"line":3519,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3519,"column":0},"generated":{"line":3520,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3520,"column":0},"generated":{"line":3521,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3521,"column":0},"generated":{"line":3522,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3522,"column":0},"generated":{"line":3523,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3523,"column":0},"generated":{"line":3524,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3524,"column":0},"generated":{"line":3525,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3525,"column":0},"generated":{"line":3526,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3526,"column":0},"generated":{"line":3527,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3527,"column":0},"generated":{"line":3528,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3528,"column":0},"generated":{"line":3529,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3529,"column":0},"generated":{"line":3530,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3530,"column":0},"generated":{"line":3531,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3531,"column":0},"generated":{"line":3532,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3532,"column":0},"generated":{"line":3533,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3533,"column":0},"generated":{"line":3534,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3534,"column":0},"generated":{"line":3535,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3535,"column":0},"generated":{"line":3536,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3536,"column":0},"generated":{"line":3537,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3537,"column":0},"generated":{"line":3538,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3538,"column":0},"generated":{"line":3539,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3539,"column":0},"generated":{"line":3540,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3540,"column":0},"generated":{"line":3541,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3541,"column":0},"generated":{"line":3542,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3542,"column":0},"generated":{"line":3543,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3543,"column":0},"generated":{"line":3544,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3544,"column":0},"generated":{"line":3545,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3545,"column":0},"generated":{"line":3546,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3546,"column":0},"generated":{"line":3547,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3547,"column":0},"generated":{"line":3548,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3548,"column":0},"generated":{"line":3549,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3549,"column":0},"generated":{"line":3550,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3550,"column":0},"generated":{"line":3551,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3551,"column":0},"generated":{"line":3552,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3552,"column":0},"generated":{"line":3553,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3553,"column":0},"generated":{"line":3554,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3554,"column":0},"generated":{"line":3555,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3555,"column":0},"generated":{"line":3556,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3556,"column":0},"generated":{"line":3557,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3557,"column":0},"generated":{"line":3558,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3558,"column":0},"generated":{"line":3559,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3559,"column":0},"generated":{"line":3560,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3560,"column":0},"generated":{"line":3561,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3561,"column":0},"generated":{"line":3562,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3562,"column":0},"generated":{"line":3563,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3563,"column":0},"generated":{"line":3564,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3564,"column":0},"generated":{"line":3565,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3565,"column":0},"generated":{"line":3566,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3566,"column":0},"generated":{"line":3567,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3567,"column":0},"generated":{"line":3568,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3568,"column":0},"generated":{"line":3569,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3569,"column":0},"generated":{"line":3570,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3570,"column":0},"generated":{"line":3571,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3571,"column":0},"generated":{"line":3572,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3572,"column":0},"generated":{"line":3573,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3573,"column":0},"generated":{"line":3574,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3574,"column":0},"generated":{"line":3575,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3575,"column":0},"generated":{"line":3576,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3576,"column":0},"generated":{"line":3577,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3577,"column":0},"generated":{"line":3578,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3578,"column":0},"generated":{"line":3579,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3579,"column":0},"generated":{"line":3580,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3580,"column":0},"generated":{"line":3581,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3581,"column":0},"generated":{"line":3582,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3582,"column":0},"generated":{"line":3583,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3583,"column":0},"generated":{"line":3584,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3584,"column":0},"generated":{"line":3585,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3585,"column":0},"generated":{"line":3586,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3586,"column":0},"generated":{"line":3587,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3587,"column":0},"generated":{"line":3588,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3588,"column":0},"generated":{"line":3589,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3589,"column":0},"generated":{"line":3590,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3590,"column":0},"generated":{"line":3591,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3591,"column":0},"generated":{"line":3592,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3592,"column":0},"generated":{"line":3593,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3593,"column":0},"generated":{"line":3594,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3594,"column":0},"generated":{"line":3595,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3595,"column":0},"generated":{"line":3596,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3596,"column":0},"generated":{"line":3597,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3597,"column":0},"generated":{"line":3598,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3598,"column":0},"generated":{"line":3599,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3599,"column":0},"generated":{"line":3600,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3600,"column":0},"generated":{"line":3601,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3601,"column":0},"generated":{"line":3602,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3602,"column":0},"generated":{"line":3603,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3603,"column":0},"generated":{"line":3604,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3604,"column":0},"generated":{"line":3605,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3605,"column":0},"generated":{"line":3606,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3606,"column":0},"generated":{"line":3607,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3607,"column":0},"generated":{"line":3608,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3608,"column":0},"generated":{"line":3609,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3609,"column":0},"generated":{"line":3610,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3610,"column":0},"generated":{"line":3611,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3611,"column":0},"generated":{"line":3612,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3612,"column":0},"generated":{"line":3613,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3613,"column":0},"generated":{"line":3614,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3614,"column":0},"generated":{"line":3615,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3615,"column":0},"generated":{"line":3616,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3616,"column":0},"generated":{"line":3617,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3617,"column":0},"generated":{"line":3618,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3618,"column":0},"generated":{"line":3619,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3619,"column":0},"generated":{"line":3620,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3620,"column":0},"generated":{"line":3621,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3621,"column":0},"generated":{"line":3622,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3622,"column":0},"generated":{"line":3623,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3623,"column":0},"generated":{"line":3624,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3624,"column":0},"generated":{"line":3625,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3625,"column":0},"generated":{"line":3626,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3626,"column":0},"generated":{"line":3627,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3627,"column":0},"generated":{"line":3628,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3628,"column":0},"generated":{"line":3629,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3629,"column":0},"generated":{"line":3630,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3630,"column":0},"generated":{"line":3631,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3631,"column":0},"generated":{"line":3632,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3632,"column":0},"generated":{"line":3633,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3633,"column":0},"generated":{"line":3634,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3634,"column":0},"generated":{"line":3635,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3635,"column":0},"generated":{"line":3636,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3636,"column":0},"generated":{"line":3637,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3637,"column":0},"generated":{"line":3638,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3638,"column":0},"generated":{"line":3639,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3639,"column":0},"generated":{"line":3640,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3640,"column":0},"generated":{"line":3641,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3641,"column":0},"generated":{"line":3642,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3642,"column":0},"generated":{"line":3643,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3643,"column":0},"generated":{"line":3644,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3644,"column":0},"generated":{"line":3645,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3645,"column":0},"generated":{"line":3646,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3646,"column":0},"generated":{"line":3647,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3647,"column":0},"generated":{"line":3648,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3648,"column":0},"generated":{"line":3649,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3649,"column":0},"generated":{"line":3650,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3650,"column":0},"generated":{"line":3651,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3651,"column":0},"generated":{"line":3652,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3652,"column":0},"generated":{"line":3653,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3653,"column":0},"generated":{"line":3654,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3654,"column":0},"generated":{"line":3655,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3655,"column":0},"generated":{"line":3656,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3656,"column":0},"generated":{"line":3657,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3657,"column":0},"generated":{"line":3658,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3658,"column":0},"generated":{"line":3659,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3659,"column":0},"generated":{"line":3660,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3660,"column":0},"generated":{"line":3661,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3661,"column":0},"generated":{"line":3662,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3662,"column":0},"generated":{"line":3663,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3663,"column":0},"generated":{"line":3664,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3664,"column":0},"generated":{"line":3665,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3665,"column":0},"generated":{"line":3666,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3666,"column":0},"generated":{"line":3667,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3667,"column":0},"generated":{"line":3668,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3668,"column":0},"generated":{"line":3669,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3669,"column":0},"generated":{"line":3670,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3670,"column":0},"generated":{"line":3671,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3671,"column":0},"generated":{"line":3672,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3672,"column":0},"generated":{"line":3673,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3673,"column":0},"generated":{"line":3674,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3674,"column":0},"generated":{"line":3675,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3675,"column":0},"generated":{"line":3676,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3676,"column":0},"generated":{"line":3677,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3677,"column":0},"generated":{"line":3678,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3678,"column":0},"generated":{"line":3679,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3679,"column":0},"generated":{"line":3680,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3680,"column":0},"generated":{"line":3681,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3681,"column":0},"generated":{"line":3682,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3682,"column":0},"generated":{"line":3683,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3683,"column":0},"generated":{"line":3684,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3684,"column":0},"generated":{"line":3685,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3685,"column":0},"generated":{"line":3686,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3686,"column":0},"generated":{"line":3687,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3687,"column":0},"generated":{"line":3688,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3688,"column":0},"generated":{"line":3689,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3689,"column":0},"generated":{"line":3690,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3690,"column":0},"generated":{"line":3691,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3691,"column":0},"generated":{"line":3692,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3692,"column":0},"generated":{"line":3693,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3693,"column":0},"generated":{"line":3694,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3694,"column":0},"generated":{"line":3695,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3695,"column":0},"generated":{"line":3696,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3696,"column":0},"generated":{"line":3697,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3697,"column":0},"generated":{"line":3698,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3698,"column":0},"generated":{"line":3699,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3699,"column":0},"generated":{"line":3700,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3700,"column":0},"generated":{"line":3701,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3701,"column":0},"generated":{"line":3702,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3702,"column":0},"generated":{"line":3703,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3703,"column":0},"generated":{"line":3704,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3704,"column":0},"generated":{"line":3705,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3705,"column":0},"generated":{"line":3706,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3706,"column":0},"generated":{"line":3707,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3707,"column":0},"generated":{"line":3708,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3708,"column":0},"generated":{"line":3709,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3709,"column":0},"generated":{"line":3710,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3710,"column":0},"generated":{"line":3711,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3711,"column":0},"generated":{"line":3712,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3712,"column":0},"generated":{"line":3713,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3713,"column":0},"generated":{"line":3714,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3714,"column":0},"generated":{"line":3715,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3715,"column":0},"generated":{"line":3716,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3716,"column":0},"generated":{"line":3717,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3717,"column":0},"generated":{"line":3718,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3718,"column":0},"generated":{"line":3719,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3719,"column":0},"generated":{"line":3720,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3720,"column":0},"generated":{"line":3721,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3721,"column":0},"generated":{"line":3722,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3722,"column":0},"generated":{"line":3723,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3723,"column":0},"generated":{"line":3724,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3724,"column":0},"generated":{"line":3725,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3725,"column":0},"generated":{"line":3726,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3726,"column":0},"generated":{"line":3727,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3727,"column":0},"generated":{"line":3728,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3728,"column":0},"generated":{"line":3729,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3729,"column":0},"generated":{"line":3730,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3730,"column":0},"generated":{"line":3731,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3731,"column":0},"generated":{"line":3732,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3732,"column":0},"generated":{"line":3733,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3733,"column":0},"generated":{"line":3734,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3734,"column":0},"generated":{"line":3735,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3735,"column":0},"generated":{"line":3736,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3736,"column":0},"generated":{"line":3737,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3737,"column":0},"generated":{"line":3738,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3738,"column":0},"generated":{"line":3739,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3739,"column":0},"generated":{"line":3740,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3740,"column":0},"generated":{"line":3741,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3741,"column":0},"generated":{"line":3742,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3742,"column":0},"generated":{"line":3743,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3743,"column":0},"generated":{"line":3744,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3744,"column":0},"generated":{"line":3745,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3745,"column":0},"generated":{"line":3746,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3746,"column":0},"generated":{"line":3747,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3747,"column":0},"generated":{"line":3748,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3748,"column":0},"generated":{"line":3749,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3749,"column":0},"generated":{"line":3750,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3750,"column":0},"generated":{"line":3751,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3751,"column":0},"generated":{"line":3752,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3752,"column":0},"generated":{"line":3753,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3753,"column":0},"generated":{"line":3754,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3754,"column":0},"generated":{"line":3755,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3755,"column":0},"generated":{"line":3756,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3756,"column":0},"generated":{"line":3757,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3757,"column":0},"generated":{"line":3758,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3758,"column":0},"generated":{"line":3759,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3759,"column":0},"generated":{"line":3760,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3760,"column":0},"generated":{"line":3761,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3761,"column":0},"generated":{"line":3762,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3762,"column":0},"generated":{"line":3763,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3763,"column":0},"generated":{"line":3764,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3764,"column":0},"generated":{"line":3765,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3765,"column":0},"generated":{"line":3766,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3766,"column":0},"generated":{"line":3767,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3767,"column":0},"generated":{"line":3768,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3768,"column":0},"generated":{"line":3769,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3769,"column":0},"generated":{"line":3770,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3770,"column":0},"generated":{"line":3771,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3771,"column":0},"generated":{"line":3772,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3772,"column":0},"generated":{"line":3773,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3773,"column":0},"generated":{"line":3774,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3774,"column":0},"generated":{"line":3775,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3775,"column":0},"generated":{"line":3776,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3776,"column":0},"generated":{"line":3777,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3777,"column":0},"generated":{"line":3778,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3778,"column":0},"generated":{"line":3779,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3779,"column":0},"generated":{"line":3780,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3780,"column":0},"generated":{"line":3781,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3781,"column":0},"generated":{"line":3782,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3782,"column":0},"generated":{"line":3783,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3783,"column":0},"generated":{"line":3784,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3784,"column":0},"generated":{"line":3785,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3785,"column":0},"generated":{"line":3786,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3786,"column":0},"generated":{"line":3787,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3787,"column":0},"generated":{"line":3788,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3788,"column":0},"generated":{"line":3789,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3789,"column":0},"generated":{"line":3790,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3790,"column":0},"generated":{"line":3791,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3791,"column":0},"generated":{"line":3792,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3792,"column":0},"generated":{"line":3793,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3793,"column":0},"generated":{"line":3794,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3794,"column":0},"generated":{"line":3795,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3795,"column":0},"generated":{"line":3796,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3796,"column":0},"generated":{"line":3797,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3797,"column":0},"generated":{"line":3798,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3798,"column":0},"generated":{"line":3799,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3799,"column":0},"generated":{"line":3800,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3800,"column":0},"generated":{"line":3801,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3801,"column":0},"generated":{"line":3802,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3802,"column":0},"generated":{"line":3803,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3803,"column":0},"generated":{"line":3804,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3804,"column":0},"generated":{"line":3805,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3805,"column":0},"generated":{"line":3806,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3806,"column":0},"generated":{"line":3807,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3807,"column":0},"generated":{"line":3808,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3808,"column":0},"generated":{"line":3809,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3809,"column":0},"generated":{"line":3810,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3810,"column":0},"generated":{"line":3811,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3811,"column":0},"generated":{"line":3812,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3812,"column":0},"generated":{"line":3813,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3813,"column":0},"generated":{"line":3814,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3814,"column":0},"generated":{"line":3815,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3815,"column":0},"generated":{"line":3816,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3816,"column":0},"generated":{"line":3817,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3817,"column":0},"generated":{"line":3818,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3818,"column":0},"generated":{"line":3819,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3819,"column":0},"generated":{"line":3820,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3820,"column":0},"generated":{"line":3821,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3821,"column":0},"generated":{"line":3822,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3822,"column":0},"generated":{"line":3823,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3823,"column":0},"generated":{"line":3824,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3824,"column":0},"generated":{"line":3825,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3825,"column":0},"generated":{"line":3826,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3826,"column":0},"generated":{"line":3827,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3827,"column":0},"generated":{"line":3828,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3828,"column":0},"generated":{"line":3829,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3829,"column":0},"generated":{"line":3830,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3830,"column":0},"generated":{"line":3831,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3831,"column":0},"generated":{"line":3832,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3832,"column":0},"generated":{"line":3833,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3833,"column":0},"generated":{"line":3834,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3834,"column":0},"generated":{"line":3835,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3835,"column":0},"generated":{"line":3836,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3836,"column":0},"generated":{"line":3837,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3837,"column":0},"generated":{"line":3838,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3838,"column":0},"generated":{"line":3839,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3839,"column":0},"generated":{"line":3840,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3840,"column":0},"generated":{"line":3841,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3841,"column":0},"generated":{"line":3842,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3842,"column":0},"generated":{"line":3843,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3843,"column":0},"generated":{"line":3844,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3844,"column":0},"generated":{"line":3845,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3845,"column":0},"generated":{"line":3846,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3846,"column":0},"generated":{"line":3847,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3847,"column":0},"generated":{"line":3848,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3848,"column":0},"generated":{"line":3849,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3849,"column":0},"generated":{"line":3850,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3850,"column":0},"generated":{"line":3851,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3851,"column":0},"generated":{"line":3852,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3852,"column":0},"generated":{"line":3853,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3853,"column":0},"generated":{"line":3854,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3854,"column":0},"generated":{"line":3855,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3855,"column":0},"generated":{"line":3856,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3856,"column":0},"generated":{"line":3857,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3857,"column":0},"generated":{"line":3858,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3858,"column":0},"generated":{"line":3859,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3859,"column":0},"generated":{"line":3860,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3860,"column":0},"generated":{"line":3861,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3861,"column":0},"generated":{"line":3862,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3862,"column":0},"generated":{"line":3863,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3863,"column":0},"generated":{"line":3864,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3864,"column":0},"generated":{"line":3865,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3865,"column":0},"generated":{"line":3866,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3866,"column":0},"generated":{"line":3867,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3867,"column":0},"generated":{"line":3868,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3868,"column":0},"generated":{"line":3869,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3869,"column":0},"generated":{"line":3870,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3870,"column":0},"generated":{"line":3871,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3871,"column":0},"generated":{"line":3872,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3872,"column":0},"generated":{"line":3873,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3873,"column":0},"generated":{"line":3874,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3874,"column":0},"generated":{"line":3875,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3875,"column":0},"generated":{"line":3876,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3876,"column":0},"generated":{"line":3877,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3877,"column":0},"generated":{"line":3878,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3878,"column":0},"generated":{"line":3879,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3879,"column":0},"generated":{"line":3880,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3880,"column":0},"generated":{"line":3881,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3881,"column":0},"generated":{"line":3882,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3882,"column":0},"generated":{"line":3883,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3883,"column":0},"generated":{"line":3884,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3884,"column":0},"generated":{"line":3885,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3885,"column":0},"generated":{"line":3886,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3886,"column":0},"generated":{"line":3887,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3887,"column":0},"generated":{"line":3888,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3888,"column":0},"generated":{"line":3889,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3889,"column":0},"generated":{"line":3890,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3890,"column":0},"generated":{"line":3891,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3891,"column":0},"generated":{"line":3892,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3892,"column":0},"generated":{"line":3893,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3893,"column":0},"generated":{"line":3894,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3894,"column":0},"generated":{"line":3895,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3895,"column":0},"generated":{"line":3896,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3896,"column":0},"generated":{"line":3897,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3897,"column":0},"generated":{"line":3898,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3898,"column":0},"generated":{"line":3899,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3899,"column":0},"generated":{"line":3900,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3900,"column":0},"generated":{"line":3901,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3901,"column":0},"generated":{"line":3902,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3902,"column":0},"generated":{"line":3903,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3903,"column":0},"generated":{"line":3904,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3904,"column":0},"generated":{"line":3905,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3905,"column":0},"generated":{"line":3906,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3906,"column":0},"generated":{"line":3907,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3907,"column":0},"generated":{"line":3908,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3908,"column":0},"generated":{"line":3909,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3909,"column":0},"generated":{"line":3910,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3910,"column":0},"generated":{"line":3911,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3911,"column":0},"generated":{"line":3912,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3912,"column":0},"generated":{"line":3913,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3913,"column":0},"generated":{"line":3914,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3914,"column":0},"generated":{"line":3915,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3915,"column":0},"generated":{"line":3916,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3916,"column":0},"generated":{"line":3917,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3917,"column":0},"generated":{"line":3918,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3918,"column":0},"generated":{"line":3919,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3919,"column":0},"generated":{"line":3920,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3920,"column":0},"generated":{"line":3921,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3921,"column":0},"generated":{"line":3922,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3922,"column":0},"generated":{"line":3923,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3923,"column":0},"generated":{"line":3924,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3924,"column":0},"generated":{"line":3925,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3925,"column":0},"generated":{"line":3926,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3926,"column":0},"generated":{"line":3927,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3927,"column":0},"generated":{"line":3928,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3928,"column":0},"generated":{"line":3929,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3929,"column":0},"generated":{"line":3930,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3930,"column":0},"generated":{"line":3931,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3931,"column":0},"generated":{"line":3932,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3932,"column":0},"generated":{"line":3933,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3933,"column":0},"generated":{"line":3934,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3934,"column":0},"generated":{"line":3935,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3935,"column":0},"generated":{"line":3936,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3936,"column":0},"generated":{"line":3937,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3937,"column":0},"generated":{"line":3938,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3938,"column":0},"generated":{"line":3939,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3939,"column":0},"generated":{"line":3940,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3940,"column":0},"generated":{"line":3941,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3941,"column":0},"generated":{"line":3942,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3942,"column":0},"generated":{"line":3943,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3943,"column":0},"generated":{"line":3944,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3944,"column":0},"generated":{"line":3945,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3945,"column":0},"generated":{"line":3946,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3946,"column":0},"generated":{"line":3947,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3947,"column":0},"generated":{"line":3948,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3948,"column":0},"generated":{"line":3949,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3949,"column":0},"generated":{"line":3950,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3950,"column":0},"generated":{"line":3951,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3951,"column":0},"generated":{"line":3952,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3952,"column":0},"generated":{"line":3953,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3953,"column":0},"generated":{"line":3954,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3954,"column":0},"generated":{"line":3955,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3955,"column":0},"generated":{"line":3956,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3956,"column":0},"generated":{"line":3957,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3957,"column":0},"generated":{"line":3958,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3958,"column":0},"generated":{"line":3959,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3959,"column":0},"generated":{"line":3960,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3960,"column":0},"generated":{"line":3961,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3961,"column":0},"generated":{"line":3962,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3962,"column":0},"generated":{"line":3963,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3963,"column":0},"generated":{"line":3964,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3964,"column":0},"generated":{"line":3965,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3965,"column":0},"generated":{"line":3966,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3966,"column":0},"generated":{"line":3967,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3967,"column":0},"generated":{"line":3968,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3968,"column":0},"generated":{"line":3969,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3969,"column":0},"generated":{"line":3970,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3970,"column":0},"generated":{"line":3971,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3971,"column":0},"generated":{"line":3972,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3972,"column":0},"generated":{"line":3973,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3973,"column":0},"generated":{"line":3974,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3974,"column":0},"generated":{"line":3975,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3975,"column":0},"generated":{"line":3976,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3976,"column":0},"generated":{"line":3977,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3977,"column":0},"generated":{"line":3978,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3978,"column":0},"generated":{"line":3979,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3979,"column":0},"generated":{"line":3980,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3980,"column":0},"generated":{"line":3981,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3981,"column":0},"generated":{"line":3982,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3982,"column":0},"generated":{"line":3983,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3983,"column":0},"generated":{"line":3984,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3984,"column":0},"generated":{"line":3985,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3985,"column":0},"generated":{"line":3986,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3986,"column":0},"generated":{"line":3987,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3987,"column":0},"generated":{"line":3988,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3988,"column":0},"generated":{"line":3989,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3989,"column":0},"generated":{"line":3990,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3990,"column":0},"generated":{"line":3991,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3991,"column":0},"generated":{"line":3992,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3992,"column":0},"generated":{"line":3993,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3993,"column":0},"generated":{"line":3994,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3994,"column":0},"generated":{"line":3995,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3995,"column":0},"generated":{"line":3996,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3996,"column":0},"generated":{"line":3997,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3997,"column":0},"generated":{"line":3998,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3998,"column":0},"generated":{"line":3999,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":3999,"column":0},"generated":{"line":4000,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4000,"column":0},"generated":{"line":4001,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4001,"column":0},"generated":{"line":4002,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4002,"column":0},"generated":{"line":4003,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4003,"column":0},"generated":{"line":4004,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4004,"column":0},"generated":{"line":4005,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4005,"column":0},"generated":{"line":4006,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4006,"column":0},"generated":{"line":4007,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4007,"column":0},"generated":{"line":4008,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4008,"column":0},"generated":{"line":4009,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4009,"column":0},"generated":{"line":4010,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4010,"column":0},"generated":{"line":4011,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4011,"column":0},"generated":{"line":4012,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4012,"column":0},"generated":{"line":4013,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4013,"column":0},"generated":{"line":4014,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4014,"column":0},"generated":{"line":4015,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4015,"column":0},"generated":{"line":4016,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4016,"column":0},"generated":{"line":4017,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4017,"column":0},"generated":{"line":4018,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4018,"column":0},"generated":{"line":4019,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4019,"column":0},"generated":{"line":4020,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4020,"column":0},"generated":{"line":4021,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4021,"column":0},"generated":{"line":4022,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4022,"column":0},"generated":{"line":4023,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4023,"column":0},"generated":{"line":4024,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4024,"column":0},"generated":{"line":4025,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4025,"column":0},"generated":{"line":4026,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4026,"column":0},"generated":{"line":4027,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4027,"column":0},"generated":{"line":4028,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4028,"column":0},"generated":{"line":4029,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4029,"column":0},"generated":{"line":4030,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4030,"column":0},"generated":{"line":4031,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4031,"column":0},"generated":{"line":4032,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4032,"column":0},"generated":{"line":4033,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4033,"column":0},"generated":{"line":4034,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4034,"column":0},"generated":{"line":4035,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4035,"column":0},"generated":{"line":4036,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4036,"column":0},"generated":{"line":4037,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4037,"column":0},"generated":{"line":4038,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4038,"column":0},"generated":{"line":4039,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4039,"column":0},"generated":{"line":4040,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4040,"column":0},"generated":{"line":4041,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4041,"column":0},"generated":{"line":4042,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4042,"column":0},"generated":{"line":4043,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4043,"column":0},"generated":{"line":4044,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4044,"column":0},"generated":{"line":4045,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4045,"column":0},"generated":{"line":4046,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4046,"column":0},"generated":{"line":4047,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4047,"column":0},"generated":{"line":4048,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4048,"column":0},"generated":{"line":4049,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4049,"column":0},"generated":{"line":4050,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4050,"column":0},"generated":{"line":4051,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4051,"column":0},"generated":{"line":4052,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4052,"column":0},"generated":{"line":4053,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4053,"column":0},"generated":{"line":4054,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4054,"column":0},"generated":{"line":4055,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4055,"column":0},"generated":{"line":4056,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4056,"column":0},"generated":{"line":4057,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4057,"column":0},"generated":{"line":4058,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4058,"column":0},"generated":{"line":4059,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4059,"column":0},"generated":{"line":4060,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4060,"column":0},"generated":{"line":4061,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4061,"column":0},"generated":{"line":4062,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4062,"column":0},"generated":{"line":4063,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4063,"column":0},"generated":{"line":4064,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4064,"column":0},"generated":{"line":4065,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4065,"column":0},"generated":{"line":4066,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4066,"column":0},"generated":{"line":4067,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4067,"column":0},"generated":{"line":4068,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4068,"column":0},"generated":{"line":4069,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4069,"column":0},"generated":{"line":4070,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4070,"column":0},"generated":{"line":4071,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4071,"column":0},"generated":{"line":4072,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4072,"column":0},"generated":{"line":4073,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4073,"column":0},"generated":{"line":4074,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4074,"column":0},"generated":{"line":4075,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4075,"column":0},"generated":{"line":4076,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4076,"column":0},"generated":{"line":4077,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4077,"column":0},"generated":{"line":4078,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4078,"column":0},"generated":{"line":4079,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4079,"column":0},"generated":{"line":4080,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4080,"column":0},"generated":{"line":4081,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4081,"column":0},"generated":{"line":4082,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4082,"column":0},"generated":{"line":4083,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4083,"column":0},"generated":{"line":4084,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4084,"column":0},"generated":{"line":4085,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4085,"column":0},"generated":{"line":4086,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4086,"column":0},"generated":{"line":4087,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4087,"column":0},"generated":{"line":4088,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4088,"column":0},"generated":{"line":4089,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4089,"column":0},"generated":{"line":4090,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4090,"column":0},"generated":{"line":4091,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4091,"column":0},"generated":{"line":4092,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4092,"column":0},"generated":{"line":4093,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4093,"column":0},"generated":{"line":4094,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4094,"column":0},"generated":{"line":4095,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4095,"column":0},"generated":{"line":4096,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4096,"column":0},"generated":{"line":4097,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4097,"column":0},"generated":{"line":4098,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4098,"column":0},"generated":{"line":4099,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4099,"column":0},"generated":{"line":4100,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4100,"column":0},"generated":{"line":4101,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4101,"column":0},"generated":{"line":4102,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4102,"column":0},"generated":{"line":4103,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4103,"column":0},"generated":{"line":4104,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4104,"column":0},"generated":{"line":4105,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4105,"column":0},"generated":{"line":4106,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4106,"column":0},"generated":{"line":4107,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4107,"column":0},"generated":{"line":4108,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4108,"column":0},"generated":{"line":4109,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4109,"column":0},"generated":{"line":4110,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4110,"column":0},"generated":{"line":4111,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4111,"column":0},"generated":{"line":4112,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4112,"column":0},"generated":{"line":4113,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4113,"column":0},"generated":{"line":4114,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4114,"column":0},"generated":{"line":4115,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4115,"column":0},"generated":{"line":4116,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4116,"column":0},"generated":{"line":4117,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4117,"column":0},"generated":{"line":4118,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4118,"column":0},"generated":{"line":4119,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4119,"column":0},"generated":{"line":4120,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4120,"column":0},"generated":{"line":4121,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4121,"column":0},"generated":{"line":4122,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4122,"column":0},"generated":{"line":4123,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4123,"column":0},"generated":{"line":4124,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4124,"column":0},"generated":{"line":4125,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4125,"column":0},"generated":{"line":4126,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4126,"column":0},"generated":{"line":4127,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4127,"column":0},"generated":{"line":4128,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4128,"column":0},"generated":{"line":4129,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4129,"column":0},"generated":{"line":4130,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4130,"column":0},"generated":{"line":4131,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4131,"column":0},"generated":{"line":4132,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4132,"column":0},"generated":{"line":4133,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4133,"column":0},"generated":{"line":4134,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4134,"column":0},"generated":{"line":4135,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4135,"column":0},"generated":{"line":4136,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4136,"column":0},"generated":{"line":4137,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4137,"column":0},"generated":{"line":4138,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4138,"column":0},"generated":{"line":4139,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4139,"column":0},"generated":{"line":4140,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4140,"column":0},"generated":{"line":4141,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4141,"column":0},"generated":{"line":4142,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4142,"column":0},"generated":{"line":4143,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4143,"column":0},"generated":{"line":4144,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4144,"column":0},"generated":{"line":4145,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4145,"column":0},"generated":{"line":4146,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4146,"column":0},"generated":{"line":4147,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4147,"column":0},"generated":{"line":4148,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4148,"column":0},"generated":{"line":4149,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4149,"column":0},"generated":{"line":4150,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4150,"column":0},"generated":{"line":4151,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4151,"column":0},"generated":{"line":4152,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4152,"column":0},"generated":{"line":4153,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4153,"column":0},"generated":{"line":4154,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4154,"column":0},"generated":{"line":4155,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4155,"column":0},"generated":{"line":4156,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4156,"column":0},"generated":{"line":4157,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4157,"column":0},"generated":{"line":4158,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4158,"column":0},"generated":{"line":4159,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4159,"column":0},"generated":{"line":4160,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4160,"column":0},"generated":{"line":4161,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4161,"column":0},"generated":{"line":4162,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4162,"column":0},"generated":{"line":4163,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4163,"column":0},"generated":{"line":4164,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4164,"column":0},"generated":{"line":4165,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4165,"column":0},"generated":{"line":4166,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4166,"column":0},"generated":{"line":4167,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4167,"column":0},"generated":{"line":4168,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4168,"column":0},"generated":{"line":4169,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4169,"column":0},"generated":{"line":4170,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4170,"column":0},"generated":{"line":4171,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4171,"column":0},"generated":{"line":4172,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4172,"column":0},"generated":{"line":4173,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4173,"column":0},"generated":{"line":4174,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4174,"column":0},"generated":{"line":4175,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4175,"column":0},"generated":{"line":4176,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4176,"column":0},"generated":{"line":4177,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4177,"column":0},"generated":{"line":4178,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4178,"column":0},"generated":{"line":4179,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4179,"column":0},"generated":{"line":4180,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4180,"column":0},"generated":{"line":4181,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4181,"column":0},"generated":{"line":4182,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4182,"column":0},"generated":{"line":4183,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4183,"column":0},"generated":{"line":4184,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4184,"column":0},"generated":{"line":4185,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4185,"column":0},"generated":{"line":4186,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4186,"column":0},"generated":{"line":4187,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4187,"column":0},"generated":{"line":4188,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4188,"column":0},"generated":{"line":4189,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4189,"column":0},"generated":{"line":4190,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4190,"column":0},"generated":{"line":4191,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4191,"column":0},"generated":{"line":4192,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4192,"column":0},"generated":{"line":4193,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4193,"column":0},"generated":{"line":4194,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4194,"column":0},"generated":{"line":4195,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4195,"column":0},"generated":{"line":4196,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4196,"column":0},"generated":{"line":4197,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4197,"column":0},"generated":{"line":4198,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4198,"column":0},"generated":{"line":4199,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4199,"column":0},"generated":{"line":4200,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4200,"column":0},"generated":{"line":4201,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4201,"column":0},"generated":{"line":4202,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4202,"column":0},"generated":{"line":4203,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4203,"column":0},"generated":{"line":4204,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4204,"column":0},"generated":{"line":4205,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4205,"column":0},"generated":{"line":4206,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4206,"column":0},"generated":{"line":4207,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4207,"column":0},"generated":{"line":4208,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4208,"column":0},"generated":{"line":4209,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4209,"column":0},"generated":{"line":4210,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4210,"column":0},"generated":{"line":4211,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4211,"column":0},"generated":{"line":4212,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4212,"column":0},"generated":{"line":4213,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4213,"column":0},"generated":{"line":4214,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4214,"column":0},"generated":{"line":4215,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4215,"column":0},"generated":{"line":4216,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4216,"column":0},"generated":{"line":4217,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4217,"column":0},"generated":{"line":4218,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4218,"column":0},"generated":{"line":4219,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4219,"column":0},"generated":{"line":4220,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4220,"column":0},"generated":{"line":4221,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4221,"column":0},"generated":{"line":4222,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4222,"column":0},"generated":{"line":4223,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4223,"column":0},"generated":{"line":4224,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4224,"column":0},"generated":{"line":4225,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4225,"column":0},"generated":{"line":4226,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4226,"column":0},"generated":{"line":4227,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4227,"column":0},"generated":{"line":4228,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4228,"column":0},"generated":{"line":4229,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4229,"column":0},"generated":{"line":4230,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4230,"column":0},"generated":{"line":4231,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4231,"column":0},"generated":{"line":4232,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4232,"column":0},"generated":{"line":4233,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4233,"column":0},"generated":{"line":4234,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4234,"column":0},"generated":{"line":4235,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4235,"column":0},"generated":{"line":4236,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4236,"column":0},"generated":{"line":4237,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4237,"column":0},"generated":{"line":4238,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4238,"column":0},"generated":{"line":4239,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4239,"column":0},"generated":{"line":4240,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4240,"column":0},"generated":{"line":4241,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4241,"column":0},"generated":{"line":4242,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4242,"column":0},"generated":{"line":4243,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4243,"column":0},"generated":{"line":4244,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4244,"column":0},"generated":{"line":4245,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4245,"column":0},"generated":{"line":4246,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4246,"column":0},"generated":{"line":4247,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4247,"column":0},"generated":{"line":4248,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4248,"column":0},"generated":{"line":4249,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4249,"column":0},"generated":{"line":4250,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4250,"column":0},"generated":{"line":4251,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4251,"column":0},"generated":{"line":4252,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4252,"column":0},"generated":{"line":4253,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4253,"column":0},"generated":{"line":4254,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4254,"column":0},"generated":{"line":4255,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4255,"column":0},"generated":{"line":4256,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4256,"column":0},"generated":{"line":4257,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4257,"column":0},"generated":{"line":4258,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4258,"column":0},"generated":{"line":4259,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4259,"column":0},"generated":{"line":4260,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4260,"column":0},"generated":{"line":4261,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4261,"column":0},"generated":{"line":4262,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4262,"column":0},"generated":{"line":4263,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4263,"column":0},"generated":{"line":4264,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4264,"column":0},"generated":{"line":4265,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4265,"column":0},"generated":{"line":4266,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4266,"column":0},"generated":{"line":4267,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4267,"column":0},"generated":{"line":4268,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4268,"column":0},"generated":{"line":4269,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4269,"column":0},"generated":{"line":4270,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4270,"column":0},"generated":{"line":4271,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4271,"column":0},"generated":{"line":4272,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4272,"column":0},"generated":{"line":4273,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4273,"column":0},"generated":{"line":4274,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4274,"column":0},"generated":{"line":4275,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4275,"column":0},"generated":{"line":4276,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4276,"column":0},"generated":{"line":4277,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4277,"column":0},"generated":{"line":4278,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4278,"column":0},"generated":{"line":4279,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4279,"column":0},"generated":{"line":4280,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4280,"column":0},"generated":{"line":4281,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4281,"column":0},"generated":{"line":4282,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4282,"column":0},"generated":{"line":4283,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4283,"column":0},"generated":{"line":4284,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4284,"column":0},"generated":{"line":4285,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4285,"column":0},"generated":{"line":4286,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4286,"column":0},"generated":{"line":4287,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4287,"column":0},"generated":{"line":4288,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4288,"column":0},"generated":{"line":4289,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4289,"column":0},"generated":{"line":4290,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4290,"column":0},"generated":{"line":4291,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4291,"column":0},"generated":{"line":4292,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4292,"column":0},"generated":{"line":4293,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4293,"column":0},"generated":{"line":4294,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4294,"column":0},"generated":{"line":4295,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4295,"column":0},"generated":{"line":4296,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4296,"column":0},"generated":{"line":4297,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4297,"column":0},"generated":{"line":4298,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4298,"column":0},"generated":{"line":4299,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4299,"column":0},"generated":{"line":4300,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4300,"column":0},"generated":{"line":4301,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4301,"column":0},"generated":{"line":4302,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4302,"column":0},"generated":{"line":4303,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4303,"column":0},"generated":{"line":4304,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4304,"column":0},"generated":{"line":4305,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4305,"column":0},"generated":{"line":4306,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4306,"column":0},"generated":{"line":4307,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4307,"column":0},"generated":{"line":4308,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4308,"column":0},"generated":{"line":4309,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4309,"column":0},"generated":{"line":4310,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4310,"column":0},"generated":{"line":4311,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4311,"column":0},"generated":{"line":4312,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4312,"column":0},"generated":{"line":4313,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4313,"column":0},"generated":{"line":4314,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4314,"column":0},"generated":{"line":4315,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4315,"column":0},"generated":{"line":4316,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4316,"column":0},"generated":{"line":4317,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4317,"column":0},"generated":{"line":4318,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4318,"column":0},"generated":{"line":4319,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4319,"column":0},"generated":{"line":4320,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4320,"column":0},"generated":{"line":4321,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4321,"column":0},"generated":{"line":4322,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4322,"column":0},"generated":{"line":4323,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4323,"column":0},"generated":{"line":4324,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4324,"column":0},"generated":{"line":4325,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4325,"column":0},"generated":{"line":4326,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4326,"column":0},"generated":{"line":4327,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4327,"column":0},"generated":{"line":4328,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4328,"column":0},"generated":{"line":4329,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4329,"column":0},"generated":{"line":4330,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4330,"column":0},"generated":{"line":4331,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4331,"column":0},"generated":{"line":4332,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4332,"column":0},"generated":{"line":4333,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4333,"column":0},"generated":{"line":4334,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4334,"column":0},"generated":{"line":4335,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4335,"column":0},"generated":{"line":4336,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4336,"column":0},"generated":{"line":4337,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4337,"column":0},"generated":{"line":4338,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4338,"column":0},"generated":{"line":4339,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4339,"column":0},"generated":{"line":4340,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4340,"column":0},"generated":{"line":4341,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4341,"column":0},"generated":{"line":4342,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4342,"column":0},"generated":{"line":4343,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4343,"column":0},"generated":{"line":4344,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4344,"column":0},"generated":{"line":4345,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4345,"column":0},"generated":{"line":4346,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4346,"column":0},"generated":{"line":4347,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4347,"column":0},"generated":{"line":4348,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4348,"column":0},"generated":{"line":4349,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4349,"column":0},"generated":{"line":4350,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4350,"column":0},"generated":{"line":4351,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4351,"column":0},"generated":{"line":4352,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4352,"column":0},"generated":{"line":4353,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4353,"column":0},"generated":{"line":4354,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4354,"column":0},"generated":{"line":4355,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4355,"column":0},"generated":{"line":4356,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4356,"column":0},"generated":{"line":4357,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4357,"column":0},"generated":{"line":4358,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4358,"column":0},"generated":{"line":4359,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4359,"column":0},"generated":{"line":4360,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4360,"column":0},"generated":{"line":4361,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4361,"column":0},"generated":{"line":4362,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4362,"column":0},"generated":{"line":4363,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4363,"column":0},"generated":{"line":4364,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4364,"column":0},"generated":{"line":4365,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4365,"column":0},"generated":{"line":4366,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4366,"column":0},"generated":{"line":4367,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4367,"column":0},"generated":{"line":4368,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4368,"column":0},"generated":{"line":4369,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4369,"column":0},"generated":{"line":4370,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4370,"column":0},"generated":{"line":4371,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4371,"column":0},"generated":{"line":4372,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4372,"column":0},"generated":{"line":4373,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4373,"column":0},"generated":{"line":4374,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4374,"column":0},"generated":{"line":4375,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4375,"column":0},"generated":{"line":4376,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4376,"column":0},"generated":{"line":4377,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4377,"column":0},"generated":{"line":4378,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4378,"column":0},"generated":{"line":4379,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4379,"column":0},"generated":{"line":4380,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4380,"column":0},"generated":{"line":4381,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4381,"column":0},"generated":{"line":4382,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4382,"column":0},"generated":{"line":4383,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4383,"column":0},"generated":{"line":4384,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4384,"column":0},"generated":{"line":4385,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4385,"column":0},"generated":{"line":4386,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4386,"column":0},"generated":{"line":4387,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4387,"column":0},"generated":{"line":4388,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4388,"column":0},"generated":{"line":4389,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4389,"column":0},"generated":{"line":4390,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4390,"column":0},"generated":{"line":4391,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4391,"column":0},"generated":{"line":4392,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4392,"column":0},"generated":{"line":4393,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4393,"column":0},"generated":{"line":4394,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4394,"column":0},"generated":{"line":4395,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4395,"column":0},"generated":{"line":4396,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4396,"column":0},"generated":{"line":4397,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4397,"column":0},"generated":{"line":4398,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4398,"column":0},"generated":{"line":4399,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4399,"column":0},"generated":{"line":4400,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4400,"column":0},"generated":{"line":4401,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4401,"column":0},"generated":{"line":4402,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4402,"column":0},"generated":{"line":4403,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4403,"column":0},"generated":{"line":4404,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4404,"column":0},"generated":{"line":4405,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4405,"column":0},"generated":{"line":4406,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4406,"column":0},"generated":{"line":4407,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4407,"column":0},"generated":{"line":4408,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4408,"column":0},"generated":{"line":4409,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4409,"column":0},"generated":{"line":4410,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4410,"column":0},"generated":{"line":4411,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4411,"column":0},"generated":{"line":4412,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4412,"column":0},"generated":{"line":4413,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4413,"column":0},"generated":{"line":4414,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4414,"column":0},"generated":{"line":4415,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4415,"column":0},"generated":{"line":4416,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4416,"column":0},"generated":{"line":4417,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4417,"column":0},"generated":{"line":4418,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4418,"column":0},"generated":{"line":4419,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4419,"column":0},"generated":{"line":4420,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4420,"column":0},"generated":{"line":4421,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4421,"column":0},"generated":{"line":4422,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4422,"column":0},"generated":{"line":4423,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4423,"column":0},"generated":{"line":4424,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4424,"column":0},"generated":{"line":4425,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4425,"column":0},"generated":{"line":4426,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4426,"column":0},"generated":{"line":4427,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4427,"column":0},"generated":{"line":4428,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4428,"column":0},"generated":{"line":4429,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4429,"column":0},"generated":{"line":4430,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4430,"column":0},"generated":{"line":4431,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4431,"column":0},"generated":{"line":4432,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4432,"column":0},"generated":{"line":4433,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4433,"column":0},"generated":{"line":4434,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4434,"column":0},"generated":{"line":4435,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4435,"column":0},"generated":{"line":4436,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4436,"column":0},"generated":{"line":4437,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4437,"column":0},"generated":{"line":4438,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4438,"column":0},"generated":{"line":4439,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4439,"column":0},"generated":{"line":4440,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4440,"column":0},"generated":{"line":4441,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4441,"column":0},"generated":{"line":4442,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4442,"column":0},"generated":{"line":4443,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4443,"column":0},"generated":{"line":4444,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4444,"column":0},"generated":{"line":4445,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4445,"column":0},"generated":{"line":4446,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4446,"column":0},"generated":{"line":4447,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4447,"column":0},"generated":{"line":4448,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4448,"column":0},"generated":{"line":4449,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4449,"column":0},"generated":{"line":4450,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4450,"column":0},"generated":{"line":4451,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4451,"column":0},"generated":{"line":4452,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4452,"column":0},"generated":{"line":4453,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4453,"column":0},"generated":{"line":4454,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4454,"column":0},"generated":{"line":4455,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4455,"column":0},"generated":{"line":4456,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4456,"column":0},"generated":{"line":4457,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4457,"column":0},"generated":{"line":4458,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4458,"column":0},"generated":{"line":4459,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4459,"column":0},"generated":{"line":4460,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4460,"column":0},"generated":{"line":4461,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4461,"column":0},"generated":{"line":4462,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4462,"column":0},"generated":{"line":4463,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4463,"column":0},"generated":{"line":4464,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4464,"column":0},"generated":{"line":4465,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4465,"column":0},"generated":{"line":4466,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4466,"column":0},"generated":{"line":4467,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4467,"column":0},"generated":{"line":4468,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4468,"column":0},"generated":{"line":4469,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4469,"column":0},"generated":{"line":4470,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4470,"column":0},"generated":{"line":4471,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4471,"column":0},"generated":{"line":4472,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4472,"column":0},"generated":{"line":4473,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4473,"column":0},"generated":{"line":4474,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4474,"column":0},"generated":{"line":4475,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4475,"column":0},"generated":{"line":4476,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4476,"column":0},"generated":{"line":4477,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4477,"column":0},"generated":{"line":4478,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4478,"column":0},"generated":{"line":4479,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4479,"column":0},"generated":{"line":4480,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4480,"column":0},"generated":{"line":4481,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4481,"column":0},"generated":{"line":4482,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4482,"column":0},"generated":{"line":4483,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4483,"column":0},"generated":{"line":4484,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4484,"column":0},"generated":{"line":4485,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4485,"column":0},"generated":{"line":4486,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4486,"column":0},"generated":{"line":4487,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4487,"column":0},"generated":{"line":4488,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4488,"column":0},"generated":{"line":4489,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4489,"column":0},"generated":{"line":4490,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4490,"column":0},"generated":{"line":4491,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4491,"column":0},"generated":{"line":4492,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4492,"column":0},"generated":{"line":4493,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4493,"column":0},"generated":{"line":4494,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4494,"column":0},"generated":{"line":4495,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4495,"column":0},"generated":{"line":4496,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4496,"column":0},"generated":{"line":4497,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4497,"column":0},"generated":{"line":4498,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4498,"column":0},"generated":{"line":4499,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4499,"column":0},"generated":{"line":4500,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4500,"column":0},"generated":{"line":4501,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4501,"column":0},"generated":{"line":4502,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4502,"column":0},"generated":{"line":4503,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4503,"column":0},"generated":{"line":4504,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4504,"column":0},"generated":{"line":4505,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4505,"column":0},"generated":{"line":4506,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4506,"column":0},"generated":{"line":4507,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4507,"column":0},"generated":{"line":4508,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4508,"column":0},"generated":{"line":4509,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4509,"column":0},"generated":{"line":4510,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4510,"column":0},"generated":{"line":4511,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4511,"column":0},"generated":{"line":4512,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4512,"column":0},"generated":{"line":4513,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4513,"column":0},"generated":{"line":4514,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4514,"column":0},"generated":{"line":4515,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4515,"column":0},"generated":{"line":4516,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4516,"column":0},"generated":{"line":4517,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4517,"column":0},"generated":{"line":4518,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4518,"column":0},"generated":{"line":4519,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4519,"column":0},"generated":{"line":4520,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4520,"column":0},"generated":{"line":4521,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4521,"column":0},"generated":{"line":4522,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4522,"column":0},"generated":{"line":4523,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4523,"column":0},"generated":{"line":4524,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4524,"column":0},"generated":{"line":4525,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4525,"column":0},"generated":{"line":4526,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4526,"column":0},"generated":{"line":4527,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4527,"column":0},"generated":{"line":4528,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4528,"column":0},"generated":{"line":4529,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4529,"column":0},"generated":{"line":4530,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4530,"column":0},"generated":{"line":4531,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4531,"column":0},"generated":{"line":4532,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4532,"column":0},"generated":{"line":4533,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4533,"column":0},"generated":{"line":4534,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4534,"column":0},"generated":{"line":4535,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4535,"column":0},"generated":{"line":4536,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4536,"column":0},"generated":{"line":4537,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4537,"column":0},"generated":{"line":4538,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4538,"column":0},"generated":{"line":4539,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4539,"column":0},"generated":{"line":4540,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4540,"column":0},"generated":{"line":4541,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4541,"column":0},"generated":{"line":4542,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4542,"column":0},"generated":{"line":4543,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4543,"column":0},"generated":{"line":4544,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4544,"column":0},"generated":{"line":4545,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4545,"column":0},"generated":{"line":4546,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4546,"column":0},"generated":{"line":4547,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4547,"column":0},"generated":{"line":4548,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4548,"column":0},"generated":{"line":4549,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4549,"column":0},"generated":{"line":4550,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4550,"column":0},"generated":{"line":4551,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4551,"column":0},"generated":{"line":4552,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4552,"column":0},"generated":{"line":4553,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4553,"column":0},"generated":{"line":4554,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4554,"column":0},"generated":{"line":4555,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4555,"column":0},"generated":{"line":4556,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4556,"column":0},"generated":{"line":4557,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4557,"column":0},"generated":{"line":4558,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4558,"column":0},"generated":{"line":4559,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4559,"column":0},"generated":{"line":4560,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4560,"column":0},"generated":{"line":4561,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4561,"column":0},"generated":{"line":4562,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4562,"column":0},"generated":{"line":4563,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4563,"column":0},"generated":{"line":4564,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4564,"column":0},"generated":{"line":4565,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4565,"column":0},"generated":{"line":4566,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4566,"column":0},"generated":{"line":4567,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4567,"column":0},"generated":{"line":4568,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4568,"column":0},"generated":{"line":4569,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4569,"column":0},"generated":{"line":4570,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4570,"column":0},"generated":{"line":4571,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4571,"column":0},"generated":{"line":4572,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4572,"column":0},"generated":{"line":4573,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4573,"column":0},"generated":{"line":4574,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4574,"column":0},"generated":{"line":4575,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4575,"column":0},"generated":{"line":4576,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4576,"column":0},"generated":{"line":4577,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4577,"column":0},"generated":{"line":4578,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4578,"column":0},"generated":{"line":4579,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4579,"column":0},"generated":{"line":4580,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4580,"column":0},"generated":{"line":4581,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4581,"column":0},"generated":{"line":4582,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4582,"column":0},"generated":{"line":4583,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4583,"column":0},"generated":{"line":4584,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4584,"column":0},"generated":{"line":4585,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4585,"column":0},"generated":{"line":4586,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4586,"column":0},"generated":{"line":4587,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4587,"column":0},"generated":{"line":4588,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4588,"column":0},"generated":{"line":4589,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4589,"column":0},"generated":{"line":4590,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4590,"column":0},"generated":{"line":4591,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4591,"column":0},"generated":{"line":4592,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4592,"column":0},"generated":{"line":4593,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4593,"column":0},"generated":{"line":4594,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4594,"column":0},"generated":{"line":4595,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4595,"column":0},"generated":{"line":4596,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4596,"column":0},"generated":{"line":4597,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4597,"column":0},"generated":{"line":4598,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4598,"column":0},"generated":{"line":4599,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4599,"column":0},"generated":{"line":4600,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4600,"column":0},"generated":{"line":4601,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4601,"column":0},"generated":{"line":4602,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4602,"column":0},"generated":{"line":4603,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4603,"column":0},"generated":{"line":4604,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4604,"column":0},"generated":{"line":4605,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4605,"column":0},"generated":{"line":4606,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4606,"column":0},"generated":{"line":4607,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4607,"column":0},"generated":{"line":4608,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4608,"column":0},"generated":{"line":4609,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4609,"column":0},"generated":{"line":4610,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4610,"column":0},"generated":{"line":4611,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4611,"column":0},"generated":{"line":4612,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4612,"column":0},"generated":{"line":4613,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4613,"column":0},"generated":{"line":4614,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4614,"column":0},"generated":{"line":4615,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4615,"column":0},"generated":{"line":4616,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4616,"column":0},"generated":{"line":4617,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4617,"column":0},"generated":{"line":4618,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4618,"column":0},"generated":{"line":4619,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4619,"column":0},"generated":{"line":4620,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4620,"column":0},"generated":{"line":4621,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4621,"column":0},"generated":{"line":4622,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4622,"column":0},"generated":{"line":4623,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4623,"column":0},"generated":{"line":4624,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4624,"column":0},"generated":{"line":4625,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4625,"column":0},"generated":{"line":4626,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4626,"column":0},"generated":{"line":4627,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4627,"column":0},"generated":{"line":4628,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4628,"column":0},"generated":{"line":4629,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4629,"column":0},"generated":{"line":4630,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4630,"column":0},"generated":{"line":4631,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4631,"column":0},"generated":{"line":4632,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4632,"column":0},"generated":{"line":4633,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4633,"column":0},"generated":{"line":4634,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4634,"column":0},"generated":{"line":4635,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4635,"column":0},"generated":{"line":4636,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4636,"column":0},"generated":{"line":4637,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4637,"column":0},"generated":{"line":4638,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4638,"column":0},"generated":{"line":4639,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4639,"column":0},"generated":{"line":4640,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4640,"column":0},"generated":{"line":4641,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4641,"column":0},"generated":{"line":4642,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4642,"column":0},"generated":{"line":4643,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4643,"column":0},"generated":{"line":4644,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4644,"column":0},"generated":{"line":4645,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4645,"column":0},"generated":{"line":4646,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4646,"column":0},"generated":{"line":4647,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4647,"column":0},"generated":{"line":4648,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4648,"column":0},"generated":{"line":4649,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4649,"column":0},"generated":{"line":4650,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4650,"column":0},"generated":{"line":4651,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4651,"column":0},"generated":{"line":4652,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4652,"column":0},"generated":{"line":4653,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4653,"column":0},"generated":{"line":4654,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4654,"column":0},"generated":{"line":4655,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4655,"column":0},"generated":{"line":4656,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4656,"column":0},"generated":{"line":4657,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4657,"column":0},"generated":{"line":4658,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4658,"column":0},"generated":{"line":4659,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4659,"column":0},"generated":{"line":4660,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4660,"column":0},"generated":{"line":4661,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4661,"column":0},"generated":{"line":4662,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4662,"column":0},"generated":{"line":4663,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4663,"column":0},"generated":{"line":4664,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4664,"column":0},"generated":{"line":4665,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4665,"column":0},"generated":{"line":4666,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4666,"column":0},"generated":{"line":4667,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4667,"column":0},"generated":{"line":4668,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4668,"column":0},"generated":{"line":4669,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4669,"column":0},"generated":{"line":4670,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4670,"column":0},"generated":{"line":4671,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4671,"column":0},"generated":{"line":4672,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4672,"column":0},"generated":{"line":4673,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4673,"column":0},"generated":{"line":4674,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4674,"column":0},"generated":{"line":4675,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4675,"column":0},"generated":{"line":4676,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4676,"column":0},"generated":{"line":4677,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4677,"column":0},"generated":{"line":4678,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4678,"column":0},"generated":{"line":4679,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4679,"column":0},"generated":{"line":4680,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4680,"column":0},"generated":{"line":4681,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4681,"column":0},"generated":{"line":4682,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4682,"column":0},"generated":{"line":4683,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4683,"column":0},"generated":{"line":4684,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4684,"column":0},"generated":{"line":4685,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4685,"column":0},"generated":{"line":4686,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4686,"column":0},"generated":{"line":4687,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4687,"column":0},"generated":{"line":4688,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4688,"column":0},"generated":{"line":4689,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4689,"column":0},"generated":{"line":4690,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4690,"column":0},"generated":{"line":4691,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4691,"column":0},"generated":{"line":4692,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4692,"column":0},"generated":{"line":4693,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4693,"column":0},"generated":{"line":4694,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4694,"column":0},"generated":{"line":4695,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4695,"column":0},"generated":{"line":4696,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4696,"column":0},"generated":{"line":4697,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4697,"column":0},"generated":{"line":4698,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4698,"column":0},"generated":{"line":4699,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4699,"column":0},"generated":{"line":4700,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4700,"column":0},"generated":{"line":4701,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4701,"column":0},"generated":{"line":4702,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4702,"column":0},"generated":{"line":4703,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4703,"column":0},"generated":{"line":4704,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4704,"column":0},"generated":{"line":4705,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4705,"column":0},"generated":{"line":4706,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4706,"column":0},"generated":{"line":4707,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4707,"column":0},"generated":{"line":4708,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4708,"column":0},"generated":{"line":4709,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4709,"column":0},"generated":{"line":4710,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4710,"column":0},"generated":{"line":4711,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4711,"column":0},"generated":{"line":4712,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4712,"column":0},"generated":{"line":4713,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4713,"column":0},"generated":{"line":4714,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4714,"column":0},"generated":{"line":4715,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4715,"column":0},"generated":{"line":4716,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4716,"column":0},"generated":{"line":4717,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4717,"column":0},"generated":{"line":4718,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4718,"column":0},"generated":{"line":4719,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4719,"column":0},"generated":{"line":4720,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4720,"column":0},"generated":{"line":4721,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4721,"column":0},"generated":{"line":4722,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4722,"column":0},"generated":{"line":4723,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4723,"column":0},"generated":{"line":4724,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4724,"column":0},"generated":{"line":4725,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4725,"column":0},"generated":{"line":4726,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4726,"column":0},"generated":{"line":4727,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4727,"column":0},"generated":{"line":4728,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4728,"column":0},"generated":{"line":4729,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4729,"column":0},"generated":{"line":4730,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4730,"column":0},"generated":{"line":4731,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4731,"column":0},"generated":{"line":4732,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4732,"column":0},"generated":{"line":4733,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4733,"column":0},"generated":{"line":4734,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4734,"column":0},"generated":{"line":4735,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4735,"column":0},"generated":{"line":4736,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4736,"column":0},"generated":{"line":4737,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4737,"column":0},"generated":{"line":4738,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4738,"column":0},"generated":{"line":4739,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4739,"column":0},"generated":{"line":4740,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4740,"column":0},"generated":{"line":4741,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4741,"column":0},"generated":{"line":4742,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4742,"column":0},"generated":{"line":4743,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4743,"column":0},"generated":{"line":4744,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4744,"column":0},"generated":{"line":4745,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4745,"column":0},"generated":{"line":4746,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4746,"column":0},"generated":{"line":4747,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4747,"column":0},"generated":{"line":4748,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4748,"column":0},"generated":{"line":4749,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4749,"column":0},"generated":{"line":4750,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4750,"column":0},"generated":{"line":4751,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4751,"column":0},"generated":{"line":4752,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4752,"column":0},"generated":{"line":4753,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4753,"column":0},"generated":{"line":4754,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4754,"column":0},"generated":{"line":4755,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4755,"column":0},"generated":{"line":4756,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4756,"column":0},"generated":{"line":4757,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4757,"column":0},"generated":{"line":4758,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4758,"column":0},"generated":{"line":4759,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4759,"column":0},"generated":{"line":4760,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4760,"column":0},"generated":{"line":4761,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4761,"column":0},"generated":{"line":4762,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4762,"column":0},"generated":{"line":4763,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4763,"column":0},"generated":{"line":4764,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4764,"column":0},"generated":{"line":4765,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4765,"column":0},"generated":{"line":4766,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4766,"column":0},"generated":{"line":4767,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4767,"column":0},"generated":{"line":4768,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4768,"column":0},"generated":{"line":4769,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4769,"column":0},"generated":{"line":4770,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4770,"column":0},"generated":{"line":4771,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4771,"column":0},"generated":{"line":4772,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4772,"column":0},"generated":{"line":4773,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4773,"column":0},"generated":{"line":4774,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4774,"column":0},"generated":{"line":4775,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4775,"column":0},"generated":{"line":4776,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4776,"column":0},"generated":{"line":4777,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4777,"column":0},"generated":{"line":4778,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4778,"column":0},"generated":{"line":4779,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4779,"column":0},"generated":{"line":4780,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4780,"column":0},"generated":{"line":4781,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4781,"column":0},"generated":{"line":4782,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4782,"column":0},"generated":{"line":4783,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4783,"column":0},"generated":{"line":4784,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4784,"column":0},"generated":{"line":4785,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4785,"column":0},"generated":{"line":4786,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4786,"column":0},"generated":{"line":4787,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4787,"column":0},"generated":{"line":4788,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4788,"column":0},"generated":{"line":4789,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4789,"column":0},"generated":{"line":4790,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4790,"column":0},"generated":{"line":4791,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4791,"column":0},"generated":{"line":4792,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4792,"column":0},"generated":{"line":4793,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4793,"column":0},"generated":{"line":4794,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4794,"column":0},"generated":{"line":4795,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4795,"column":0},"generated":{"line":4796,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4796,"column":0},"generated":{"line":4797,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4797,"column":0},"generated":{"line":4798,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4798,"column":0},"generated":{"line":4799,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4799,"column":0},"generated":{"line":4800,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4800,"column":0},"generated":{"line":4801,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4801,"column":0},"generated":{"line":4802,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4802,"column":0},"generated":{"line":4803,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4803,"column":0},"generated":{"line":4804,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4804,"column":0},"generated":{"line":4805,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4805,"column":0},"generated":{"line":4806,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4806,"column":0},"generated":{"line":4807,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4807,"column":0},"generated":{"line":4808,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4808,"column":0},"generated":{"line":4809,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4809,"column":0},"generated":{"line":4810,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4810,"column":0},"generated":{"line":4811,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4811,"column":0},"generated":{"line":4812,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4812,"column":0},"generated":{"line":4813,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4813,"column":0},"generated":{"line":4814,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4814,"column":0},"generated":{"line":4815,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4815,"column":0},"generated":{"line":4816,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4816,"column":0},"generated":{"line":4817,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4817,"column":0},"generated":{"line":4818,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4818,"column":0},"generated":{"line":4819,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4819,"column":0},"generated":{"line":4820,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4820,"column":0},"generated":{"line":4821,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4821,"column":0},"generated":{"line":4822,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4822,"column":0},"generated":{"line":4823,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4823,"column":0},"generated":{"line":4824,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4824,"column":0},"generated":{"line":4825,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4825,"column":0},"generated":{"line":4826,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4826,"column":0},"generated":{"line":4827,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4827,"column":0},"generated":{"line":4828,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4828,"column":0},"generated":{"line":4829,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4829,"column":0},"generated":{"line":4830,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4830,"column":0},"generated":{"line":4831,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4831,"column":0},"generated":{"line":4832,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4832,"column":0},"generated":{"line":4833,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4833,"column":0},"generated":{"line":4834,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4834,"column":0},"generated":{"line":4835,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4835,"column":0},"generated":{"line":4836,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4836,"column":0},"generated":{"line":4837,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4837,"column":0},"generated":{"line":4838,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4838,"column":0},"generated":{"line":4839,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4839,"column":0},"generated":{"line":4840,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4840,"column":0},"generated":{"line":4841,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4841,"column":0},"generated":{"line":4842,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4842,"column":0},"generated":{"line":4843,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4843,"column":0},"generated":{"line":4844,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4844,"column":0},"generated":{"line":4845,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4845,"column":0},"generated":{"line":4846,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4846,"column":0},"generated":{"line":4847,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4847,"column":0},"generated":{"line":4848,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4848,"column":0},"generated":{"line":4849,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4849,"column":0},"generated":{"line":4850,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4850,"column":0},"generated":{"line":4851,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4851,"column":0},"generated":{"line":4852,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4852,"column":0},"generated":{"line":4853,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4853,"column":0},"generated":{"line":4854,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4854,"column":0},"generated":{"line":4855,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4855,"column":0},"generated":{"line":4856,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4856,"column":0},"generated":{"line":4857,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4857,"column":0},"generated":{"line":4858,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4858,"column":0},"generated":{"line":4859,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4859,"column":0},"generated":{"line":4860,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4860,"column":0},"generated":{"line":4861,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4861,"column":0},"generated":{"line":4862,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4862,"column":0},"generated":{"line":4863,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4863,"column":0},"generated":{"line":4864,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4864,"column":0},"generated":{"line":4865,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4865,"column":0},"generated":{"line":4866,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4866,"column":0},"generated":{"line":4867,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4867,"column":0},"generated":{"line":4868,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4868,"column":0},"generated":{"line":4869,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4869,"column":0},"generated":{"line":4870,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4870,"column":0},"generated":{"line":4871,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4871,"column":0},"generated":{"line":4872,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4872,"column":0},"generated":{"line":4873,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4873,"column":0},"generated":{"line":4874,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4874,"column":0},"generated":{"line":4875,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4875,"column":0},"generated":{"line":4876,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4876,"column":0},"generated":{"line":4877,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4877,"column":0},"generated":{"line":4878,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4878,"column":0},"generated":{"line":4879,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4879,"column":0},"generated":{"line":4880,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4880,"column":0},"generated":{"line":4881,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4881,"column":0},"generated":{"line":4882,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4882,"column":0},"generated":{"line":4883,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4883,"column":0},"generated":{"line":4884,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4884,"column":0},"generated":{"line":4885,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4885,"column":0},"generated":{"line":4886,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4886,"column":0},"generated":{"line":4887,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4887,"column":0},"generated":{"line":4888,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4888,"column":0},"generated":{"line":4889,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4889,"column":0},"generated":{"line":4890,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4890,"column":0},"generated":{"line":4891,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4891,"column":0},"generated":{"line":4892,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4892,"column":0},"generated":{"line":4893,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4893,"column":0},"generated":{"line":4894,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4894,"column":0},"generated":{"line":4895,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4895,"column":0},"generated":{"line":4896,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4896,"column":0},"generated":{"line":4897,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4897,"column":0},"generated":{"line":4898,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4898,"column":0},"generated":{"line":4899,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4899,"column":0},"generated":{"line":4900,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4900,"column":0},"generated":{"line":4901,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4901,"column":0},"generated":{"line":4902,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4902,"column":0},"generated":{"line":4903,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4903,"column":0},"generated":{"line":4904,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4904,"column":0},"generated":{"line":4905,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4905,"column":0},"generated":{"line":4906,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4906,"column":0},"generated":{"line":4907,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4907,"column":0},"generated":{"line":4908,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4908,"column":0},"generated":{"line":4909,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4909,"column":0},"generated":{"line":4910,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4910,"column":0},"generated":{"line":4911,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4911,"column":0},"generated":{"line":4912,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4912,"column":0},"generated":{"line":4913,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4913,"column":0},"generated":{"line":4914,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4914,"column":0},"generated":{"line":4915,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4915,"column":0},"generated":{"line":4916,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4916,"column":0},"generated":{"line":4917,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4917,"column":0},"generated":{"line":4918,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4918,"column":0},"generated":{"line":4919,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4919,"column":0},"generated":{"line":4920,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4920,"column":0},"generated":{"line":4921,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4921,"column":0},"generated":{"line":4922,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4922,"column":0},"generated":{"line":4923,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4923,"column":0},"generated":{"line":4924,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4924,"column":0},"generated":{"line":4925,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4925,"column":0},"generated":{"line":4926,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4926,"column":0},"generated":{"line":4927,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4927,"column":0},"generated":{"line":4928,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4928,"column":0},"generated":{"line":4929,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4929,"column":0},"generated":{"line":4930,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4930,"column":0},"generated":{"line":4931,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4931,"column":0},"generated":{"line":4932,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4932,"column":0},"generated":{"line":4933,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4933,"column":0},"generated":{"line":4934,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4934,"column":0},"generated":{"line":4935,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4935,"column":0},"generated":{"line":4936,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4936,"column":0},"generated":{"line":4937,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4937,"column":0},"generated":{"line":4938,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4938,"column":0},"generated":{"line":4939,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4939,"column":0},"generated":{"line":4940,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4940,"column":0},"generated":{"line":4941,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4941,"column":0},"generated":{"line":4942,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4942,"column":0},"generated":{"line":4943,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4943,"column":0},"generated":{"line":4944,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4944,"column":0},"generated":{"line":4945,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4945,"column":0},"generated":{"line":4946,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4946,"column":0},"generated":{"line":4947,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4947,"column":0},"generated":{"line":4948,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4948,"column":0},"generated":{"line":4949,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4949,"column":0},"generated":{"line":4950,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4950,"column":0},"generated":{"line":4951,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4951,"column":0},"generated":{"line":4952,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4952,"column":0},"generated":{"line":4953,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4953,"column":0},"generated":{"line":4954,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4954,"column":0},"generated":{"line":4955,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4955,"column":0},"generated":{"line":4956,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4956,"column":0},"generated":{"line":4957,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4957,"column":0},"generated":{"line":4958,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4958,"column":0},"generated":{"line":4959,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4959,"column":0},"generated":{"line":4960,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4960,"column":0},"generated":{"line":4961,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4961,"column":0},"generated":{"line":4962,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4962,"column":0},"generated":{"line":4963,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4963,"column":0},"generated":{"line":4964,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4964,"column":0},"generated":{"line":4965,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4965,"column":0},"generated":{"line":4966,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4966,"column":0},"generated":{"line":4967,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4967,"column":0},"generated":{"line":4968,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4968,"column":0},"generated":{"line":4969,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4969,"column":0},"generated":{"line":4970,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4970,"column":0},"generated":{"line":4971,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4971,"column":0},"generated":{"line":4972,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4972,"column":0},"generated":{"line":4973,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4973,"column":0},"generated":{"line":4974,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4974,"column":0},"generated":{"line":4975,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4975,"column":0},"generated":{"line":4976,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4976,"column":0},"generated":{"line":4977,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4977,"column":0},"generated":{"line":4978,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4978,"column":0},"generated":{"line":4979,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4979,"column":0},"generated":{"line":4980,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4980,"column":0},"generated":{"line":4981,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4981,"column":0},"generated":{"line":4982,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4982,"column":0},"generated":{"line":4983,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4983,"column":0},"generated":{"line":4984,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4984,"column":0},"generated":{"line":4985,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4985,"column":0},"generated":{"line":4986,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4986,"column":0},"generated":{"line":4987,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4987,"column":0},"generated":{"line":4988,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4988,"column":0},"generated":{"line":4989,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4989,"column":0},"generated":{"line":4990,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4990,"column":0},"generated":{"line":4991,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4991,"column":0},"generated":{"line":4992,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4992,"column":0},"generated":{"line":4993,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4993,"column":0},"generated":{"line":4994,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4994,"column":0},"generated":{"line":4995,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4995,"column":0},"generated":{"line":4996,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4996,"column":0},"generated":{"line":4997,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4997,"column":0},"generated":{"line":4998,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4998,"column":0},"generated":{"line":4999,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":4999,"column":0},"generated":{"line":5000,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5000,"column":0},"generated":{"line":5001,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5001,"column":0},"generated":{"line":5002,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5002,"column":0},"generated":{"line":5003,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5003,"column":0},"generated":{"line":5004,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5004,"column":0},"generated":{"line":5005,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5005,"column":0},"generated":{"line":5006,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5006,"column":0},"generated":{"line":5007,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5007,"column":0},"generated":{"line":5008,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5008,"column":0},"generated":{"line":5009,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5009,"column":0},"generated":{"line":5010,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5010,"column":0},"generated":{"line":5011,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5011,"column":0},"generated":{"line":5012,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5012,"column":0},"generated":{"line":5013,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5013,"column":0},"generated":{"line":5014,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5014,"column":0},"generated":{"line":5015,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5015,"column":0},"generated":{"line":5016,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5016,"column":0},"generated":{"line":5017,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5017,"column":0},"generated":{"line":5018,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5018,"column":0},"generated":{"line":5019,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5019,"column":0},"generated":{"line":5020,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5020,"column":0},"generated":{"line":5021,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5021,"column":0},"generated":{"line":5022,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5022,"column":0},"generated":{"line":5023,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5023,"column":0},"generated":{"line":5024,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5024,"column":0},"generated":{"line":5025,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5025,"column":0},"generated":{"line":5026,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5026,"column":0},"generated":{"line":5027,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5027,"column":0},"generated":{"line":5028,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5028,"column":0},"generated":{"line":5029,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5029,"column":0},"generated":{"line":5030,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5030,"column":0},"generated":{"line":5031,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5031,"column":0},"generated":{"line":5032,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5032,"column":0},"generated":{"line":5033,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5033,"column":0},"generated":{"line":5034,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5034,"column":0},"generated":{"line":5035,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5035,"column":0},"generated":{"line":5036,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5036,"column":0},"generated":{"line":5037,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5037,"column":0},"generated":{"line":5038,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5038,"column":0},"generated":{"line":5039,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5039,"column":0},"generated":{"line":5040,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5040,"column":0},"generated":{"line":5041,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5041,"column":0},"generated":{"line":5042,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5042,"column":0},"generated":{"line":5043,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5043,"column":0},"generated":{"line":5044,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5044,"column":0},"generated":{"line":5045,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5045,"column":0},"generated":{"line":5046,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5046,"column":0},"generated":{"line":5047,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5047,"column":0},"generated":{"line":5048,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5048,"column":0},"generated":{"line":5049,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5049,"column":0},"generated":{"line":5050,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5050,"column":0},"generated":{"line":5051,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5051,"column":0},"generated":{"line":5052,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5052,"column":0},"generated":{"line":5053,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5053,"column":0},"generated":{"line":5054,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5054,"column":0},"generated":{"line":5055,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5055,"column":0},"generated":{"line":5056,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5056,"column":0},"generated":{"line":5057,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5057,"column":0},"generated":{"line":5058,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5058,"column":0},"generated":{"line":5059,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5059,"column":0},"generated":{"line":5060,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5060,"column":0},"generated":{"line":5061,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5061,"column":0},"generated":{"line":5062,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5062,"column":0},"generated":{"line":5063,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5063,"column":0},"generated":{"line":5064,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5064,"column":0},"generated":{"line":5065,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5065,"column":0},"generated":{"line":5066,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5066,"column":0},"generated":{"line":5067,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5067,"column":0},"generated":{"line":5068,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5068,"column":0},"generated":{"line":5069,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5069,"column":0},"generated":{"line":5070,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5070,"column":0},"generated":{"line":5071,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5071,"column":0},"generated":{"line":5072,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5072,"column":0},"generated":{"line":5073,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5073,"column":0},"generated":{"line":5074,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5074,"column":0},"generated":{"line":5075,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5075,"column":0},"generated":{"line":5076,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5076,"column":0},"generated":{"line":5077,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5077,"column":0},"generated":{"line":5078,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5078,"column":0},"generated":{"line":5079,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5079,"column":0},"generated":{"line":5080,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5080,"column":0},"generated":{"line":5081,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5081,"column":0},"generated":{"line":5082,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5082,"column":0},"generated":{"line":5083,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5083,"column":0},"generated":{"line":5084,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5084,"column":0},"generated":{"line":5085,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5085,"column":0},"generated":{"line":5086,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5086,"column":0},"generated":{"line":5087,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5087,"column":0},"generated":{"line":5088,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5088,"column":0},"generated":{"line":5089,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5089,"column":0},"generated":{"line":5090,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5090,"column":0},"generated":{"line":5091,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5091,"column":0},"generated":{"line":5092,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5092,"column":0},"generated":{"line":5093,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5093,"column":0},"generated":{"line":5094,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5094,"column":0},"generated":{"line":5095,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5095,"column":0},"generated":{"line":5096,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5096,"column":0},"generated":{"line":5097,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5097,"column":0},"generated":{"line":5098,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5098,"column":0},"generated":{"line":5099,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5099,"column":0},"generated":{"line":5100,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5100,"column":0},"generated":{"line":5101,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5101,"column":0},"generated":{"line":5102,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5102,"column":0},"generated":{"line":5103,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5103,"column":0},"generated":{"line":5104,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5104,"column":0},"generated":{"line":5105,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5105,"column":0},"generated":{"line":5106,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5106,"column":0},"generated":{"line":5107,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5107,"column":0},"generated":{"line":5108,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5108,"column":0},"generated":{"line":5109,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5109,"column":0},"generated":{"line":5110,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5110,"column":0},"generated":{"line":5111,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5111,"column":0},"generated":{"line":5112,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5112,"column":0},"generated":{"line":5113,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5113,"column":0},"generated":{"line":5114,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5114,"column":0},"generated":{"line":5115,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5115,"column":0},"generated":{"line":5116,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5116,"column":0},"generated":{"line":5117,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5117,"column":0},"generated":{"line":5118,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5118,"column":0},"generated":{"line":5119,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5119,"column":0},"generated":{"line":5120,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5120,"column":0},"generated":{"line":5121,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5121,"column":0},"generated":{"line":5122,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5122,"column":0},"generated":{"line":5123,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5123,"column":0},"generated":{"line":5124,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5124,"column":0},"generated":{"line":5125,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5125,"column":0},"generated":{"line":5126,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5126,"column":0},"generated":{"line":5127,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5127,"column":0},"generated":{"line":5128,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5128,"column":0},"generated":{"line":5129,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5129,"column":0},"generated":{"line":5130,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5130,"column":0},"generated":{"line":5131,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5131,"column":0},"generated":{"line":5132,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5132,"column":0},"generated":{"line":5133,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5133,"column":0},"generated":{"line":5134,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5134,"column":0},"generated":{"line":5135,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5135,"column":0},"generated":{"line":5136,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5136,"column":0},"generated":{"line":5137,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5137,"column":0},"generated":{"line":5138,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5138,"column":0},"generated":{"line":5139,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5139,"column":0},"generated":{"line":5140,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5140,"column":0},"generated":{"line":5141,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5141,"column":0},"generated":{"line":5142,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5142,"column":0},"generated":{"line":5143,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5143,"column":0},"generated":{"line":5144,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5144,"column":0},"generated":{"line":5145,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5145,"column":0},"generated":{"line":5146,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5146,"column":0},"generated":{"line":5147,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5147,"column":0},"generated":{"line":5148,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5148,"column":0},"generated":{"line":5149,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5149,"column":0},"generated":{"line":5150,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5150,"column":0},"generated":{"line":5151,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5151,"column":0},"generated":{"line":5152,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5152,"column":0},"generated":{"line":5153,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5153,"column":0},"generated":{"line":5154,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5154,"column":0},"generated":{"line":5155,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5155,"column":0},"generated":{"line":5156,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5156,"column":0},"generated":{"line":5157,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5157,"column":0},"generated":{"line":5158,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5158,"column":0},"generated":{"line":5159,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5159,"column":0},"generated":{"line":5160,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5160,"column":0},"generated":{"line":5161,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5161,"column":0},"generated":{"line":5162,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5162,"column":0},"generated":{"line":5163,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5163,"column":0},"generated":{"line":5164,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5164,"column":0},"generated":{"line":5165,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5165,"column":0},"generated":{"line":5166,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5166,"column":0},"generated":{"line":5167,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5167,"column":0},"generated":{"line":5168,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5168,"column":0},"generated":{"line":5169,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5169,"column":0},"generated":{"line":5170,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5170,"column":0},"generated":{"line":5171,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5171,"column":0},"generated":{"line":5172,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5172,"column":0},"generated":{"line":5173,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5173,"column":0},"generated":{"line":5174,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5174,"column":0},"generated":{"line":5175,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5175,"column":0},"generated":{"line":5176,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5176,"column":0},"generated":{"line":5177,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5177,"column":0},"generated":{"line":5178,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5178,"column":0},"generated":{"line":5179,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5179,"column":0},"generated":{"line":5180,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5180,"column":0},"generated":{"line":5181,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5181,"column":0},"generated":{"line":5182,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5182,"column":0},"generated":{"line":5183,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5183,"column":0},"generated":{"line":5184,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5184,"column":0},"generated":{"line":5185,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5185,"column":0},"generated":{"line":5186,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5186,"column":0},"generated":{"line":5187,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5187,"column":0},"generated":{"line":5188,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5188,"column":0},"generated":{"line":5189,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5189,"column":0},"generated":{"line":5190,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5190,"column":0},"generated":{"line":5191,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5191,"column":0},"generated":{"line":5192,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5192,"column":0},"generated":{"line":5193,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5193,"column":0},"generated":{"line":5194,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5194,"column":0},"generated":{"line":5195,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5195,"column":0},"generated":{"line":5196,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5196,"column":0},"generated":{"line":5197,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5197,"column":0},"generated":{"line":5198,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5198,"column":0},"generated":{"line":5199,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5199,"column":0},"generated":{"line":5200,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5200,"column":0},"generated":{"line":5201,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5201,"column":0},"generated":{"line":5202,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5202,"column":0},"generated":{"line":5203,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5203,"column":0},"generated":{"line":5204,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5204,"column":0},"generated":{"line":5205,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5205,"column":0},"generated":{"line":5206,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5206,"column":0},"generated":{"line":5207,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5207,"column":0},"generated":{"line":5208,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5208,"column":0},"generated":{"line":5209,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5209,"column":0},"generated":{"line":5210,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5210,"column":0},"generated":{"line":5211,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5211,"column":0},"generated":{"line":5212,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5212,"column":0},"generated":{"line":5213,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5213,"column":0},"generated":{"line":5214,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5214,"column":0},"generated":{"line":5215,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5215,"column":0},"generated":{"line":5216,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5216,"column":0},"generated":{"line":5217,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5217,"column":0},"generated":{"line":5218,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5218,"column":0},"generated":{"line":5219,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5219,"column":0},"generated":{"line":5220,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5220,"column":0},"generated":{"line":5221,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5221,"column":0},"generated":{"line":5222,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5222,"column":0},"generated":{"line":5223,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5223,"column":0},"generated":{"line":5224,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5224,"column":0},"generated":{"line":5225,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5225,"column":0},"generated":{"line":5226,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5226,"column":0},"generated":{"line":5227,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5227,"column":0},"generated":{"line":5228,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5228,"column":0},"generated":{"line":5229,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5229,"column":0},"generated":{"line":5230,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5230,"column":0},"generated":{"line":5231,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5231,"column":0},"generated":{"line":5232,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5232,"column":0},"generated":{"line":5233,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5233,"column":0},"generated":{"line":5234,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5234,"column":0},"generated":{"line":5235,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5235,"column":0},"generated":{"line":5236,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5236,"column":0},"generated":{"line":5237,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5237,"column":0},"generated":{"line":5238,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5238,"column":0},"generated":{"line":5239,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5239,"column":0},"generated":{"line":5240,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5240,"column":0},"generated":{"line":5241,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5241,"column":0},"generated":{"line":5242,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5242,"column":0},"generated":{"line":5243,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5243,"column":0},"generated":{"line":5244,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5244,"column":0},"generated":{"line":5245,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5245,"column":0},"generated":{"line":5246,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5246,"column":0},"generated":{"line":5247,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5247,"column":0},"generated":{"line":5248,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5248,"column":0},"generated":{"line":5249,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5249,"column":0},"generated":{"line":5250,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5250,"column":0},"generated":{"line":5251,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5251,"column":0},"generated":{"line":5252,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5252,"column":0},"generated":{"line":5253,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5253,"column":0},"generated":{"line":5254,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5254,"column":0},"generated":{"line":5255,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5255,"column":0},"generated":{"line":5256,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5256,"column":0},"generated":{"line":5257,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5257,"column":0},"generated":{"line":5258,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5258,"column":0},"generated":{"line":5259,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5259,"column":0},"generated":{"line":5260,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5260,"column":0},"generated":{"line":5261,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5261,"column":0},"generated":{"line":5262,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5262,"column":0},"generated":{"line":5263,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5263,"column":0},"generated":{"line":5264,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5264,"column":0},"generated":{"line":5265,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5265,"column":0},"generated":{"line":5266,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5266,"column":0},"generated":{"line":5267,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5267,"column":0},"generated":{"line":5268,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5268,"column":0},"generated":{"line":5269,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5269,"column":0},"generated":{"line":5270,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5270,"column":0},"generated":{"line":5271,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5271,"column":0},"generated":{"line":5272,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5272,"column":0},"generated":{"line":5273,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5273,"column":0},"generated":{"line":5274,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5274,"column":0},"generated":{"line":5275,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5275,"column":0},"generated":{"line":5276,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5276,"column":0},"generated":{"line":5277,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5277,"column":0},"generated":{"line":5278,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5278,"column":0},"generated":{"line":5279,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5279,"column":0},"generated":{"line":5280,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5280,"column":0},"generated":{"line":5281,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5281,"column":0},"generated":{"line":5282,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5282,"column":0},"generated":{"line":5283,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5283,"column":0},"generated":{"line":5284,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5284,"column":0},"generated":{"line":5285,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5285,"column":0},"generated":{"line":5286,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5286,"column":0},"generated":{"line":5287,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5287,"column":0},"generated":{"line":5288,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5288,"column":0},"generated":{"line":5289,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5289,"column":0},"generated":{"line":5290,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5290,"column":0},"generated":{"line":5291,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5291,"column":0},"generated":{"line":5292,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5292,"column":0},"generated":{"line":5293,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5293,"column":0},"generated":{"line":5294,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5294,"column":0},"generated":{"line":5295,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5295,"column":0},"generated":{"line":5296,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5296,"column":0},"generated":{"line":5297,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5297,"column":0},"generated":{"line":5298,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5298,"column":0},"generated":{"line":5299,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5299,"column":0},"generated":{"line":5300,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5300,"column":0},"generated":{"line":5301,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5301,"column":0},"generated":{"line":5302,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5302,"column":0},"generated":{"line":5303,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5303,"column":0},"generated":{"line":5304,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5304,"column":0},"generated":{"line":5305,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5305,"column":0},"generated":{"line":5306,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5306,"column":0},"generated":{"line":5307,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5307,"column":0},"generated":{"line":5308,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5308,"column":0},"generated":{"line":5309,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5309,"column":0},"generated":{"line":5310,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5310,"column":0},"generated":{"line":5311,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5311,"column":0},"generated":{"line":5312,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5312,"column":0},"generated":{"line":5313,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5313,"column":0},"generated":{"line":5314,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5314,"column":0},"generated":{"line":5315,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5315,"column":0},"generated":{"line":5316,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5316,"column":0},"generated":{"line":5317,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5317,"column":0},"generated":{"line":5318,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5318,"column":0},"generated":{"line":5319,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5319,"column":0},"generated":{"line":5320,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5320,"column":0},"generated":{"line":5321,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5321,"column":0},"generated":{"line":5322,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5322,"column":0},"generated":{"line":5323,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5323,"column":0},"generated":{"line":5324,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5324,"column":0},"generated":{"line":5325,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5325,"column":0},"generated":{"line":5326,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5326,"column":0},"generated":{"line":5327,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5327,"column":0},"generated":{"line":5328,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5328,"column":0},"generated":{"line":5329,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5329,"column":0},"generated":{"line":5330,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5330,"column":0},"generated":{"line":5331,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5331,"column":0},"generated":{"line":5332,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5332,"column":0},"generated":{"line":5333,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5333,"column":0},"generated":{"line":5334,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5334,"column":0},"generated":{"line":5335,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5335,"column":0},"generated":{"line":5336,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5336,"column":0},"generated":{"line":5337,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5337,"column":0},"generated":{"line":5338,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5338,"column":0},"generated":{"line":5339,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5339,"column":0},"generated":{"line":5340,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5340,"column":0},"generated":{"line":5341,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5341,"column":0},"generated":{"line":5342,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5342,"column":0},"generated":{"line":5343,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5343,"column":0},"generated":{"line":5344,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5344,"column":0},"generated":{"line":5345,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5345,"column":0},"generated":{"line":5346,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5346,"column":0},"generated":{"line":5347,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5347,"column":0},"generated":{"line":5348,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5348,"column":0},"generated":{"line":5349,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5349,"column":0},"generated":{"line":5350,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5350,"column":0},"generated":{"line":5351,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5351,"column":0},"generated":{"line":5352,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5352,"column":0},"generated":{"line":5353,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5353,"column":0},"generated":{"line":5354,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5354,"column":0},"generated":{"line":5355,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5355,"column":0},"generated":{"line":5356,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5356,"column":0},"generated":{"line":5357,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5357,"column":0},"generated":{"line":5358,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5358,"column":0},"generated":{"line":5359,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5359,"column":0},"generated":{"line":5360,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5360,"column":0},"generated":{"line":5361,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5361,"column":0},"generated":{"line":5362,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5362,"column":0},"generated":{"line":5363,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5363,"column":0},"generated":{"line":5364,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5364,"column":0},"generated":{"line":5365,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5365,"column":0},"generated":{"line":5366,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5366,"column":0},"generated":{"line":5367,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5367,"column":0},"generated":{"line":5368,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5368,"column":0},"generated":{"line":5369,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5369,"column":0},"generated":{"line":5370,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5370,"column":0},"generated":{"line":5371,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5371,"column":0},"generated":{"line":5372,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5372,"column":0},"generated":{"line":5373,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5373,"column":0},"generated":{"line":5374,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5374,"column":0},"generated":{"line":5375,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5375,"column":0},"generated":{"line":5376,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5376,"column":0},"generated":{"line":5377,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5377,"column":0},"generated":{"line":5378,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5378,"column":0},"generated":{"line":5379,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5379,"column":0},"generated":{"line":5380,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5380,"column":0},"generated":{"line":5381,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5381,"column":0},"generated":{"line":5382,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5382,"column":0},"generated":{"line":5383,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5383,"column":0},"generated":{"line":5384,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5384,"column":0},"generated":{"line":5385,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5385,"column":0},"generated":{"line":5386,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5386,"column":0},"generated":{"line":5387,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5387,"column":0},"generated":{"line":5388,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5388,"column":0},"generated":{"line":5389,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5389,"column":0},"generated":{"line":5390,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5390,"column":0},"generated":{"line":5391,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5391,"column":0},"generated":{"line":5392,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5392,"column":0},"generated":{"line":5393,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5393,"column":0},"generated":{"line":5394,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5394,"column":0},"generated":{"line":5395,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5395,"column":0},"generated":{"line":5396,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5396,"column":0},"generated":{"line":5397,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5397,"column":0},"generated":{"line":5398,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5398,"column":0},"generated":{"line":5399,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5399,"column":0},"generated":{"line":5400,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5400,"column":0},"generated":{"line":5401,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5401,"column":0},"generated":{"line":5402,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5402,"column":0},"generated":{"line":5403,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5403,"column":0},"generated":{"line":5404,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5404,"column":0},"generated":{"line":5405,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5405,"column":0},"generated":{"line":5406,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5406,"column":0},"generated":{"line":5407,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5407,"column":0},"generated":{"line":5408,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5408,"column":0},"generated":{"line":5409,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5409,"column":0},"generated":{"line":5410,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5410,"column":0},"generated":{"line":5411,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5411,"column":0},"generated":{"line":5412,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5412,"column":0},"generated":{"line":5413,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5413,"column":0},"generated":{"line":5414,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5414,"column":0},"generated":{"line":5415,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5415,"column":0},"generated":{"line":5416,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5416,"column":0},"generated":{"line":5417,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5417,"column":0},"generated":{"line":5418,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5418,"column":0},"generated":{"line":5419,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5419,"column":0},"generated":{"line":5420,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5420,"column":0},"generated":{"line":5421,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5421,"column":0},"generated":{"line":5422,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5422,"column":0},"generated":{"line":5423,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5423,"column":0},"generated":{"line":5424,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5424,"column":0},"generated":{"line":5425,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5425,"column":0},"generated":{"line":5426,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5426,"column":0},"generated":{"line":5427,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5427,"column":0},"generated":{"line":5428,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5428,"column":0},"generated":{"line":5429,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5429,"column":0},"generated":{"line":5430,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5430,"column":0},"generated":{"line":5431,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5431,"column":0},"generated":{"line":5432,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5432,"column":0},"generated":{"line":5433,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5433,"column":0},"generated":{"line":5434,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5434,"column":0},"generated":{"line":5435,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5435,"column":0},"generated":{"line":5436,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5436,"column":0},"generated":{"line":5437,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5437,"column":0},"generated":{"line":5438,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5438,"column":0},"generated":{"line":5439,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5439,"column":0},"generated":{"line":5440,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5440,"column":0},"generated":{"line":5441,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5441,"column":0},"generated":{"line":5442,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5442,"column":0},"generated":{"line":5443,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5443,"column":0},"generated":{"line":5444,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5444,"column":0},"generated":{"line":5445,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5445,"column":0},"generated":{"line":5446,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5446,"column":0},"generated":{"line":5447,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5447,"column":0},"generated":{"line":5448,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5448,"column":0},"generated":{"line":5449,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5449,"column":0},"generated":{"line":5450,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5450,"column":0},"generated":{"line":5451,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5451,"column":0},"generated":{"line":5452,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5452,"column":0},"generated":{"line":5453,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5453,"column":0},"generated":{"line":5454,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5454,"column":0},"generated":{"line":5455,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5455,"column":0},"generated":{"line":5456,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5456,"column":0},"generated":{"line":5457,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5457,"column":0},"generated":{"line":5458,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5458,"column":0},"generated":{"line":5459,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5459,"column":0},"generated":{"line":5460,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5460,"column":0},"generated":{"line":5461,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5461,"column":0},"generated":{"line":5462,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5462,"column":0},"generated":{"line":5463,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5463,"column":0},"generated":{"line":5464,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5464,"column":0},"generated":{"line":5465,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5465,"column":0},"generated":{"line":5466,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5466,"column":0},"generated":{"line":5467,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5467,"column":0},"generated":{"line":5468,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5468,"column":0},"generated":{"line":5469,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5469,"column":0},"generated":{"line":5470,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5470,"column":0},"generated":{"line":5471,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5471,"column":0},"generated":{"line":5472,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5472,"column":0},"generated":{"line":5473,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5473,"column":0},"generated":{"line":5474,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5474,"column":0},"generated":{"line":5475,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5475,"column":0},"generated":{"line":5476,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5476,"column":0},"generated":{"line":5477,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5477,"column":0},"generated":{"line":5478,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5478,"column":0},"generated":{"line":5479,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5479,"column":0},"generated":{"line":5480,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5480,"column":0},"generated":{"line":5481,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5481,"column":0},"generated":{"line":5482,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5482,"column":0},"generated":{"line":5483,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5483,"column":0},"generated":{"line":5484,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5484,"column":0},"generated":{"line":5485,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5485,"column":0},"generated":{"line":5486,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5486,"column":0},"generated":{"line":5487,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5487,"column":0},"generated":{"line":5488,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5488,"column":0},"generated":{"line":5489,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5489,"column":0},"generated":{"line":5490,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5490,"column":0},"generated":{"line":5491,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5491,"column":0},"generated":{"line":5492,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5492,"column":0},"generated":{"line":5493,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5493,"column":0},"generated":{"line":5494,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5494,"column":0},"generated":{"line":5495,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5495,"column":0},"generated":{"line":5496,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5496,"column":0},"generated":{"line":5497,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5497,"column":0},"generated":{"line":5498,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5498,"column":0},"generated":{"line":5499,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5499,"column":0},"generated":{"line":5500,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5500,"column":0},"generated":{"line":5501,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5501,"column":0},"generated":{"line":5502,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5502,"column":0},"generated":{"line":5503,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5503,"column":0},"generated":{"line":5504,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5504,"column":0},"generated":{"line":5505,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5505,"column":0},"generated":{"line":5506,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5506,"column":0},"generated":{"line":5507,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5507,"column":0},"generated":{"line":5508,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5508,"column":0},"generated":{"line":5509,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5509,"column":0},"generated":{"line":5510,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5510,"column":0},"generated":{"line":5511,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5511,"column":0},"generated":{"line":5512,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5512,"column":0},"generated":{"line":5513,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5513,"column":0},"generated":{"line":5514,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5514,"column":0},"generated":{"line":5515,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5515,"column":0},"generated":{"line":5516,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5516,"column":0},"generated":{"line":5517,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5517,"column":0},"generated":{"line":5518,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5518,"column":0},"generated":{"line":5519,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5519,"column":0},"generated":{"line":5520,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5520,"column":0},"generated":{"line":5521,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5521,"column":0},"generated":{"line":5522,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5522,"column":0},"generated":{"line":5523,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5523,"column":0},"generated":{"line":5524,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5524,"column":0},"generated":{"line":5525,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5525,"column":0},"generated":{"line":5526,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5526,"column":0},"generated":{"line":5527,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5527,"column":0},"generated":{"line":5528,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5528,"column":0},"generated":{"line":5529,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5529,"column":0},"generated":{"line":5530,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5530,"column":0},"generated":{"line":5531,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5531,"column":0},"generated":{"line":5532,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5532,"column":0},"generated":{"line":5533,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5533,"column":0},"generated":{"line":5534,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5534,"column":0},"generated":{"line":5535,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5535,"column":0},"generated":{"line":5536,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5536,"column":0},"generated":{"line":5537,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5537,"column":0},"generated":{"line":5538,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5538,"column":0},"generated":{"line":5539,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5539,"column":0},"generated":{"line":5540,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5540,"column":0},"generated":{"line":5541,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5541,"column":0},"generated":{"line":5542,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5542,"column":0},"generated":{"line":5543,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5543,"column":0},"generated":{"line":5544,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5544,"column":0},"generated":{"line":5545,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5545,"column":0},"generated":{"line":5546,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5546,"column":0},"generated":{"line":5547,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5547,"column":0},"generated":{"line":5548,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5548,"column":0},"generated":{"line":5549,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5549,"column":0},"generated":{"line":5550,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5550,"column":0},"generated":{"line":5551,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5551,"column":0},"generated":{"line":5552,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5552,"column":0},"generated":{"line":5553,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5553,"column":0},"generated":{"line":5554,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5554,"column":0},"generated":{"line":5555,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5555,"column":0},"generated":{"line":5556,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5556,"column":0},"generated":{"line":5557,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5557,"column":0},"generated":{"line":5558,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5558,"column":0},"generated":{"line":5559,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5559,"column":0},"generated":{"line":5560,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5560,"column":0},"generated":{"line":5561,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5561,"column":0},"generated":{"line":5562,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5562,"column":0},"generated":{"line":5563,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5563,"column":0},"generated":{"line":5564,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5564,"column":0},"generated":{"line":5565,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5565,"column":0},"generated":{"line":5566,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5566,"column":0},"generated":{"line":5567,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5567,"column":0},"generated":{"line":5568,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5568,"column":0},"generated":{"line":5569,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5569,"column":0},"generated":{"line":5570,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5570,"column":0},"generated":{"line":5571,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5571,"column":0},"generated":{"line":5572,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5572,"column":0},"generated":{"line":5573,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5573,"column":0},"generated":{"line":5574,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5574,"column":0},"generated":{"line":5575,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5575,"column":0},"generated":{"line":5576,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5576,"column":0},"generated":{"line":5577,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5577,"column":0},"generated":{"line":5578,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5578,"column":0},"generated":{"line":5579,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5579,"column":0},"generated":{"line":5580,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5580,"column":0},"generated":{"line":5581,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5581,"column":0},"generated":{"line":5582,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5582,"column":0},"generated":{"line":5583,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5583,"column":0},"generated":{"line":5584,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5584,"column":0},"generated":{"line":5585,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5585,"column":0},"generated":{"line":5586,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5586,"column":0},"generated":{"line":5587,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5587,"column":0},"generated":{"line":5588,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5588,"column":0},"generated":{"line":5589,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5589,"column":0},"generated":{"line":5590,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5590,"column":0},"generated":{"line":5591,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5591,"column":0},"generated":{"line":5592,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5592,"column":0},"generated":{"line":5593,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5593,"column":0},"generated":{"line":5594,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5594,"column":0},"generated":{"line":5595,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5595,"column":0},"generated":{"line":5596,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5596,"column":0},"generated":{"line":5597,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5597,"column":0},"generated":{"line":5598,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5598,"column":0},"generated":{"line":5599,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5599,"column":0},"generated":{"line":5600,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5600,"column":0},"generated":{"line":5601,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5601,"column":0},"generated":{"line":5602,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5602,"column":0},"generated":{"line":5603,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5603,"column":0},"generated":{"line":5604,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5604,"column":0},"generated":{"line":5605,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5605,"column":0},"generated":{"line":5606,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5606,"column":0},"generated":{"line":5607,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5607,"column":0},"generated":{"line":5608,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5608,"column":0},"generated":{"line":5609,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5609,"column":0},"generated":{"line":5610,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5610,"column":0},"generated":{"line":5611,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5611,"column":0},"generated":{"line":5612,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5612,"column":0},"generated":{"line":5613,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5613,"column":0},"generated":{"line":5614,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5614,"column":0},"generated":{"line":5615,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5615,"column":0},"generated":{"line":5616,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5616,"column":0},"generated":{"line":5617,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5617,"column":0},"generated":{"line":5618,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5618,"column":0},"generated":{"line":5619,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5619,"column":0},"generated":{"line":5620,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5620,"column":0},"generated":{"line":5621,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5621,"column":0},"generated":{"line":5622,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5622,"column":0},"generated":{"line":5623,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5623,"column":0},"generated":{"line":5624,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5624,"column":0},"generated":{"line":5625,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5625,"column":0},"generated":{"line":5626,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5626,"column":0},"generated":{"line":5627,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5627,"column":0},"generated":{"line":5628,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5628,"column":0},"generated":{"line":5629,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5629,"column":0},"generated":{"line":5630,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5630,"column":0},"generated":{"line":5631,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5631,"column":0},"generated":{"line":5632,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5632,"column":0},"generated":{"line":5633,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5633,"column":0},"generated":{"line":5634,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5634,"column":0},"generated":{"line":5635,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5635,"column":0},"generated":{"line":5636,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5636,"column":0},"generated":{"line":5637,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5637,"column":0},"generated":{"line":5638,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5638,"column":0},"generated":{"line":5639,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5639,"column":0},"generated":{"line":5640,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5640,"column":0},"generated":{"line":5641,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5641,"column":0},"generated":{"line":5642,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5642,"column":0},"generated":{"line":5643,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5643,"column":0},"generated":{"line":5644,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5644,"column":0},"generated":{"line":5645,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5645,"column":0},"generated":{"line":5646,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5646,"column":0},"generated":{"line":5647,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5647,"column":0},"generated":{"line":5648,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5648,"column":0},"generated":{"line":5649,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5649,"column":0},"generated":{"line":5650,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5650,"column":0},"generated":{"line":5651,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5651,"column":0},"generated":{"line":5652,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5652,"column":0},"generated":{"line":5653,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5653,"column":0},"generated":{"line":5654,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5654,"column":0},"generated":{"line":5655,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5655,"column":0},"generated":{"line":5656,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5656,"column":0},"generated":{"line":5657,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5657,"column":0},"generated":{"line":5658,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5658,"column":0},"generated":{"line":5659,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5659,"column":0},"generated":{"line":5660,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5660,"column":0},"generated":{"line":5661,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5661,"column":0},"generated":{"line":5662,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5662,"column":0},"generated":{"line":5663,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5663,"column":0},"generated":{"line":5664,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5664,"column":0},"generated":{"line":5665,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5665,"column":0},"generated":{"line":5666,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5666,"column":0},"generated":{"line":5667,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5667,"column":0},"generated":{"line":5668,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5668,"column":0},"generated":{"line":5669,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5669,"column":0},"generated":{"line":5670,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5670,"column":0},"generated":{"line":5671,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5671,"column":0},"generated":{"line":5672,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5672,"column":0},"generated":{"line":5673,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5673,"column":0},"generated":{"line":5674,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5674,"column":0},"generated":{"line":5675,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5675,"column":0},"generated":{"line":5676,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5676,"column":0},"generated":{"line":5677,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5677,"column":0},"generated":{"line":5678,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5678,"column":0},"generated":{"line":5679,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5679,"column":0},"generated":{"line":5680,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5680,"column":0},"generated":{"line":5681,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5681,"column":0},"generated":{"line":5682,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5682,"column":0},"generated":{"line":5683,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5683,"column":0},"generated":{"line":5684,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5684,"column":0},"generated":{"line":5685,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5685,"column":0},"generated":{"line":5686,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5686,"column":0},"generated":{"line":5687,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5687,"column":0},"generated":{"line":5688,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5688,"column":0},"generated":{"line":5689,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5689,"column":0},"generated":{"line":5690,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5690,"column":0},"generated":{"line":5691,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5691,"column":0},"generated":{"line":5692,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5692,"column":0},"generated":{"line":5693,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5693,"column":0},"generated":{"line":5694,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5694,"column":0},"generated":{"line":5695,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5695,"column":0},"generated":{"line":5696,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5696,"column":0},"generated":{"line":5697,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5697,"column":0},"generated":{"line":5698,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5698,"column":0},"generated":{"line":5699,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5699,"column":0},"generated":{"line":5700,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5700,"column":0},"generated":{"line":5701,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5701,"column":0},"generated":{"line":5702,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5702,"column":0},"generated":{"line":5703,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5703,"column":0},"generated":{"line":5704,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5704,"column":0},"generated":{"line":5705,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5705,"column":0},"generated":{"line":5706,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5706,"column":0},"generated":{"line":5707,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5707,"column":0},"generated":{"line":5708,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5708,"column":0},"generated":{"line":5709,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5709,"column":0},"generated":{"line":5710,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5710,"column":0},"generated":{"line":5711,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5711,"column":0},"generated":{"line":5712,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5712,"column":0},"generated":{"line":5713,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5713,"column":0},"generated":{"line":5714,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5714,"column":0},"generated":{"line":5715,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5715,"column":0},"generated":{"line":5716,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5716,"column":0},"generated":{"line":5717,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5717,"column":0},"generated":{"line":5718,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5718,"column":0},"generated":{"line":5719,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5719,"column":0},"generated":{"line":5720,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5720,"column":0},"generated":{"line":5721,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5721,"column":0},"generated":{"line":5722,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5722,"column":0},"generated":{"line":5723,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5723,"column":0},"generated":{"line":5724,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5724,"column":0},"generated":{"line":5725,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5725,"column":0},"generated":{"line":5726,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5726,"column":0},"generated":{"line":5727,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5727,"column":0},"generated":{"line":5728,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5728,"column":0},"generated":{"line":5729,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5729,"column":0},"generated":{"line":5730,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5730,"column":0},"generated":{"line":5731,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5731,"column":0},"generated":{"line":5732,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5732,"column":0},"generated":{"line":5733,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5733,"column":0},"generated":{"line":5734,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5734,"column":0},"generated":{"line":5735,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5735,"column":0},"generated":{"line":5736,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5736,"column":0},"generated":{"line":5737,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5737,"column":0},"generated":{"line":5738,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5738,"column":0},"generated":{"line":5739,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5739,"column":0},"generated":{"line":5740,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5740,"column":0},"generated":{"line":5741,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5741,"column":0},"generated":{"line":5742,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5742,"column":0},"generated":{"line":5743,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5743,"column":0},"generated":{"line":5744,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5744,"column":0},"generated":{"line":5745,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5745,"column":0},"generated":{"line":5746,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5746,"column":0},"generated":{"line":5747,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5747,"column":0},"generated":{"line":5748,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5748,"column":0},"generated":{"line":5749,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5749,"column":0},"generated":{"line":5750,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5750,"column":0},"generated":{"line":5751,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5751,"column":0},"generated":{"line":5752,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5752,"column":0},"generated":{"line":5753,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5753,"column":0},"generated":{"line":5754,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5754,"column":0},"generated":{"line":5755,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5755,"column":0},"generated":{"line":5756,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5756,"column":0},"generated":{"line":5757,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5757,"column":0},"generated":{"line":5758,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5758,"column":0},"generated":{"line":5759,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5759,"column":0},"generated":{"line":5760,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5760,"column":0},"generated":{"line":5761,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5761,"column":0},"generated":{"line":5762,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5762,"column":0},"generated":{"line":5763,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5763,"column":0},"generated":{"line":5764,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5764,"column":0},"generated":{"line":5765,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5765,"column":0},"generated":{"line":5766,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5766,"column":0},"generated":{"line":5767,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5767,"column":0},"generated":{"line":5768,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5768,"column":0},"generated":{"line":5769,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5769,"column":0},"generated":{"line":5770,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5770,"column":0},"generated":{"line":5771,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5771,"column":0},"generated":{"line":5772,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5772,"column":0},"generated":{"line":5773,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5773,"column":0},"generated":{"line":5774,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5774,"column":0},"generated":{"line":5775,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5775,"column":0},"generated":{"line":5776,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5776,"column":0},"generated":{"line":5777,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5777,"column":0},"generated":{"line":5778,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5778,"column":0},"generated":{"line":5779,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5779,"column":0},"generated":{"line":5780,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5780,"column":0},"generated":{"line":5781,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5781,"column":0},"generated":{"line":5782,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5782,"column":0},"generated":{"line":5783,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5783,"column":0},"generated":{"line":5784,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5784,"column":0},"generated":{"line":5785,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5785,"column":0},"generated":{"line":5786,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5786,"column":0},"generated":{"line":5787,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5787,"column":0},"generated":{"line":5788,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5788,"column":0},"generated":{"line":5789,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5789,"column":0},"generated":{"line":5790,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5790,"column":0},"generated":{"line":5791,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5791,"column":0},"generated":{"line":5792,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5792,"column":0},"generated":{"line":5793,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5793,"column":0},"generated":{"line":5794,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5794,"column":0},"generated":{"line":5795,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5795,"column":0},"generated":{"line":5796,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5796,"column":0},"generated":{"line":5797,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5797,"column":0},"generated":{"line":5798,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5798,"column":0},"generated":{"line":5799,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5799,"column":0},"generated":{"line":5800,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5800,"column":0},"generated":{"line":5801,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5801,"column":0},"generated":{"line":5802,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5802,"column":0},"generated":{"line":5803,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5803,"column":0},"generated":{"line":5804,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5804,"column":0},"generated":{"line":5805,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5805,"column":0},"generated":{"line":5806,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5806,"column":0},"generated":{"line":5807,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5807,"column":0},"generated":{"line":5808,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5808,"column":0},"generated":{"line":5809,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5809,"column":0},"generated":{"line":5810,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5810,"column":0},"generated":{"line":5811,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5811,"column":0},"generated":{"line":5812,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5812,"column":0},"generated":{"line":5813,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5813,"column":0},"generated":{"line":5814,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5814,"column":0},"generated":{"line":5815,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5815,"column":0},"generated":{"line":5816,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5816,"column":0},"generated":{"line":5817,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5817,"column":0},"generated":{"line":5818,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5818,"column":0},"generated":{"line":5819,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5819,"column":0},"generated":{"line":5820,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5820,"column":0},"generated":{"line":5821,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5821,"column":0},"generated":{"line":5822,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5822,"column":0},"generated":{"line":5823,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5823,"column":0},"generated":{"line":5824,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5824,"column":0},"generated":{"line":5825,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5825,"column":0},"generated":{"line":5826,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5826,"column":0},"generated":{"line":5827,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5827,"column":0},"generated":{"line":5828,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5828,"column":0},"generated":{"line":5829,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5829,"column":0},"generated":{"line":5830,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5830,"column":0},"generated":{"line":5831,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5831,"column":0},"generated":{"line":5832,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5832,"column":0},"generated":{"line":5833,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5833,"column":0},"generated":{"line":5834,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5834,"column":0},"generated":{"line":5835,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5835,"column":0},"generated":{"line":5836,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5836,"column":0},"generated":{"line":5837,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5837,"column":0},"generated":{"line":5838,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5838,"column":0},"generated":{"line":5839,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5839,"column":0},"generated":{"line":5840,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5840,"column":0},"generated":{"line":5841,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5841,"column":0},"generated":{"line":5842,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5842,"column":0},"generated":{"line":5843,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5843,"column":0},"generated":{"line":5844,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5844,"column":0},"generated":{"line":5845,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5845,"column":0},"generated":{"line":5846,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5846,"column":0},"generated":{"line":5847,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5847,"column":0},"generated":{"line":5848,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5848,"column":0},"generated":{"line":5849,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5849,"column":0},"generated":{"line":5850,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5850,"column":0},"generated":{"line":5851,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5851,"column":0},"generated":{"line":5852,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5852,"column":0},"generated":{"line":5853,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5853,"column":0},"generated":{"line":5854,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5854,"column":0},"generated":{"line":5855,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5855,"column":0},"generated":{"line":5856,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5856,"column":0},"generated":{"line":5857,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5857,"column":0},"generated":{"line":5858,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5858,"column":0},"generated":{"line":5859,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5859,"column":0},"generated":{"line":5860,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5860,"column":0},"generated":{"line":5861,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5861,"column":0},"generated":{"line":5862,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5862,"column":0},"generated":{"line":5863,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5863,"column":0},"generated":{"line":5864,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5864,"column":0},"generated":{"line":5865,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5865,"column":0},"generated":{"line":5866,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5866,"column":0},"generated":{"line":5867,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5867,"column":0},"generated":{"line":5868,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5868,"column":0},"generated":{"line":5869,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5869,"column":0},"generated":{"line":5870,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5870,"column":0},"generated":{"line":5871,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5871,"column":0},"generated":{"line":5872,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5872,"column":0},"generated":{"line":5873,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5873,"column":0},"generated":{"line":5874,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5874,"column":0},"generated":{"line":5875,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5875,"column":0},"generated":{"line":5876,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5876,"column":0},"generated":{"line":5877,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5877,"column":0},"generated":{"line":5878,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5878,"column":0},"generated":{"line":5879,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5879,"column":0},"generated":{"line":5880,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5880,"column":0},"generated":{"line":5881,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5881,"column":0},"generated":{"line":5882,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5882,"column":0},"generated":{"line":5883,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5883,"column":0},"generated":{"line":5884,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5884,"column":0},"generated":{"line":5885,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5885,"column":0},"generated":{"line":5886,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5886,"column":0},"generated":{"line":5887,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5887,"column":0},"generated":{"line":5888,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5888,"column":0},"generated":{"line":5889,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5889,"column":0},"generated":{"line":5890,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5890,"column":0},"generated":{"line":5891,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5891,"column":0},"generated":{"line":5892,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5892,"column":0},"generated":{"line":5893,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5893,"column":0},"generated":{"line":5894,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5894,"column":0},"generated":{"line":5895,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5895,"column":0},"generated":{"line":5896,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5896,"column":0},"generated":{"line":5897,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5897,"column":0},"generated":{"line":5898,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5898,"column":0},"generated":{"line":5899,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5899,"column":0},"generated":{"line":5900,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5900,"column":0},"generated":{"line":5901,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5901,"column":0},"generated":{"line":5902,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5902,"column":0},"generated":{"line":5903,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5903,"column":0},"generated":{"line":5904,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5904,"column":0},"generated":{"line":5905,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5905,"column":0},"generated":{"line":5906,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5906,"column":0},"generated":{"line":5907,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5907,"column":0},"generated":{"line":5908,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5908,"column":0},"generated":{"line":5909,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5909,"column":0},"generated":{"line":5910,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5910,"column":0},"generated":{"line":5911,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5911,"column":0},"generated":{"line":5912,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5912,"column":0},"generated":{"line":5913,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5913,"column":0},"generated":{"line":5914,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5914,"column":0},"generated":{"line":5915,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5915,"column":0},"generated":{"line":5916,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5916,"column":0},"generated":{"line":5917,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5917,"column":0},"generated":{"line":5918,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5918,"column":0},"generated":{"line":5919,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5919,"column":0},"generated":{"line":5920,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5920,"column":0},"generated":{"line":5921,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5921,"column":0},"generated":{"line":5922,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5922,"column":0},"generated":{"line":5923,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5923,"column":0},"generated":{"line":5924,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5924,"column":0},"generated":{"line":5925,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5925,"column":0},"generated":{"line":5926,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5926,"column":0},"generated":{"line":5927,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5927,"column":0},"generated":{"line":5928,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5928,"column":0},"generated":{"line":5929,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5929,"column":0},"generated":{"line":5930,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5930,"column":0},"generated":{"line":5931,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5931,"column":0},"generated":{"line":5932,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5932,"column":0},"generated":{"line":5933,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5933,"column":0},"generated":{"line":5934,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5934,"column":0},"generated":{"line":5935,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5935,"column":0},"generated":{"line":5936,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5936,"column":0},"generated":{"line":5937,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5937,"column":0},"generated":{"line":5938,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5938,"column":0},"generated":{"line":5939,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5939,"column":0},"generated":{"line":5940,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5940,"column":0},"generated":{"line":5941,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5941,"column":0},"generated":{"line":5942,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5942,"column":0},"generated":{"line":5943,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5943,"column":0},"generated":{"line":5944,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5944,"column":0},"generated":{"line":5945,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5945,"column":0},"generated":{"line":5946,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5946,"column":0},"generated":{"line":5947,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5947,"column":0},"generated":{"line":5948,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5948,"column":0},"generated":{"line":5949,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5949,"column":0},"generated":{"line":5950,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5950,"column":0},"generated":{"line":5951,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5951,"column":0},"generated":{"line":5952,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5952,"column":0},"generated":{"line":5953,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5953,"column":0},"generated":{"line":5954,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5954,"column":0},"generated":{"line":5955,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5955,"column":0},"generated":{"line":5956,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5956,"column":0},"generated":{"line":5957,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5957,"column":0},"generated":{"line":5958,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5958,"column":0},"generated":{"line":5959,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5959,"column":0},"generated":{"line":5960,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5960,"column":0},"generated":{"line":5961,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5961,"column":0},"generated":{"line":5962,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5962,"column":0},"generated":{"line":5963,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5963,"column":0},"generated":{"line":5964,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5964,"column":0},"generated":{"line":5965,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5965,"column":0},"generated":{"line":5966,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5966,"column":0},"generated":{"line":5967,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5967,"column":0},"generated":{"line":5968,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5968,"column":0},"generated":{"line":5969,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5969,"column":0},"generated":{"line":5970,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5970,"column":0},"generated":{"line":5971,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5971,"column":0},"generated":{"line":5972,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5972,"column":0},"generated":{"line":5973,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5973,"column":0},"generated":{"line":5974,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5974,"column":0},"generated":{"line":5975,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5975,"column":0},"generated":{"line":5976,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5976,"column":0},"generated":{"line":5977,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5977,"column":0},"generated":{"line":5978,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5978,"column":0},"generated":{"line":5979,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5979,"column":0},"generated":{"line":5980,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5980,"column":0},"generated":{"line":5981,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5981,"column":0},"generated":{"line":5982,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5982,"column":0},"generated":{"line":5983,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5983,"column":0},"generated":{"line":5984,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5984,"column":0},"generated":{"line":5985,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5985,"column":0},"generated":{"line":5986,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5986,"column":0},"generated":{"line":5987,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5987,"column":0},"generated":{"line":5988,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5988,"column":0},"generated":{"line":5989,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5989,"column":0},"generated":{"line":5990,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5990,"column":0},"generated":{"line":5991,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5991,"column":0},"generated":{"line":5992,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5992,"column":0},"generated":{"line":5993,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5993,"column":0},"generated":{"line":5994,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5994,"column":0},"generated":{"line":5995,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5995,"column":0},"generated":{"line":5996,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5996,"column":0},"generated":{"line":5997,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5997,"column":0},"generated":{"line":5998,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5998,"column":0},"generated":{"line":5999,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":5999,"column":0},"generated":{"line":6000,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6000,"column":0},"generated":{"line":6001,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6001,"column":0},"generated":{"line":6002,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6002,"column":0},"generated":{"line":6003,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6003,"column":0},"generated":{"line":6004,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6004,"column":0},"generated":{"line":6005,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6005,"column":0},"generated":{"line":6006,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6006,"column":0},"generated":{"line":6007,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6007,"column":0},"generated":{"line":6008,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6008,"column":0},"generated":{"line":6009,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6009,"column":0},"generated":{"line":6010,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6010,"column":0},"generated":{"line":6011,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6011,"column":0},"generated":{"line":6012,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6012,"column":0},"generated":{"line":6013,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6013,"column":0},"generated":{"line":6014,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6014,"column":0},"generated":{"line":6015,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6015,"column":0},"generated":{"line":6016,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6016,"column":0},"generated":{"line":6017,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6017,"column":0},"generated":{"line":6018,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6018,"column":0},"generated":{"line":6019,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6019,"column":0},"generated":{"line":6020,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6020,"column":0},"generated":{"line":6021,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6021,"column":0},"generated":{"line":6022,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6022,"column":0},"generated":{"line":6023,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6023,"column":0},"generated":{"line":6024,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6024,"column":0},"generated":{"line":6025,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6025,"column":0},"generated":{"line":6026,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6026,"column":0},"generated":{"line":6027,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6027,"column":0},"generated":{"line":6028,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6028,"column":0},"generated":{"line":6029,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6029,"column":0},"generated":{"line":6030,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6030,"column":0},"generated":{"line":6031,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6031,"column":0},"generated":{"line":6032,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6032,"column":0},"generated":{"line":6033,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6033,"column":0},"generated":{"line":6034,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6034,"column":0},"generated":{"line":6035,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6035,"column":0},"generated":{"line":6036,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6036,"column":0},"generated":{"line":6037,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6037,"column":0},"generated":{"line":6038,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6038,"column":0},"generated":{"line":6039,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6039,"column":0},"generated":{"line":6040,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6040,"column":0},"generated":{"line":6041,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6041,"column":0},"generated":{"line":6042,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6042,"column":0},"generated":{"line":6043,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6043,"column":0},"generated":{"line":6044,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6044,"column":0},"generated":{"line":6045,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6045,"column":0},"generated":{"line":6046,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6046,"column":0},"generated":{"line":6047,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6047,"column":0},"generated":{"line":6048,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6048,"column":0},"generated":{"line":6049,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6049,"column":0},"generated":{"line":6050,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6050,"column":0},"generated":{"line":6051,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6051,"column":0},"generated":{"line":6052,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6052,"column":0},"generated":{"line":6053,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6053,"column":0},"generated":{"line":6054,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6054,"column":0},"generated":{"line":6055,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6055,"column":0},"generated":{"line":6056,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6056,"column":0},"generated":{"line":6057,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6057,"column":0},"generated":{"line":6058,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6058,"column":0},"generated":{"line":6059,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6059,"column":0},"generated":{"line":6060,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6060,"column":0},"generated":{"line":6061,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6061,"column":0},"generated":{"line":6062,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6062,"column":0},"generated":{"line":6063,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6063,"column":0},"generated":{"line":6064,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6064,"column":0},"generated":{"line":6065,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6065,"column":0},"generated":{"line":6066,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6066,"column":0},"generated":{"line":6067,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6067,"column":0},"generated":{"line":6068,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6068,"column":0},"generated":{"line":6069,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6069,"column":0},"generated":{"line":6070,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6070,"column":0},"generated":{"line":6071,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6071,"column":0},"generated":{"line":6072,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6072,"column":0},"generated":{"line":6073,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6073,"column":0},"generated":{"line":6074,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6074,"column":0},"generated":{"line":6075,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6075,"column":0},"generated":{"line":6076,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6076,"column":0},"generated":{"line":6077,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6077,"column":0},"generated":{"line":6078,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6078,"column":0},"generated":{"line":6079,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6079,"column":0},"generated":{"line":6080,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6080,"column":0},"generated":{"line":6081,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6081,"column":0},"generated":{"line":6082,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6082,"column":0},"generated":{"line":6083,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6083,"column":0},"generated":{"line":6084,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6084,"column":0},"generated":{"line":6085,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6085,"column":0},"generated":{"line":6086,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6086,"column":0},"generated":{"line":6087,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6087,"column":0},"generated":{"line":6088,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6088,"column":0},"generated":{"line":6089,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6089,"column":0},"generated":{"line":6090,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6090,"column":0},"generated":{"line":6091,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6091,"column":0},"generated":{"line":6092,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6092,"column":0},"generated":{"line":6093,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6093,"column":0},"generated":{"line":6094,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6094,"column":0},"generated":{"line":6095,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6095,"column":0},"generated":{"line":6096,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6096,"column":0},"generated":{"line":6097,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6097,"column":0},"generated":{"line":6098,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6098,"column":0},"generated":{"line":6099,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6099,"column":0},"generated":{"line":6100,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6100,"column":0},"generated":{"line":6101,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6101,"column":0},"generated":{"line":6102,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6102,"column":0},"generated":{"line":6103,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6103,"column":0},"generated":{"line":6104,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6104,"column":0},"generated":{"line":6105,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6105,"column":0},"generated":{"line":6106,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6106,"column":0},"generated":{"line":6107,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6107,"column":0},"generated":{"line":6108,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6108,"column":0},"generated":{"line":6109,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6109,"column":0},"generated":{"line":6110,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6110,"column":0},"generated":{"line":6111,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6111,"column":0},"generated":{"line":6112,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6112,"column":0},"generated":{"line":6113,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6113,"column":0},"generated":{"line":6114,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6114,"column":0},"generated":{"line":6115,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6115,"column":0},"generated":{"line":6116,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6116,"column":0},"generated":{"line":6117,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6117,"column":0},"generated":{"line":6118,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6118,"column":0},"generated":{"line":6119,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6119,"column":0},"generated":{"line":6120,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6120,"column":0},"generated":{"line":6121,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6121,"column":0},"generated":{"line":6122,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6122,"column":0},"generated":{"line":6123,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6123,"column":0},"generated":{"line":6124,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6124,"column":0},"generated":{"line":6125,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6125,"column":0},"generated":{"line":6126,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6126,"column":0},"generated":{"line":6127,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6127,"column":0},"generated":{"line":6128,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6128,"column":0},"generated":{"line":6129,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6129,"column":0},"generated":{"line":6130,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6130,"column":0},"generated":{"line":6131,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6131,"column":0},"generated":{"line":6132,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6132,"column":0},"generated":{"line":6133,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6133,"column":0},"generated":{"line":6134,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6134,"column":0},"generated":{"line":6135,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6135,"column":0},"generated":{"line":6136,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6136,"column":0},"generated":{"line":6137,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6137,"column":0},"generated":{"line":6138,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6138,"column":0},"generated":{"line":6139,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6139,"column":0},"generated":{"line":6140,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6140,"column":0},"generated":{"line":6141,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6141,"column":0},"generated":{"line":6142,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6142,"column":0},"generated":{"line":6143,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6143,"column":0},"generated":{"line":6144,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6144,"column":0},"generated":{"line":6145,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6145,"column":0},"generated":{"line":6146,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6146,"column":0},"generated":{"line":6147,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6147,"column":0},"generated":{"line":6148,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6148,"column":0},"generated":{"line":6149,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6149,"column":0},"generated":{"line":6150,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6150,"column":0},"generated":{"line":6151,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6151,"column":0},"generated":{"line":6152,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6152,"column":0},"generated":{"line":6153,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6153,"column":0},"generated":{"line":6154,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6154,"column":0},"generated":{"line":6155,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6155,"column":0},"generated":{"line":6156,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6156,"column":0},"generated":{"line":6157,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6157,"column":0},"generated":{"line":6158,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6158,"column":0},"generated":{"line":6159,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6159,"column":0},"generated":{"line":6160,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6160,"column":0},"generated":{"line":6161,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6161,"column":0},"generated":{"line":6162,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6162,"column":0},"generated":{"line":6163,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6163,"column":0},"generated":{"line":6164,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6164,"column":0},"generated":{"line":6165,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6165,"column":0},"generated":{"line":6166,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6166,"column":0},"generated":{"line":6167,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6167,"column":0},"generated":{"line":6168,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6168,"column":0},"generated":{"line":6169,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6169,"column":0},"generated":{"line":6170,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6170,"column":0},"generated":{"line":6171,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6171,"column":0},"generated":{"line":6172,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6172,"column":0},"generated":{"line":6173,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6173,"column":0},"generated":{"line":6174,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6174,"column":0},"generated":{"line":6175,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6175,"column":0},"generated":{"line":6176,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6176,"column":0},"generated":{"line":6177,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6177,"column":0},"generated":{"line":6178,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6178,"column":0},"generated":{"line":6179,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6179,"column":0},"generated":{"line":6180,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6180,"column":0},"generated":{"line":6181,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6181,"column":0},"generated":{"line":6182,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6182,"column":0},"generated":{"line":6183,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6183,"column":0},"generated":{"line":6184,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6184,"column":0},"generated":{"line":6185,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6185,"column":0},"generated":{"line":6186,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6186,"column":0},"generated":{"line":6187,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6187,"column":0},"generated":{"line":6188,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6188,"column":0},"generated":{"line":6189,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6189,"column":0},"generated":{"line":6190,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6190,"column":0},"generated":{"line":6191,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6191,"column":0},"generated":{"line":6192,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6192,"column":0},"generated":{"line":6193,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6193,"column":0},"generated":{"line":6194,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6194,"column":0},"generated":{"line":6195,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6195,"column":0},"generated":{"line":6196,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6196,"column":0},"generated":{"line":6197,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6197,"column":0},"generated":{"line":6198,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6198,"column":0},"generated":{"line":6199,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6199,"column":0},"generated":{"line":6200,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6200,"column":0},"generated":{"line":6201,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6201,"column":0},"generated":{"line":6202,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6202,"column":0},"generated":{"line":6203,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6203,"column":0},"generated":{"line":6204,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6204,"column":0},"generated":{"line":6205,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6205,"column":0},"generated":{"line":6206,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6206,"column":0},"generated":{"line":6207,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6207,"column":0},"generated":{"line":6208,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6208,"column":0},"generated":{"line":6209,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6209,"column":0},"generated":{"line":6210,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6210,"column":0},"generated":{"line":6211,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6211,"column":0},"generated":{"line":6212,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6212,"column":0},"generated":{"line":6213,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6213,"column":0},"generated":{"line":6214,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6214,"column":0},"generated":{"line":6215,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6215,"column":0},"generated":{"line":6216,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6216,"column":0},"generated":{"line":6217,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6217,"column":0},"generated":{"line":6218,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6218,"column":0},"generated":{"line":6219,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6219,"column":0},"generated":{"line":6220,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6220,"column":0},"generated":{"line":6221,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6221,"column":0},"generated":{"line":6222,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6222,"column":0},"generated":{"line":6223,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6223,"column":0},"generated":{"line":6224,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6224,"column":0},"generated":{"line":6225,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6225,"column":0},"generated":{"line":6226,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6226,"column":0},"generated":{"line":6227,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6227,"column":0},"generated":{"line":6228,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6228,"column":0},"generated":{"line":6229,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6229,"column":0},"generated":{"line":6230,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6230,"column":0},"generated":{"line":6231,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6231,"column":0},"generated":{"line":6232,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6232,"column":0},"generated":{"line":6233,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6233,"column":0},"generated":{"line":6234,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6234,"column":0},"generated":{"line":6235,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6235,"column":0},"generated":{"line":6236,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6236,"column":0},"generated":{"line":6237,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6237,"column":0},"generated":{"line":6238,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6238,"column":0},"generated":{"line":6239,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6239,"column":0},"generated":{"line":6240,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6240,"column":0},"generated":{"line":6241,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6241,"column":0},"generated":{"line":6242,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6242,"column":0},"generated":{"line":6243,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6243,"column":0},"generated":{"line":6244,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6244,"column":0},"generated":{"line":6245,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6245,"column":0},"generated":{"line":6246,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6246,"column":0},"generated":{"line":6247,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6247,"column":0},"generated":{"line":6248,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6248,"column":0},"generated":{"line":6249,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6249,"column":0},"generated":{"line":6250,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6250,"column":0},"generated":{"line":6251,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6251,"column":0},"generated":{"line":6252,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6252,"column":0},"generated":{"line":6253,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6253,"column":0},"generated":{"line":6254,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6254,"column":0},"generated":{"line":6255,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6255,"column":0},"generated":{"line":6256,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6256,"column":0},"generated":{"line":6257,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6257,"column":0},"generated":{"line":6258,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6258,"column":0},"generated":{"line":6259,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6259,"column":0},"generated":{"line":6260,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6260,"column":0},"generated":{"line":6261,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6261,"column":0},"generated":{"line":6262,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6262,"column":0},"generated":{"line":6263,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6263,"column":0},"generated":{"line":6264,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6264,"column":0},"generated":{"line":6265,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6265,"column":0},"generated":{"line":6266,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6266,"column":0},"generated":{"line":6267,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6267,"column":0},"generated":{"line":6268,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6268,"column":0},"generated":{"line":6269,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6269,"column":0},"generated":{"line":6270,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6270,"column":0},"generated":{"line":6271,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6271,"column":0},"generated":{"line":6272,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6272,"column":0},"generated":{"line":6273,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6273,"column":0},"generated":{"line":6274,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6274,"column":0},"generated":{"line":6275,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6275,"column":0},"generated":{"line":6276,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6276,"column":0},"generated":{"line":6277,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6277,"column":0},"generated":{"line":6278,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6278,"column":0},"generated":{"line":6279,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6279,"column":0},"generated":{"line":6280,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6280,"column":0},"generated":{"line":6281,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6281,"column":0},"generated":{"line":6282,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6282,"column":0},"generated":{"line":6283,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6283,"column":0},"generated":{"line":6284,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6284,"column":0},"generated":{"line":6285,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6285,"column":0},"generated":{"line":6286,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6286,"column":0},"generated":{"line":6287,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6287,"column":0},"generated":{"line":6288,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6288,"column":0},"generated":{"line":6289,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6289,"column":0},"generated":{"line":6290,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6290,"column":0},"generated":{"line":6291,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6291,"column":0},"generated":{"line":6292,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6292,"column":0},"generated":{"line":6293,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6293,"column":0},"generated":{"line":6294,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6294,"column":0},"generated":{"line":6295,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6295,"column":0},"generated":{"line":6296,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6296,"column":0},"generated":{"line":6297,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6297,"column":0},"generated":{"line":6298,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6298,"column":0},"generated":{"line":6299,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6299,"column":0},"generated":{"line":6300,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6300,"column":0},"generated":{"line":6301,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6301,"column":0},"generated":{"line":6302,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6302,"column":0},"generated":{"line":6303,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6303,"column":0},"generated":{"line":6304,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6304,"column":0},"generated":{"line":6305,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6305,"column":0},"generated":{"line":6306,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6306,"column":0},"generated":{"line":6307,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6307,"column":0},"generated":{"line":6308,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6308,"column":0},"generated":{"line":6309,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6309,"column":0},"generated":{"line":6310,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6310,"column":0},"generated":{"line":6311,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6311,"column":0},"generated":{"line":6312,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6312,"column":0},"generated":{"line":6313,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6313,"column":0},"generated":{"line":6314,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6314,"column":0},"generated":{"line":6315,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6315,"column":0},"generated":{"line":6316,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6316,"column":0},"generated":{"line":6317,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6317,"column":0},"generated":{"line":6318,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6318,"column":0},"generated":{"line":6319,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6319,"column":0},"generated":{"line":6320,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6320,"column":0},"generated":{"line":6321,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6321,"column":0},"generated":{"line":6322,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6322,"column":0},"generated":{"line":6323,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6323,"column":0},"generated":{"line":6324,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6324,"column":0},"generated":{"line":6325,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6325,"column":0},"generated":{"line":6326,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6326,"column":0},"generated":{"line":6327,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6327,"column":0},"generated":{"line":6328,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6328,"column":0},"generated":{"line":6329,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6329,"column":0},"generated":{"line":6330,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6330,"column":0},"generated":{"line":6331,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6331,"column":0},"generated":{"line":6332,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6332,"column":0},"generated":{"line":6333,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6333,"column":0},"generated":{"line":6334,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6334,"column":0},"generated":{"line":6335,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6335,"column":0},"generated":{"line":6336,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6336,"column":0},"generated":{"line":6337,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6337,"column":0},"generated":{"line":6338,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6338,"column":0},"generated":{"line":6339,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6339,"column":0},"generated":{"line":6340,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6340,"column":0},"generated":{"line":6341,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6341,"column":0},"generated":{"line":6342,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6342,"column":0},"generated":{"line":6343,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6343,"column":0},"generated":{"line":6344,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6344,"column":0},"generated":{"line":6345,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6345,"column":0},"generated":{"line":6346,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6346,"column":0},"generated":{"line":6347,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6347,"column":0},"generated":{"line":6348,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6348,"column":0},"generated":{"line":6349,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6349,"column":0},"generated":{"line":6350,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6350,"column":0},"generated":{"line":6351,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6351,"column":0},"generated":{"line":6352,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6352,"column":0},"generated":{"line":6353,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6353,"column":0},"generated":{"line":6354,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6354,"column":0},"generated":{"line":6355,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6355,"column":0},"generated":{"line":6356,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6356,"column":0},"generated":{"line":6357,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6357,"column":0},"generated":{"line":6358,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6358,"column":0},"generated":{"line":6359,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6359,"column":0},"generated":{"line":6360,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6360,"column":0},"generated":{"line":6361,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6361,"column":0},"generated":{"line":6362,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6362,"column":0},"generated":{"line":6363,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6363,"column":0},"generated":{"line":6364,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6364,"column":0},"generated":{"line":6365,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6365,"column":0},"generated":{"line":6366,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6366,"column":0},"generated":{"line":6367,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6367,"column":0},"generated":{"line":6368,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6368,"column":0},"generated":{"line":6369,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6369,"column":0},"generated":{"line":6370,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6370,"column":0},"generated":{"line":6371,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6371,"column":0},"generated":{"line":6372,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6372,"column":0},"generated":{"line":6373,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6373,"column":0},"generated":{"line":6374,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6374,"column":0},"generated":{"line":6375,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6375,"column":0},"generated":{"line":6376,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6376,"column":0},"generated":{"line":6377,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6377,"column":0},"generated":{"line":6378,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6378,"column":0},"generated":{"line":6379,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6379,"column":0},"generated":{"line":6380,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6380,"column":0},"generated":{"line":6381,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6381,"column":0},"generated":{"line":6382,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6382,"column":0},"generated":{"line":6383,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6383,"column":0},"generated":{"line":6384,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6384,"column":0},"generated":{"line":6385,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6385,"column":0},"generated":{"line":6386,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6386,"column":0},"generated":{"line":6387,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6387,"column":0},"generated":{"line":6388,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6388,"column":0},"generated":{"line":6389,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6389,"column":0},"generated":{"line":6390,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6390,"column":0},"generated":{"line":6391,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6391,"column":0},"generated":{"line":6392,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6392,"column":0},"generated":{"line":6393,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6393,"column":0},"generated":{"line":6394,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6394,"column":0},"generated":{"line":6395,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6395,"column":0},"generated":{"line":6396,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6396,"column":0},"generated":{"line":6397,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6397,"column":0},"generated":{"line":6398,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6398,"column":0},"generated":{"line":6399,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6399,"column":0},"generated":{"line":6400,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6400,"column":0},"generated":{"line":6401,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6401,"column":0},"generated":{"line":6402,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6402,"column":0},"generated":{"line":6403,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6403,"column":0},"generated":{"line":6404,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6404,"column":0},"generated":{"line":6405,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6405,"column":0},"generated":{"line":6406,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6406,"column":0},"generated":{"line":6407,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6407,"column":0},"generated":{"line":6408,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6408,"column":0},"generated":{"line":6409,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6409,"column":0},"generated":{"line":6410,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6410,"column":0},"generated":{"line":6411,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6411,"column":0},"generated":{"line":6412,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6412,"column":0},"generated":{"line":6413,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6413,"column":0},"generated":{"line":6414,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6414,"column":0},"generated":{"line":6415,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6415,"column":0},"generated":{"line":6416,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6416,"column":0},"generated":{"line":6417,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6417,"column":0},"generated":{"line":6418,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6418,"column":0},"generated":{"line":6419,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6419,"column":0},"generated":{"line":6420,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6420,"column":0},"generated":{"line":6421,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6421,"column":0},"generated":{"line":6422,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6422,"column":0},"generated":{"line":6423,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6423,"column":0},"generated":{"line":6424,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6424,"column":0},"generated":{"line":6425,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6425,"column":0},"generated":{"line":6426,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6426,"column":0},"generated":{"line":6427,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6427,"column":0},"generated":{"line":6428,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6428,"column":0},"generated":{"line":6429,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6429,"column":0},"generated":{"line":6430,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6430,"column":0},"generated":{"line":6431,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6431,"column":0},"generated":{"line":6432,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6432,"column":0},"generated":{"line":6433,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6433,"column":0},"generated":{"line":6434,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6434,"column":0},"generated":{"line":6435,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6435,"column":0},"generated":{"line":6436,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6436,"column":0},"generated":{"line":6437,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6437,"column":0},"generated":{"line":6438,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6438,"column":0},"generated":{"line":6439,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6439,"column":0},"generated":{"line":6440,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6440,"column":0},"generated":{"line":6441,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6441,"column":0},"generated":{"line":6442,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6442,"column":0},"generated":{"line":6443,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6443,"column":0},"generated":{"line":6444,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6444,"column":0},"generated":{"line":6445,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6445,"column":0},"generated":{"line":6446,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6446,"column":0},"generated":{"line":6447,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6447,"column":0},"generated":{"line":6448,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6448,"column":0},"generated":{"line":6449,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6449,"column":0},"generated":{"line":6450,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6450,"column":0},"generated":{"line":6451,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6451,"column":0},"generated":{"line":6452,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6452,"column":0},"generated":{"line":6453,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6453,"column":0},"generated":{"line":6454,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6454,"column":0},"generated":{"line":6455,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6455,"column":0},"generated":{"line":6456,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6456,"column":0},"generated":{"line":6457,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6457,"column":0},"generated":{"line":6458,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6458,"column":0},"generated":{"line":6459,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6459,"column":0},"generated":{"line":6460,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6460,"column":0},"generated":{"line":6461,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6461,"column":0},"generated":{"line":6462,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6462,"column":0},"generated":{"line":6463,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6463,"column":0},"generated":{"line":6464,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6464,"column":0},"generated":{"line":6465,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6465,"column":0},"generated":{"line":6466,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6466,"column":0},"generated":{"line":6467,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6467,"column":0},"generated":{"line":6468,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6468,"column":0},"generated":{"line":6469,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6469,"column":0},"generated":{"line":6470,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6470,"column":0},"generated":{"line":6471,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6471,"column":0},"generated":{"line":6472,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6472,"column":0},"generated":{"line":6473,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6473,"column":0},"generated":{"line":6474,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6474,"column":0},"generated":{"line":6475,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6475,"column":0},"generated":{"line":6476,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6476,"column":0},"generated":{"line":6477,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6477,"column":0},"generated":{"line":6478,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6478,"column":0},"generated":{"line":6479,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6479,"column":0},"generated":{"line":6480,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6480,"column":0},"generated":{"line":6481,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6481,"column":0},"generated":{"line":6482,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6482,"column":0},"generated":{"line":6483,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6483,"column":0},"generated":{"line":6484,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6484,"column":0},"generated":{"line":6485,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6485,"column":0},"generated":{"line":6486,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6486,"column":0},"generated":{"line":6487,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6487,"column":0},"generated":{"line":6488,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6488,"column":0},"generated":{"line":6489,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6489,"column":0},"generated":{"line":6490,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6490,"column":0},"generated":{"line":6491,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6491,"column":0},"generated":{"line":6492,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6492,"column":0},"generated":{"line":6493,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6493,"column":0},"generated":{"line":6494,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6494,"column":0},"generated":{"line":6495,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6495,"column":0},"generated":{"line":6496,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6496,"column":0},"generated":{"line":6497,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6497,"column":0},"generated":{"line":6498,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6498,"column":0},"generated":{"line":6499,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6499,"column":0},"generated":{"line":6500,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6500,"column":0},"generated":{"line":6501,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6501,"column":0},"generated":{"line":6502,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6502,"column":0},"generated":{"line":6503,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6503,"column":0},"generated":{"line":6504,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6504,"column":0},"generated":{"line":6505,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6505,"column":0},"generated":{"line":6506,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6506,"column":0},"generated":{"line":6507,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6507,"column":0},"generated":{"line":6508,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6508,"column":0},"generated":{"line":6509,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6509,"column":0},"generated":{"line":6510,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6510,"column":0},"generated":{"line":6511,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6511,"column":0},"generated":{"line":6512,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6512,"column":0},"generated":{"line":6513,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6513,"column":0},"generated":{"line":6514,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6514,"column":0},"generated":{"line":6515,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6515,"column":0},"generated":{"line":6516,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6516,"column":0},"generated":{"line":6517,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6517,"column":0},"generated":{"line":6518,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6518,"column":0},"generated":{"line":6519,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6519,"column":0},"generated":{"line":6520,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6520,"column":0},"generated":{"line":6521,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6521,"column":0},"generated":{"line":6522,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6522,"column":0},"generated":{"line":6523,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6523,"column":0},"generated":{"line":6524,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6524,"column":0},"generated":{"line":6525,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6525,"column":0},"generated":{"line":6526,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6526,"column":0},"generated":{"line":6527,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6527,"column":0},"generated":{"line":6528,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6528,"column":0},"generated":{"line":6529,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6529,"column":0},"generated":{"line":6530,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6530,"column":0},"generated":{"line":6531,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6531,"column":0},"generated":{"line":6532,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6532,"column":0},"generated":{"line":6533,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6533,"column":0},"generated":{"line":6534,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6534,"column":0},"generated":{"line":6535,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6535,"column":0},"generated":{"line":6536,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6536,"column":0},"generated":{"line":6537,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6537,"column":0},"generated":{"line":6538,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6538,"column":0},"generated":{"line":6539,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6539,"column":0},"generated":{"line":6540,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6540,"column":0},"generated":{"line":6541,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6541,"column":0},"generated":{"line":6542,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6542,"column":0},"generated":{"line":6543,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6543,"column":0},"generated":{"line":6544,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6544,"column":0},"generated":{"line":6545,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6545,"column":0},"generated":{"line":6546,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6546,"column":0},"generated":{"line":6547,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6547,"column":0},"generated":{"line":6548,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6548,"column":0},"generated":{"line":6549,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6549,"column":0},"generated":{"line":6550,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6550,"column":0},"generated":{"line":6551,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6551,"column":0},"generated":{"line":6552,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6552,"column":0},"generated":{"line":6553,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6553,"column":0},"generated":{"line":6554,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6554,"column":0},"generated":{"line":6555,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6555,"column":0},"generated":{"line":6556,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6556,"column":0},"generated":{"line":6557,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6557,"column":0},"generated":{"line":6558,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6558,"column":0},"generated":{"line":6559,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6559,"column":0},"generated":{"line":6560,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6560,"column":0},"generated":{"line":6561,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6561,"column":0},"generated":{"line":6562,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6562,"column":0},"generated":{"line":6563,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6563,"column":0},"generated":{"line":6564,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6564,"column":0},"generated":{"line":6565,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6565,"column":0},"generated":{"line":6566,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6566,"column":0},"generated":{"line":6567,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6567,"column":0},"generated":{"line":6568,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6568,"column":0},"generated":{"line":6569,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6569,"column":0},"generated":{"line":6570,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6570,"column":0},"generated":{"line":6571,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6571,"column":0},"generated":{"line":6572,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6572,"column":0},"generated":{"line":6573,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6573,"column":0},"generated":{"line":6574,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6574,"column":0},"generated":{"line":6575,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6575,"column":0},"generated":{"line":6576,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6576,"column":0},"generated":{"line":6577,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6577,"column":0},"generated":{"line":6578,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6578,"column":0},"generated":{"line":6579,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6579,"column":0},"generated":{"line":6580,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6580,"column":0},"generated":{"line":6581,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6581,"column":0},"generated":{"line":6582,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6582,"column":0},"generated":{"line":6583,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6583,"column":0},"generated":{"line":6584,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6584,"column":0},"generated":{"line":6585,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6585,"column":0},"generated":{"line":6586,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6586,"column":0},"generated":{"line":6587,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6587,"column":0},"generated":{"line":6588,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6588,"column":0},"generated":{"line":6589,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6589,"column":0},"generated":{"line":6590,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6590,"column":0},"generated":{"line":6591,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6591,"column":0},"generated":{"line":6592,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6592,"column":0},"generated":{"line":6593,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6593,"column":0},"generated":{"line":6594,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6594,"column":0},"generated":{"line":6595,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6595,"column":0},"generated":{"line":6596,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6596,"column":0},"generated":{"line":6597,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6597,"column":0},"generated":{"line":6598,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6598,"column":0},"generated":{"line":6599,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6599,"column":0},"generated":{"line":6600,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6600,"column":0},"generated":{"line":6601,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6601,"column":0},"generated":{"line":6602,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6602,"column":0},"generated":{"line":6603,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6603,"column":0},"generated":{"line":6604,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6604,"column":0},"generated":{"line":6605,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6605,"column":0},"generated":{"line":6606,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6606,"column":0},"generated":{"line":6607,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6607,"column":0},"generated":{"line":6608,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6608,"column":0},"generated":{"line":6609,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6609,"column":0},"generated":{"line":6610,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6610,"column":0},"generated":{"line":6611,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6611,"column":0},"generated":{"line":6612,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6612,"column":0},"generated":{"line":6613,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6613,"column":0},"generated":{"line":6614,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6614,"column":0},"generated":{"line":6615,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6615,"column":0},"generated":{"line":6616,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6616,"column":0},"generated":{"line":6617,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6617,"column":0},"generated":{"line":6618,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6618,"column":0},"generated":{"line":6619,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6619,"column":0},"generated":{"line":6620,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6620,"column":0},"generated":{"line":6621,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6621,"column":0},"generated":{"line":6622,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6622,"column":0},"generated":{"line":6623,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6623,"column":0},"generated":{"line":6624,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6624,"column":0},"generated":{"line":6625,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6625,"column":0},"generated":{"line":6626,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6626,"column":0},"generated":{"line":6627,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6627,"column":0},"generated":{"line":6628,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6628,"column":0},"generated":{"line":6629,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6629,"column":0},"generated":{"line":6630,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6630,"column":0},"generated":{"line":6631,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6631,"column":0},"generated":{"line":6632,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6632,"column":0},"generated":{"line":6633,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6633,"column":0},"generated":{"line":6634,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6634,"column":0},"generated":{"line":6635,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6635,"column":0},"generated":{"line":6636,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6636,"column":0},"generated":{"line":6637,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6637,"column":0},"generated":{"line":6638,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6638,"column":0},"generated":{"line":6639,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6639,"column":0},"generated":{"line":6640,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6640,"column":0},"generated":{"line":6641,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6641,"column":0},"generated":{"line":6642,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6642,"column":0},"generated":{"line":6643,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6643,"column":0},"generated":{"line":6644,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6644,"column":0},"generated":{"line":6645,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6645,"column":0},"generated":{"line":6646,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6646,"column":0},"generated":{"line":6647,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6647,"column":0},"generated":{"line":6648,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6648,"column":0},"generated":{"line":6649,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6649,"column":0},"generated":{"line":6650,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6650,"column":0},"generated":{"line":6651,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6651,"column":0},"generated":{"line":6652,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6652,"column":0},"generated":{"line":6653,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6653,"column":0},"generated":{"line":6654,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6654,"column":0},"generated":{"line":6655,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6655,"column":0},"generated":{"line":6656,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6656,"column":0},"generated":{"line":6657,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6657,"column":0},"generated":{"line":6658,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6658,"column":0},"generated":{"line":6659,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6659,"column":0},"generated":{"line":6660,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6660,"column":0},"generated":{"line":6661,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6661,"column":0},"generated":{"line":6662,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6662,"column":0},"generated":{"line":6663,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6663,"column":0},"generated":{"line":6664,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6664,"column":0},"generated":{"line":6665,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6665,"column":0},"generated":{"line":6666,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6666,"column":0},"generated":{"line":6667,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6667,"column":0},"generated":{"line":6668,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6668,"column":0},"generated":{"line":6669,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6669,"column":0},"generated":{"line":6670,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6670,"column":0},"generated":{"line":6671,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6671,"column":0},"generated":{"line":6672,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6672,"column":0},"generated":{"line":6673,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6673,"column":0},"generated":{"line":6674,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6674,"column":0},"generated":{"line":6675,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6675,"column":0},"generated":{"line":6676,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6676,"column":0},"generated":{"line":6677,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6677,"column":0},"generated":{"line":6678,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6678,"column":0},"generated":{"line":6679,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6679,"column":0},"generated":{"line":6680,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6680,"column":0},"generated":{"line":6681,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6681,"column":0},"generated":{"line":6682,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6682,"column":0},"generated":{"line":6683,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6683,"column":0},"generated":{"line":6684,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6684,"column":0},"generated":{"line":6685,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6685,"column":0},"generated":{"line":6686,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6686,"column":0},"generated":{"line":6687,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6687,"column":0},"generated":{"line":6688,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6688,"column":0},"generated":{"line":6689,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6689,"column":0},"generated":{"line":6690,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6690,"column":0},"generated":{"line":6691,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6691,"column":0},"generated":{"line":6692,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6692,"column":0},"generated":{"line":6693,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6693,"column":0},"generated":{"line":6694,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6694,"column":0},"generated":{"line":6695,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6695,"column":0},"generated":{"line":6696,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6696,"column":0},"generated":{"line":6697,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6697,"column":0},"generated":{"line":6698,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6698,"column":0},"generated":{"line":6699,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6699,"column":0},"generated":{"line":6700,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6700,"column":0},"generated":{"line":6701,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6701,"column":0},"generated":{"line":6702,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6702,"column":0},"generated":{"line":6703,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6703,"column":0},"generated":{"line":6704,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6704,"column":0},"generated":{"line":6705,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6705,"column":0},"generated":{"line":6706,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6706,"column":0},"generated":{"line":6707,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6707,"column":0},"generated":{"line":6708,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6708,"column":0},"generated":{"line":6709,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6709,"column":0},"generated":{"line":6710,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6710,"column":0},"generated":{"line":6711,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6711,"column":0},"generated":{"line":6712,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6712,"column":0},"generated":{"line":6713,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6713,"column":0},"generated":{"line":6714,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6714,"column":0},"generated":{"line":6715,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6715,"column":0},"generated":{"line":6716,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6716,"column":0},"generated":{"line":6717,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6717,"column":0},"generated":{"line":6718,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6718,"column":0},"generated":{"line":6719,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6719,"column":0},"generated":{"line":6720,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6720,"column":0},"generated":{"line":6721,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6721,"column":0},"generated":{"line":6722,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6722,"column":0},"generated":{"line":6723,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6723,"column":0},"generated":{"line":6724,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6724,"column":0},"generated":{"line":6725,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6725,"column":0},"generated":{"line":6726,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6726,"column":0},"generated":{"line":6727,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6727,"column":0},"generated":{"line":6728,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6728,"column":0},"generated":{"line":6729,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6729,"column":0},"generated":{"line":6730,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6730,"column":0},"generated":{"line":6731,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6731,"column":0},"generated":{"line":6732,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6732,"column":0},"generated":{"line":6733,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6733,"column":0},"generated":{"line":6734,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6734,"column":0},"generated":{"line":6735,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6735,"column":0},"generated":{"line":6736,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6736,"column":0},"generated":{"line":6737,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6737,"column":0},"generated":{"line":6738,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6738,"column":0},"generated":{"line":6739,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6739,"column":0},"generated":{"line":6740,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6740,"column":0},"generated":{"line":6741,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6741,"column":0},"generated":{"line":6742,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6742,"column":0},"generated":{"line":6743,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6743,"column":0},"generated":{"line":6744,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6744,"column":0},"generated":{"line":6745,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6745,"column":0},"generated":{"line":6746,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6746,"column":0},"generated":{"line":6747,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6747,"column":0},"generated":{"line":6748,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6748,"column":0},"generated":{"line":6749,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6749,"column":0},"generated":{"line":6750,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6750,"column":0},"generated":{"line":6751,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6751,"column":0},"generated":{"line":6752,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6752,"column":0},"generated":{"line":6753,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6753,"column":0},"generated":{"line":6754,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6754,"column":0},"generated":{"line":6755,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6755,"column":0},"generated":{"line":6756,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6756,"column":0},"generated":{"line":6757,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6757,"column":0},"generated":{"line":6758,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6758,"column":0},"generated":{"line":6759,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6759,"column":0},"generated":{"line":6760,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6760,"column":0},"generated":{"line":6761,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6761,"column":0},"generated":{"line":6762,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6762,"column":0},"generated":{"line":6763,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6763,"column":0},"generated":{"line":6764,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6764,"column":0},"generated":{"line":6765,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6765,"column":0},"generated":{"line":6766,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6766,"column":0},"generated":{"line":6767,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6767,"column":0},"generated":{"line":6768,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6768,"column":0},"generated":{"line":6769,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6769,"column":0},"generated":{"line":6770,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6770,"column":0},"generated":{"line":6771,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6771,"column":0},"generated":{"line":6772,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6772,"column":0},"generated":{"line":6773,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6773,"column":0},"generated":{"line":6774,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6774,"column":0},"generated":{"line":6775,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6775,"column":0},"generated":{"line":6776,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6776,"column":0},"generated":{"line":6777,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6777,"column":0},"generated":{"line":6778,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6778,"column":0},"generated":{"line":6779,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6779,"column":0},"generated":{"line":6780,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6780,"column":0},"generated":{"line":6781,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6781,"column":0},"generated":{"line":6782,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6782,"column":0},"generated":{"line":6783,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6783,"column":0},"generated":{"line":6784,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6784,"column":0},"generated":{"line":6785,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6785,"column":0},"generated":{"line":6786,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6786,"column":0},"generated":{"line":6787,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6787,"column":0},"generated":{"line":6788,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6788,"column":0},"generated":{"line":6789,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6789,"column":0},"generated":{"line":6790,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6790,"column":0},"generated":{"line":6791,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6791,"column":0},"generated":{"line":6792,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6792,"column":0},"generated":{"line":6793,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6793,"column":0},"generated":{"line":6794,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6794,"column":0},"generated":{"line":6795,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6795,"column":0},"generated":{"line":6796,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6796,"column":0},"generated":{"line":6797,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6797,"column":0},"generated":{"line":6798,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6798,"column":0},"generated":{"line":6799,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6799,"column":0},"generated":{"line":6800,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6800,"column":0},"generated":{"line":6801,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6801,"column":0},"generated":{"line":6802,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6802,"column":0},"generated":{"line":6803,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6803,"column":0},"generated":{"line":6804,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6804,"column":0},"generated":{"line":6805,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6805,"column":0},"generated":{"line":6806,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6806,"column":0},"generated":{"line":6807,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6807,"column":0},"generated":{"line":6808,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6808,"column":0},"generated":{"line":6809,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6809,"column":0},"generated":{"line":6810,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6810,"column":0},"generated":{"line":6811,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6811,"column":0},"generated":{"line":6812,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6812,"column":0},"generated":{"line":6813,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6813,"column":0},"generated":{"line":6814,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6814,"column":0},"generated":{"line":6815,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6815,"column":0},"generated":{"line":6816,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6816,"column":0},"generated":{"line":6817,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6817,"column":0},"generated":{"line":6818,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6818,"column":0},"generated":{"line":6819,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6819,"column":0},"generated":{"line":6820,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6820,"column":0},"generated":{"line":6821,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6821,"column":0},"generated":{"line":6822,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6822,"column":0},"generated":{"line":6823,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6823,"column":0},"generated":{"line":6824,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6824,"column":0},"generated":{"line":6825,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6825,"column":0},"generated":{"line":6826,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6826,"column":0},"generated":{"line":6827,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6827,"column":0},"generated":{"line":6828,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6828,"column":0},"generated":{"line":6829,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6829,"column":0},"generated":{"line":6830,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6830,"column":0},"generated":{"line":6831,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6831,"column":0},"generated":{"line":6832,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6832,"column":0},"generated":{"line":6833,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6833,"column":0},"generated":{"line":6834,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6834,"column":0},"generated":{"line":6835,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6835,"column":0},"generated":{"line":6836,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6836,"column":0},"generated":{"line":6837,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6837,"column":0},"generated":{"line":6838,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6838,"column":0},"generated":{"line":6839,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6839,"column":0},"generated":{"line":6840,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6840,"column":0},"generated":{"line":6841,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6841,"column":0},"generated":{"line":6842,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6842,"column":0},"generated":{"line":6843,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6843,"column":0},"generated":{"line":6844,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6844,"column":0},"generated":{"line":6845,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6845,"column":0},"generated":{"line":6846,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6846,"column":0},"generated":{"line":6847,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6847,"column":0},"generated":{"line":6848,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6848,"column":0},"generated":{"line":6849,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6849,"column":0},"generated":{"line":6850,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6850,"column":0},"generated":{"line":6851,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6851,"column":0},"generated":{"line":6852,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6852,"column":0},"generated":{"line":6853,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6853,"column":0},"generated":{"line":6854,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6854,"column":0},"generated":{"line":6855,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6855,"column":0},"generated":{"line":6856,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6856,"column":0},"generated":{"line":6857,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6857,"column":0},"generated":{"line":6858,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6858,"column":0},"generated":{"line":6859,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6859,"column":0},"generated":{"line":6860,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6860,"column":0},"generated":{"line":6861,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6861,"column":0},"generated":{"line":6862,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6862,"column":0},"generated":{"line":6863,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6863,"column":0},"generated":{"line":6864,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6864,"column":0},"generated":{"line":6865,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6865,"column":0},"generated":{"line":6866,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6866,"column":0},"generated":{"line":6867,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6867,"column":0},"generated":{"line":6868,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6868,"column":0},"generated":{"line":6869,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6869,"column":0},"generated":{"line":6870,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6870,"column":0},"generated":{"line":6871,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6871,"column":0},"generated":{"line":6872,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6872,"column":0},"generated":{"line":6873,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6873,"column":0},"generated":{"line":6874,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6874,"column":0},"generated":{"line":6875,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6875,"column":0},"generated":{"line":6876,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6876,"column":0},"generated":{"line":6877,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6877,"column":0},"generated":{"line":6878,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6878,"column":0},"generated":{"line":6879,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6879,"column":0},"generated":{"line":6880,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6880,"column":0},"generated":{"line":6881,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6881,"column":0},"generated":{"line":6882,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6882,"column":0},"generated":{"line":6883,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6883,"column":0},"generated":{"line":6884,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6884,"column":0},"generated":{"line":6885,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6885,"column":0},"generated":{"line":6886,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6886,"column":0},"generated":{"line":6887,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6887,"column":0},"generated":{"line":6888,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6888,"column":0},"generated":{"line":6889,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6889,"column":0},"generated":{"line":6890,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6890,"column":0},"generated":{"line":6891,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6891,"column":0},"generated":{"line":6892,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6892,"column":0},"generated":{"line":6893,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6893,"column":0},"generated":{"line":6894,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6894,"column":0},"generated":{"line":6895,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6895,"column":0},"generated":{"line":6896,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6896,"column":0},"generated":{"line":6897,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6897,"column":0},"generated":{"line":6898,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6898,"column":0},"generated":{"line":6899,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6899,"column":0},"generated":{"line":6900,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6900,"column":0},"generated":{"line":6901,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6901,"column":0},"generated":{"line":6902,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6902,"column":0},"generated":{"line":6903,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6903,"column":0},"generated":{"line":6904,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6904,"column":0},"generated":{"line":6905,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6905,"column":0},"generated":{"line":6906,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6906,"column":0},"generated":{"line":6907,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6907,"column":0},"generated":{"line":6908,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6908,"column":0},"generated":{"line":6909,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6909,"column":0},"generated":{"line":6910,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6910,"column":0},"generated":{"line":6911,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6911,"column":0},"generated":{"line":6912,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6912,"column":0},"generated":{"line":6913,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6913,"column":0},"generated":{"line":6914,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6914,"column":0},"generated":{"line":6915,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6915,"column":0},"generated":{"line":6916,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6916,"column":0},"generated":{"line":6917,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6917,"column":0},"generated":{"line":6918,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6918,"column":0},"generated":{"line":6919,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6919,"column":0},"generated":{"line":6920,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6920,"column":0},"generated":{"line":6921,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6921,"column":0},"generated":{"line":6922,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6922,"column":0},"generated":{"line":6923,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6923,"column":0},"generated":{"line":6924,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6924,"column":0},"generated":{"line":6925,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6925,"column":0},"generated":{"line":6926,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6926,"column":0},"generated":{"line":6927,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6927,"column":0},"generated":{"line":6928,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6928,"column":0},"generated":{"line":6929,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6929,"column":0},"generated":{"line":6930,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6930,"column":0},"generated":{"line":6931,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6931,"column":0},"generated":{"line":6932,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6932,"column":0},"generated":{"line":6933,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6933,"column":0},"generated":{"line":6934,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6934,"column":0},"generated":{"line":6935,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6935,"column":0},"generated":{"line":6936,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6936,"column":0},"generated":{"line":6937,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6937,"column":0},"generated":{"line":6938,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6938,"column":0},"generated":{"line":6939,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6939,"column":0},"generated":{"line":6940,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6940,"column":0},"generated":{"line":6941,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6941,"column":0},"generated":{"line":6942,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6942,"column":0},"generated":{"line":6943,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6943,"column":0},"generated":{"line":6944,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6944,"column":0},"generated":{"line":6945,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6945,"column":0},"generated":{"line":6946,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6946,"column":0},"generated":{"line":6947,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6947,"column":0},"generated":{"line":6948,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6948,"column":0},"generated":{"line":6949,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6949,"column":0},"generated":{"line":6950,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6950,"column":0},"generated":{"line":6951,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6951,"column":0},"generated":{"line":6952,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6952,"column":0},"generated":{"line":6953,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6953,"column":0},"generated":{"line":6954,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6954,"column":0},"generated":{"line":6955,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6955,"column":0},"generated":{"line":6956,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6956,"column":0},"generated":{"line":6957,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6957,"column":0},"generated":{"line":6958,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6958,"column":0},"generated":{"line":6959,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6959,"column":0},"generated":{"line":6960,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6960,"column":0},"generated":{"line":6961,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6961,"column":0},"generated":{"line":6962,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6962,"column":0},"generated":{"line":6963,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6963,"column":0},"generated":{"line":6964,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6964,"column":0},"generated":{"line":6965,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6965,"column":0},"generated":{"line":6966,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6966,"column":0},"generated":{"line":6967,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6967,"column":0},"generated":{"line":6968,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6968,"column":0},"generated":{"line":6969,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6969,"column":0},"generated":{"line":6970,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6970,"column":0},"generated":{"line":6971,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6971,"column":0},"generated":{"line":6972,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6972,"column":0},"generated":{"line":6973,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6973,"column":0},"generated":{"line":6974,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6974,"column":0},"generated":{"line":6975,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6975,"column":0},"generated":{"line":6976,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6976,"column":0},"generated":{"line":6977,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6977,"column":0},"generated":{"line":6978,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6978,"column":0},"generated":{"line":6979,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6979,"column":0},"generated":{"line":6980,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6980,"column":0},"generated":{"line":6981,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6981,"column":0},"generated":{"line":6982,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6982,"column":0},"generated":{"line":6983,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6983,"column":0},"generated":{"line":6984,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6984,"column":0},"generated":{"line":6985,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6985,"column":0},"generated":{"line":6986,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6986,"column":0},"generated":{"line":6987,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6987,"column":0},"generated":{"line":6988,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6988,"column":0},"generated":{"line":6989,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6989,"column":0},"generated":{"line":6990,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6990,"column":0},"generated":{"line":6991,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6991,"column":0},"generated":{"line":6992,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6992,"column":0},"generated":{"line":6993,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6993,"column":0},"generated":{"line":6994,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6994,"column":0},"generated":{"line":6995,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6995,"column":0},"generated":{"line":6996,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6996,"column":0},"generated":{"line":6997,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6997,"column":0},"generated":{"line":6998,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6998,"column":0},"generated":{"line":6999,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":6999,"column":0},"generated":{"line":7000,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7000,"column":0},"generated":{"line":7001,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7001,"column":0},"generated":{"line":7002,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7002,"column":0},"generated":{"line":7003,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7003,"column":0},"generated":{"line":7004,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7004,"column":0},"generated":{"line":7005,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7005,"column":0},"generated":{"line":7006,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7006,"column":0},"generated":{"line":7007,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7007,"column":0},"generated":{"line":7008,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7008,"column":0},"generated":{"line":7009,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7009,"column":0},"generated":{"line":7010,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7010,"column":0},"generated":{"line":7011,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7011,"column":0},"generated":{"line":7012,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7012,"column":0},"generated":{"line":7013,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7013,"column":0},"generated":{"line":7014,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7014,"column":0},"generated":{"line":7015,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7015,"column":0},"generated":{"line":7016,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7016,"column":0},"generated":{"line":7017,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7017,"column":0},"generated":{"line":7018,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7018,"column":0},"generated":{"line":7019,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7019,"column":0},"generated":{"line":7020,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7020,"column":0},"generated":{"line":7021,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7021,"column":0},"generated":{"line":7022,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7022,"column":0},"generated":{"line":7023,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7023,"column":0},"generated":{"line":7024,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7024,"column":0},"generated":{"line":7025,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7025,"column":0},"generated":{"line":7026,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7026,"column":0},"generated":{"line":7027,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7027,"column":0},"generated":{"line":7028,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7028,"column":0},"generated":{"line":7029,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7029,"column":0},"generated":{"line":7030,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7030,"column":0},"generated":{"line":7031,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7031,"column":0},"generated":{"line":7032,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7032,"column":0},"generated":{"line":7033,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7033,"column":0},"generated":{"line":7034,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7034,"column":0},"generated":{"line":7035,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7035,"column":0},"generated":{"line":7036,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7036,"column":0},"generated":{"line":7037,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7037,"column":0},"generated":{"line":7038,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7038,"column":0},"generated":{"line":7039,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7039,"column":0},"generated":{"line":7040,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7040,"column":0},"generated":{"line":7041,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7041,"column":0},"generated":{"line":7042,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7042,"column":0},"generated":{"line":7043,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7043,"column":0},"generated":{"line":7044,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7044,"column":0},"generated":{"line":7045,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7045,"column":0},"generated":{"line":7046,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7046,"column":0},"generated":{"line":7047,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7047,"column":0},"generated":{"line":7048,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7048,"column":0},"generated":{"line":7049,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7049,"column":0},"generated":{"line":7050,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7050,"column":0},"generated":{"line":7051,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7051,"column":0},"generated":{"line":7052,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7052,"column":0},"generated":{"line":7053,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7053,"column":0},"generated":{"line":7054,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7054,"column":0},"generated":{"line":7055,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7055,"column":0},"generated":{"line":7056,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7056,"column":0},"generated":{"line":7057,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7057,"column":0},"generated":{"line":7058,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7058,"column":0},"generated":{"line":7059,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7059,"column":0},"generated":{"line":7060,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7060,"column":0},"generated":{"line":7061,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7061,"column":0},"generated":{"line":7062,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7062,"column":0},"generated":{"line":7063,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7063,"column":0},"generated":{"line":7064,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7064,"column":0},"generated":{"line":7065,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7065,"column":0},"generated":{"line":7066,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7066,"column":0},"generated":{"line":7067,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7067,"column":0},"generated":{"line":7068,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7068,"column":0},"generated":{"line":7069,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7069,"column":0},"generated":{"line":7070,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7070,"column":0},"generated":{"line":7071,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7071,"column":0},"generated":{"line":7072,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7072,"column":0},"generated":{"line":7073,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7073,"column":0},"generated":{"line":7074,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7074,"column":0},"generated":{"line":7075,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7075,"column":0},"generated":{"line":7076,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7076,"column":0},"generated":{"line":7077,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7077,"column":0},"generated":{"line":7078,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7078,"column":0},"generated":{"line":7079,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7079,"column":0},"generated":{"line":7080,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7080,"column":0},"generated":{"line":7081,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7081,"column":0},"generated":{"line":7082,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7082,"column":0},"generated":{"line":7083,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7083,"column":0},"generated":{"line":7084,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7084,"column":0},"generated":{"line":7085,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7085,"column":0},"generated":{"line":7086,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7086,"column":0},"generated":{"line":7087,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7087,"column":0},"generated":{"line":7088,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7088,"column":0},"generated":{"line":7089,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7089,"column":0},"generated":{"line":7090,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7090,"column":0},"generated":{"line":7091,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7091,"column":0},"generated":{"line":7092,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7092,"column":0},"generated":{"line":7093,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7093,"column":0},"generated":{"line":7094,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7094,"column":0},"generated":{"line":7095,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7095,"column":0},"generated":{"line":7096,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7096,"column":0},"generated":{"line":7097,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7097,"column":0},"generated":{"line":7098,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7098,"column":0},"generated":{"line":7099,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7099,"column":0},"generated":{"line":7100,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7100,"column":0},"generated":{"line":7101,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7101,"column":0},"generated":{"line":7102,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7102,"column":0},"generated":{"line":7103,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7103,"column":0},"generated":{"line":7104,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7104,"column":0},"generated":{"line":7105,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7105,"column":0},"generated":{"line":7106,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7106,"column":0},"generated":{"line":7107,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7107,"column":0},"generated":{"line":7108,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7108,"column":0},"generated":{"line":7109,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7109,"column":0},"generated":{"line":7110,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7110,"column":0},"generated":{"line":7111,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7111,"column":0},"generated":{"line":7112,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7112,"column":0},"generated":{"line":7113,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7113,"column":0},"generated":{"line":7114,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7114,"column":0},"generated":{"line":7115,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7115,"column":0},"generated":{"line":7116,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7116,"column":0},"generated":{"line":7117,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7117,"column":0},"generated":{"line":7118,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7118,"column":0},"generated":{"line":7119,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7119,"column":0},"generated":{"line":7120,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7120,"column":0},"generated":{"line":7121,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7121,"column":0},"generated":{"line":7122,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7122,"column":0},"generated":{"line":7123,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7123,"column":0},"generated":{"line":7124,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7124,"column":0},"generated":{"line":7125,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7125,"column":0},"generated":{"line":7126,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7126,"column":0},"generated":{"line":7127,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7127,"column":0},"generated":{"line":7128,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7128,"column":0},"generated":{"line":7129,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7129,"column":0},"generated":{"line":7130,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7130,"column":0},"generated":{"line":7131,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7131,"column":0},"generated":{"line":7132,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7132,"column":0},"generated":{"line":7133,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7133,"column":0},"generated":{"line":7134,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7134,"column":0},"generated":{"line":7135,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7135,"column":0},"generated":{"line":7136,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7136,"column":0},"generated":{"line":7137,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7137,"column":0},"generated":{"line":7138,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7138,"column":0},"generated":{"line":7139,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7139,"column":0},"generated":{"line":7140,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7140,"column":0},"generated":{"line":7141,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7141,"column":0},"generated":{"line":7142,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7142,"column":0},"generated":{"line":7143,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7143,"column":0},"generated":{"line":7144,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7144,"column":0},"generated":{"line":7145,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7145,"column":0},"generated":{"line":7146,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7146,"column":0},"generated":{"line":7147,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7147,"column":0},"generated":{"line":7148,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7148,"column":0},"generated":{"line":7149,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7149,"column":0},"generated":{"line":7150,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7150,"column":0},"generated":{"line":7151,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7151,"column":0},"generated":{"line":7152,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7152,"column":0},"generated":{"line":7153,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7153,"column":0},"generated":{"line":7154,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7154,"column":0},"generated":{"line":7155,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7155,"column":0},"generated":{"line":7156,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7156,"column":0},"generated":{"line":7157,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7157,"column":0},"generated":{"line":7158,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7158,"column":0},"generated":{"line":7159,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7159,"column":0},"generated":{"line":7160,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7160,"column":0},"generated":{"line":7161,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7161,"column":0},"generated":{"line":7162,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7162,"column":0},"generated":{"line":7163,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7163,"column":0},"generated":{"line":7164,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7164,"column":0},"generated":{"line":7165,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7165,"column":0},"generated":{"line":7166,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7166,"column":0},"generated":{"line":7167,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7167,"column":0},"generated":{"line":7168,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7168,"column":0},"generated":{"line":7169,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7169,"column":0},"generated":{"line":7170,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7170,"column":0},"generated":{"line":7171,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7171,"column":0},"generated":{"line":7172,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7172,"column":0},"generated":{"line":7173,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7173,"column":0},"generated":{"line":7174,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7174,"column":0},"generated":{"line":7175,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7175,"column":0},"generated":{"line":7176,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7176,"column":0},"generated":{"line":7177,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7177,"column":0},"generated":{"line":7178,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7178,"column":0},"generated":{"line":7179,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7179,"column":0},"generated":{"line":7180,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7180,"column":0},"generated":{"line":7181,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7181,"column":0},"generated":{"line":7182,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7182,"column":0},"generated":{"line":7183,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7183,"column":0},"generated":{"line":7184,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7184,"column":0},"generated":{"line":7185,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7185,"column":0},"generated":{"line":7186,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7186,"column":0},"generated":{"line":7187,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7187,"column":0},"generated":{"line":7188,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7188,"column":0},"generated":{"line":7189,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7189,"column":0},"generated":{"line":7190,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7190,"column":0},"generated":{"line":7191,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7191,"column":0},"generated":{"line":7192,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7192,"column":0},"generated":{"line":7193,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7193,"column":0},"generated":{"line":7194,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7194,"column":0},"generated":{"line":7195,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7195,"column":0},"generated":{"line":7196,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7196,"column":0},"generated":{"line":7197,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7197,"column":0},"generated":{"line":7198,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7198,"column":0},"generated":{"line":7199,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7199,"column":0},"generated":{"line":7200,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7200,"column":0},"generated":{"line":7201,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7201,"column":0},"generated":{"line":7202,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7202,"column":0},"generated":{"line":7203,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7203,"column":0},"generated":{"line":7204,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7204,"column":0},"generated":{"line":7205,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7205,"column":0},"generated":{"line":7206,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7206,"column":0},"generated":{"line":7207,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7207,"column":0},"generated":{"line":7208,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7208,"column":0},"generated":{"line":7209,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7209,"column":0},"generated":{"line":7210,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7210,"column":0},"generated":{"line":7211,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7211,"column":0},"generated":{"line":7212,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7212,"column":0},"generated":{"line":7213,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7213,"column":0},"generated":{"line":7214,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7214,"column":0},"generated":{"line":7215,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7215,"column":0},"generated":{"line":7216,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7216,"column":0},"generated":{"line":7217,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7217,"column":0},"generated":{"line":7218,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7218,"column":0},"generated":{"line":7219,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7219,"column":0},"generated":{"line":7220,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7220,"column":0},"generated":{"line":7221,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7221,"column":0},"generated":{"line":7222,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7222,"column":0},"generated":{"line":7223,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7223,"column":0},"generated":{"line":7224,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7224,"column":0},"generated":{"line":7225,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7225,"column":0},"generated":{"line":7226,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7226,"column":0},"generated":{"line":7227,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7227,"column":0},"generated":{"line":7228,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7228,"column":0},"generated":{"line":7229,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7229,"column":0},"generated":{"line":7230,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7230,"column":0},"generated":{"line":7231,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7231,"column":0},"generated":{"line":7232,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7232,"column":0},"generated":{"line":7233,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7233,"column":0},"generated":{"line":7234,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7234,"column":0},"generated":{"line":7235,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7235,"column":0},"generated":{"line":7236,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7236,"column":0},"generated":{"line":7237,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7237,"column":0},"generated":{"line":7238,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7238,"column":0},"generated":{"line":7239,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7239,"column":0},"generated":{"line":7240,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7240,"column":0},"generated":{"line":7241,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7241,"column":0},"generated":{"line":7242,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7242,"column":0},"generated":{"line":7243,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7243,"column":0},"generated":{"line":7244,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7244,"column":0},"generated":{"line":7245,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7245,"column":0},"generated":{"line":7246,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7246,"column":0},"generated":{"line":7247,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7247,"column":0},"generated":{"line":7248,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7248,"column":0},"generated":{"line":7249,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7249,"column":0},"generated":{"line":7250,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7250,"column":0},"generated":{"line":7251,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7251,"column":0},"generated":{"line":7252,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7252,"column":0},"generated":{"line":7253,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7253,"column":0},"generated":{"line":7254,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7254,"column":0},"generated":{"line":7255,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7255,"column":0},"generated":{"line":7256,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7256,"column":0},"generated":{"line":7257,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7257,"column":0},"generated":{"line":7258,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7258,"column":0},"generated":{"line":7259,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7259,"column":0},"generated":{"line":7260,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7260,"column":0},"generated":{"line":7261,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7261,"column":0},"generated":{"line":7262,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7262,"column":0},"generated":{"line":7263,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7263,"column":0},"generated":{"line":7264,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7264,"column":0},"generated":{"line":7265,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7265,"column":0},"generated":{"line":7266,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7266,"column":0},"generated":{"line":7267,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7267,"column":0},"generated":{"line":7268,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7268,"column":0},"generated":{"line":7269,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7269,"column":0},"generated":{"line":7270,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7270,"column":0},"generated":{"line":7271,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7271,"column":0},"generated":{"line":7272,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7272,"column":0},"generated":{"line":7273,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7273,"column":0},"generated":{"line":7274,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7274,"column":0},"generated":{"line":7275,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7275,"column":0},"generated":{"line":7276,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7276,"column":0},"generated":{"line":7277,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7277,"column":0},"generated":{"line":7278,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7278,"column":0},"generated":{"line":7279,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7279,"column":0},"generated":{"line":7280,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7280,"column":0},"generated":{"line":7281,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7281,"column":0},"generated":{"line":7282,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7282,"column":0},"generated":{"line":7283,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7283,"column":0},"generated":{"line":7284,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7284,"column":0},"generated":{"line":7285,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7285,"column":0},"generated":{"line":7286,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7286,"column":0},"generated":{"line":7287,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7287,"column":0},"generated":{"line":7288,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7288,"column":0},"generated":{"line":7289,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7289,"column":0},"generated":{"line":7290,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7290,"column":0},"generated":{"line":7291,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7291,"column":0},"generated":{"line":7292,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7292,"column":0},"generated":{"line":7293,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7293,"column":0},"generated":{"line":7294,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7294,"column":0},"generated":{"line":7295,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7295,"column":0},"generated":{"line":7296,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7296,"column":0},"generated":{"line":7297,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7297,"column":0},"generated":{"line":7298,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7298,"column":0},"generated":{"line":7299,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7299,"column":0},"generated":{"line":7300,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7300,"column":0},"generated":{"line":7301,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7301,"column":0},"generated":{"line":7302,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7302,"column":0},"generated":{"line":7303,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7303,"column":0},"generated":{"line":7304,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7304,"column":0},"generated":{"line":7305,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7305,"column":0},"generated":{"line":7306,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7306,"column":0},"generated":{"line":7307,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7307,"column":0},"generated":{"line":7308,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7308,"column":0},"generated":{"line":7309,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7309,"column":0},"generated":{"line":7310,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7310,"column":0},"generated":{"line":7311,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7311,"column":0},"generated":{"line":7312,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7312,"column":0},"generated":{"line":7313,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7313,"column":0},"generated":{"line":7314,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7314,"column":0},"generated":{"line":7315,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7315,"column":0},"generated":{"line":7316,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7316,"column":0},"generated":{"line":7317,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7317,"column":0},"generated":{"line":7318,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7318,"column":0},"generated":{"line":7319,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7319,"column":0},"generated":{"line":7320,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7320,"column":0},"generated":{"line":7321,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7321,"column":0},"generated":{"line":7322,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7322,"column":0},"generated":{"line":7323,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7323,"column":0},"generated":{"line":7324,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7324,"column":0},"generated":{"line":7325,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7325,"column":0},"generated":{"line":7326,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7326,"column":0},"generated":{"line":7327,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7327,"column":0},"generated":{"line":7328,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7328,"column":0},"generated":{"line":7329,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7329,"column":0},"generated":{"line":7330,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7330,"column":0},"generated":{"line":7331,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7331,"column":0},"generated":{"line":7332,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7332,"column":0},"generated":{"line":7333,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7333,"column":0},"generated":{"line":7334,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7334,"column":0},"generated":{"line":7335,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7335,"column":0},"generated":{"line":7336,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7336,"column":0},"generated":{"line":7337,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7337,"column":0},"generated":{"line":7338,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7338,"column":0},"generated":{"line":7339,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7339,"column":0},"generated":{"line":7340,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7340,"column":0},"generated":{"line":7341,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7341,"column":0},"generated":{"line":7342,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7342,"column":0},"generated":{"line":7343,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7343,"column":0},"generated":{"line":7344,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7344,"column":0},"generated":{"line":7345,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7345,"column":0},"generated":{"line":7346,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7346,"column":0},"generated":{"line":7347,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7347,"column":0},"generated":{"line":7348,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7348,"column":0},"generated":{"line":7349,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7349,"column":0},"generated":{"line":7350,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7350,"column":0},"generated":{"line":7351,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7351,"column":0},"generated":{"line":7352,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7352,"column":0},"generated":{"line":7353,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7353,"column":0},"generated":{"line":7354,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7354,"column":0},"generated":{"line":7355,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7355,"column":0},"generated":{"line":7356,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7356,"column":0},"generated":{"line":7357,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7357,"column":0},"generated":{"line":7358,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7358,"column":0},"generated":{"line":7359,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7359,"column":0},"generated":{"line":7360,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7360,"column":0},"generated":{"line":7361,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7361,"column":0},"generated":{"line":7362,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7362,"column":0},"generated":{"line":7363,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7363,"column":0},"generated":{"line":7364,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7364,"column":0},"generated":{"line":7365,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7365,"column":0},"generated":{"line":7366,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7366,"column":0},"generated":{"line":7367,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7367,"column":0},"generated":{"line":7368,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7368,"column":0},"generated":{"line":7369,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7369,"column":0},"generated":{"line":7370,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7370,"column":0},"generated":{"line":7371,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7371,"column":0},"generated":{"line":7372,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7372,"column":0},"generated":{"line":7373,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7373,"column":0},"generated":{"line":7374,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7374,"column":0},"generated":{"line":7375,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7375,"column":0},"generated":{"line":7376,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7376,"column":0},"generated":{"line":7377,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7377,"column":0},"generated":{"line":7378,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7378,"column":0},"generated":{"line":7379,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7379,"column":0},"generated":{"line":7380,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7380,"column":0},"generated":{"line":7381,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7381,"column":0},"generated":{"line":7382,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7382,"column":0},"generated":{"line":7383,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7383,"column":0},"generated":{"line":7384,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7384,"column":0},"generated":{"line":7385,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7385,"column":0},"generated":{"line":7386,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7386,"column":0},"generated":{"line":7387,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7387,"column":0},"generated":{"line":7388,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7388,"column":0},"generated":{"line":7389,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7389,"column":0},"generated":{"line":7390,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7390,"column":0},"generated":{"line":7391,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7391,"column":0},"generated":{"line":7392,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7392,"column":0},"generated":{"line":7393,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7393,"column":0},"generated":{"line":7394,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7394,"column":0},"generated":{"line":7395,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7395,"column":0},"generated":{"line":7396,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7396,"column":0},"generated":{"line":7397,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7397,"column":0},"generated":{"line":7398,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7398,"column":0},"generated":{"line":7399,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7399,"column":0},"generated":{"line":7400,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7400,"column":0},"generated":{"line":7401,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7401,"column":0},"generated":{"line":7402,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7402,"column":0},"generated":{"line":7403,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7403,"column":0},"generated":{"line":7404,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7404,"column":0},"generated":{"line":7405,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7405,"column":0},"generated":{"line":7406,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7406,"column":0},"generated":{"line":7407,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7407,"column":0},"generated":{"line":7408,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7408,"column":0},"generated":{"line":7409,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7409,"column":0},"generated":{"line":7410,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7410,"column":0},"generated":{"line":7411,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7411,"column":0},"generated":{"line":7412,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7412,"column":0},"generated":{"line":7413,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7413,"column":0},"generated":{"line":7414,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7414,"column":0},"generated":{"line":7415,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7415,"column":0},"generated":{"line":7416,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7416,"column":0},"generated":{"line":7417,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7417,"column":0},"generated":{"line":7418,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7418,"column":0},"generated":{"line":7419,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7419,"column":0},"generated":{"line":7420,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7420,"column":0},"generated":{"line":7421,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7421,"column":0},"generated":{"line":7422,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7422,"column":0},"generated":{"line":7423,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7423,"column":0},"generated":{"line":7424,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7424,"column":0},"generated":{"line":7425,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7425,"column":0},"generated":{"line":7426,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7426,"column":0},"generated":{"line":7427,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7427,"column":0},"generated":{"line":7428,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7428,"column":0},"generated":{"line":7429,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7429,"column":0},"generated":{"line":7430,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7430,"column":0},"generated":{"line":7431,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7431,"column":0},"generated":{"line":7432,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7432,"column":0},"generated":{"line":7433,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7433,"column":0},"generated":{"line":7434,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7434,"column":0},"generated":{"line":7435,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7435,"column":0},"generated":{"line":7436,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7436,"column":0},"generated":{"line":7437,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7437,"column":0},"generated":{"line":7438,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7438,"column":0},"generated":{"line":7439,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7439,"column":0},"generated":{"line":7440,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7440,"column":0},"generated":{"line":7441,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7441,"column":0},"generated":{"line":7442,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7442,"column":0},"generated":{"line":7443,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7443,"column":0},"generated":{"line":7444,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7444,"column":0},"generated":{"line":7445,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7445,"column":0},"generated":{"line":7446,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7446,"column":0},"generated":{"line":7447,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7447,"column":0},"generated":{"line":7448,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7448,"column":0},"generated":{"line":7449,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7449,"column":0},"generated":{"line":7450,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7450,"column":0},"generated":{"line":7451,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7451,"column":0},"generated":{"line":7452,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7452,"column":0},"generated":{"line":7453,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7453,"column":0},"generated":{"line":7454,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7454,"column":0},"generated":{"line":7455,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7455,"column":0},"generated":{"line":7456,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7456,"column":0},"generated":{"line":7457,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7457,"column":0},"generated":{"line":7458,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7458,"column":0},"generated":{"line":7459,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7459,"column":0},"generated":{"line":7460,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7460,"column":0},"generated":{"line":7461,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7461,"column":0},"generated":{"line":7462,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7462,"column":0},"generated":{"line":7463,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7463,"column":0},"generated":{"line":7464,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7464,"column":0},"generated":{"line":7465,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7465,"column":0},"generated":{"line":7466,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7466,"column":0},"generated":{"line":7467,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7467,"column":0},"generated":{"line":7468,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7468,"column":0},"generated":{"line":7469,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7469,"column":0},"generated":{"line":7470,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7470,"column":0},"generated":{"line":7471,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7471,"column":0},"generated":{"line":7472,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7472,"column":0},"generated":{"line":7473,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7473,"column":0},"generated":{"line":7474,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7474,"column":0},"generated":{"line":7475,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7475,"column":0},"generated":{"line":7476,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7476,"column":0},"generated":{"line":7477,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7477,"column":0},"generated":{"line":7478,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7478,"column":0},"generated":{"line":7479,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7479,"column":0},"generated":{"line":7480,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7480,"column":0},"generated":{"line":7481,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7481,"column":0},"generated":{"line":7482,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7482,"column":0},"generated":{"line":7483,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7483,"column":0},"generated":{"line":7484,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7484,"column":0},"generated":{"line":7485,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7485,"column":0},"generated":{"line":7486,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7486,"column":0},"generated":{"line":7487,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7487,"column":0},"generated":{"line":7488,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7488,"column":0},"generated":{"line":7489,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7489,"column":0},"generated":{"line":7490,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7490,"column":0},"generated":{"line":7491,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7491,"column":0},"generated":{"line":7492,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7492,"column":0},"generated":{"line":7493,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7493,"column":0},"generated":{"line":7494,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7494,"column":0},"generated":{"line":7495,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7495,"column":0},"generated":{"line":7496,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7496,"column":0},"generated":{"line":7497,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7497,"column":0},"generated":{"line":7498,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7498,"column":0},"generated":{"line":7499,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7499,"column":0},"generated":{"line":7500,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7500,"column":0},"generated":{"line":7501,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7501,"column":0},"generated":{"line":7502,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7502,"column":0},"generated":{"line":7503,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7503,"column":0},"generated":{"line":7504,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7504,"column":0},"generated":{"line":7505,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7505,"column":0},"generated":{"line":7506,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7506,"column":0},"generated":{"line":7507,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7507,"column":0},"generated":{"line":7508,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7508,"column":0},"generated":{"line":7509,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7509,"column":0},"generated":{"line":7510,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7510,"column":0},"generated":{"line":7511,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7511,"column":0},"generated":{"line":7512,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7512,"column":0},"generated":{"line":7513,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7513,"column":0},"generated":{"line":7514,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7514,"column":0},"generated":{"line":7515,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7515,"column":0},"generated":{"line":7516,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7516,"column":0},"generated":{"line":7517,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7517,"column":0},"generated":{"line":7518,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7518,"column":0},"generated":{"line":7519,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7519,"column":0},"generated":{"line":7520,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7520,"column":0},"generated":{"line":7521,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7521,"column":0},"generated":{"line":7522,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7522,"column":0},"generated":{"line":7523,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7523,"column":0},"generated":{"line":7524,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7524,"column":0},"generated":{"line":7525,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7525,"column":0},"generated":{"line":7526,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7526,"column":0},"generated":{"line":7527,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7527,"column":0},"generated":{"line":7528,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7528,"column":0},"generated":{"line":7529,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7529,"column":0},"generated":{"line":7530,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7530,"column":0},"generated":{"line":7531,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7531,"column":0},"generated":{"line":7532,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7532,"column":0},"generated":{"line":7533,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7533,"column":0},"generated":{"line":7534,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7534,"column":0},"generated":{"line":7535,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7535,"column":0},"generated":{"line":7536,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7536,"column":0},"generated":{"line":7537,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7537,"column":0},"generated":{"line":7538,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7538,"column":0},"generated":{"line":7539,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7539,"column":0},"generated":{"line":7540,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7540,"column":0},"generated":{"line":7541,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7541,"column":0},"generated":{"line":7542,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7542,"column":0},"generated":{"line":7543,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7543,"column":0},"generated":{"line":7544,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7544,"column":0},"generated":{"line":7545,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7545,"column":0},"generated":{"line":7546,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7546,"column":0},"generated":{"line":7547,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7547,"column":0},"generated":{"line":7548,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7548,"column":0},"generated":{"line":7549,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7549,"column":0},"generated":{"line":7550,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7550,"column":0},"generated":{"line":7551,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7551,"column":0},"generated":{"line":7552,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7552,"column":0},"generated":{"line":7553,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7553,"column":0},"generated":{"line":7554,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7554,"column":0},"generated":{"line":7555,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7555,"column":0},"generated":{"line":7556,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7556,"column":0},"generated":{"line":7557,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7557,"column":0},"generated":{"line":7558,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7558,"column":0},"generated":{"line":7559,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7559,"column":0},"generated":{"line":7560,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7560,"column":0},"generated":{"line":7561,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7561,"column":0},"generated":{"line":7562,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7562,"column":0},"generated":{"line":7563,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7563,"column":0},"generated":{"line":7564,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7564,"column":0},"generated":{"line":7565,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7565,"column":0},"generated":{"line":7566,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7566,"column":0},"generated":{"line":7567,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7567,"column":0},"generated":{"line":7568,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7568,"column":0},"generated":{"line":7569,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7569,"column":0},"generated":{"line":7570,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7570,"column":0},"generated":{"line":7571,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7571,"column":0},"generated":{"line":7572,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7572,"column":0},"generated":{"line":7573,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7573,"column":0},"generated":{"line":7574,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7574,"column":0},"generated":{"line":7575,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7575,"column":0},"generated":{"line":7576,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7576,"column":0},"generated":{"line":7577,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7577,"column":0},"generated":{"line":7578,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7578,"column":0},"generated":{"line":7579,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7579,"column":0},"generated":{"line":7580,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7580,"column":0},"generated":{"line":7581,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7581,"column":0},"generated":{"line":7582,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7582,"column":0},"generated":{"line":7583,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7583,"column":0},"generated":{"line":7584,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7584,"column":0},"generated":{"line":7585,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7585,"column":0},"generated":{"line":7586,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7586,"column":0},"generated":{"line":7587,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7587,"column":0},"generated":{"line":7588,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7588,"column":0},"generated":{"line":7589,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7589,"column":0},"generated":{"line":7590,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7590,"column":0},"generated":{"line":7591,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7591,"column":0},"generated":{"line":7592,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7592,"column":0},"generated":{"line":7593,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7593,"column":0},"generated":{"line":7594,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7594,"column":0},"generated":{"line":7595,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7595,"column":0},"generated":{"line":7596,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7596,"column":0},"generated":{"line":7597,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7597,"column":0},"generated":{"line":7598,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7598,"column":0},"generated":{"line":7599,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7599,"column":0},"generated":{"line":7600,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7600,"column":0},"generated":{"line":7601,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7601,"column":0},"generated":{"line":7602,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7602,"column":0},"generated":{"line":7603,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7603,"column":0},"generated":{"line":7604,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7604,"column":0},"generated":{"line":7605,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7605,"column":0},"generated":{"line":7606,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7606,"column":0},"generated":{"line":7607,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7607,"column":0},"generated":{"line":7608,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7608,"column":0},"generated":{"line":7609,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7609,"column":0},"generated":{"line":7610,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7610,"column":0},"generated":{"line":7611,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7611,"column":0},"generated":{"line":7612,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7612,"column":0},"generated":{"line":7613,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7613,"column":0},"generated":{"line":7614,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7614,"column":0},"generated":{"line":7615,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7615,"column":0},"generated":{"line":7616,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7616,"column":0},"generated":{"line":7617,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7617,"column":0},"generated":{"line":7618,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7618,"column":0},"generated":{"line":7619,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7619,"column":0},"generated":{"line":7620,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7620,"column":0},"generated":{"line":7621,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7621,"column":0},"generated":{"line":7622,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7622,"column":0},"generated":{"line":7623,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7623,"column":0},"generated":{"line":7624,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7624,"column":0},"generated":{"line":7625,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7625,"column":0},"generated":{"line":7626,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7626,"column":0},"generated":{"line":7627,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7627,"column":0},"generated":{"line":7628,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7628,"column":0},"generated":{"line":7629,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7629,"column":0},"generated":{"line":7630,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7630,"column":0},"generated":{"line":7631,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7631,"column":0},"generated":{"line":7632,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7632,"column":0},"generated":{"line":7633,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7633,"column":0},"generated":{"line":7634,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7634,"column":0},"generated":{"line":7635,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7635,"column":0},"generated":{"line":7636,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7636,"column":0},"generated":{"line":7637,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7637,"column":0},"generated":{"line":7638,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7638,"column":0},"generated":{"line":7639,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7639,"column":0},"generated":{"line":7640,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7640,"column":0},"generated":{"line":7641,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7641,"column":0},"generated":{"line":7642,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7642,"column":0},"generated":{"line":7643,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7643,"column":0},"generated":{"line":7644,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7644,"column":0},"generated":{"line":7645,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7645,"column":0},"generated":{"line":7646,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7646,"column":0},"generated":{"line":7647,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7647,"column":0},"generated":{"line":7648,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7648,"column":0},"generated":{"line":7649,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7649,"column":0},"generated":{"line":7650,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7650,"column":0},"generated":{"line":7651,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7651,"column":0},"generated":{"line":7652,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7652,"column":0},"generated":{"line":7653,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7653,"column":0},"generated":{"line":7654,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7654,"column":0},"generated":{"line":7655,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7655,"column":0},"generated":{"line":7656,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7656,"column":0},"generated":{"line":7657,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7657,"column":0},"generated":{"line":7658,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7658,"column":0},"generated":{"line":7659,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7659,"column":0},"generated":{"line":7660,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7660,"column":0},"generated":{"line":7661,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7661,"column":0},"generated":{"line":7662,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7662,"column":0},"generated":{"line":7663,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7663,"column":0},"generated":{"line":7664,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7664,"column":0},"generated":{"line":7665,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7665,"column":0},"generated":{"line":7666,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7666,"column":0},"generated":{"line":7667,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7667,"column":0},"generated":{"line":7668,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7668,"column":0},"generated":{"line":7669,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7669,"column":0},"generated":{"line":7670,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7670,"column":0},"generated":{"line":7671,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7671,"column":0},"generated":{"line":7672,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7672,"column":0},"generated":{"line":7673,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7673,"column":0},"generated":{"line":7674,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7674,"column":0},"generated":{"line":7675,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7675,"column":0},"generated":{"line":7676,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7676,"column":0},"generated":{"line":7677,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7677,"column":0},"generated":{"line":7678,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7678,"column":0},"generated":{"line":7679,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7679,"column":0},"generated":{"line":7680,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7680,"column":0},"generated":{"line":7681,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7681,"column":0},"generated":{"line":7682,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7682,"column":0},"generated":{"line":7683,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7683,"column":0},"generated":{"line":7684,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7684,"column":0},"generated":{"line":7685,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7685,"column":0},"generated":{"line":7686,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7686,"column":0},"generated":{"line":7687,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7687,"column":0},"generated":{"line":7688,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7688,"column":0},"generated":{"line":7689,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7689,"column":0},"generated":{"line":7690,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7690,"column":0},"generated":{"line":7691,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7691,"column":0},"generated":{"line":7692,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7692,"column":0},"generated":{"line":7693,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7693,"column":0},"generated":{"line":7694,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7694,"column":0},"generated":{"line":7695,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7695,"column":0},"generated":{"line":7696,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7696,"column":0},"generated":{"line":7697,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7697,"column":0},"generated":{"line":7698,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7698,"column":0},"generated":{"line":7699,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7699,"column":0},"generated":{"line":7700,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7700,"column":0},"generated":{"line":7701,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7701,"column":0},"generated":{"line":7702,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7702,"column":0},"generated":{"line":7703,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7703,"column":0},"generated":{"line":7704,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7704,"column":0},"generated":{"line":7705,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7705,"column":0},"generated":{"line":7706,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7706,"column":0},"generated":{"line":7707,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7707,"column":0},"generated":{"line":7708,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7708,"column":0},"generated":{"line":7709,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7709,"column":0},"generated":{"line":7710,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7710,"column":0},"generated":{"line":7711,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7711,"column":0},"generated":{"line":7712,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7712,"column":0},"generated":{"line":7713,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7713,"column":0},"generated":{"line":7714,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7714,"column":0},"generated":{"line":7715,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7715,"column":0},"generated":{"line":7716,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7716,"column":0},"generated":{"line":7717,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7717,"column":0},"generated":{"line":7718,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7718,"column":0},"generated":{"line":7719,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7719,"column":0},"generated":{"line":7720,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7720,"column":0},"generated":{"line":7721,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7721,"column":0},"generated":{"line":7722,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7722,"column":0},"generated":{"line":7723,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7723,"column":0},"generated":{"line":7724,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7724,"column":0},"generated":{"line":7725,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7725,"column":0},"generated":{"line":7726,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7726,"column":0},"generated":{"line":7727,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7727,"column":0},"generated":{"line":7728,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7728,"column":0},"generated":{"line":7729,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7729,"column":0},"generated":{"line":7730,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7730,"column":0},"generated":{"line":7731,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7731,"column":0},"generated":{"line":7732,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7732,"column":0},"generated":{"line":7733,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7733,"column":0},"generated":{"line":7734,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7734,"column":0},"generated":{"line":7735,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7735,"column":0},"generated":{"line":7736,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7736,"column":0},"generated":{"line":7737,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7737,"column":0},"generated":{"line":7738,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7738,"column":0},"generated":{"line":7739,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7739,"column":0},"generated":{"line":7740,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7740,"column":0},"generated":{"line":7741,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7741,"column":0},"generated":{"line":7742,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7742,"column":0},"generated":{"line":7743,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7743,"column":0},"generated":{"line":7744,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7744,"column":0},"generated":{"line":7745,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7745,"column":0},"generated":{"line":7746,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7746,"column":0},"generated":{"line":7747,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7747,"column":0},"generated":{"line":7748,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7748,"column":0},"generated":{"line":7749,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7749,"column":0},"generated":{"line":7750,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7750,"column":0},"generated":{"line":7751,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7751,"column":0},"generated":{"line":7752,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7752,"column":0},"generated":{"line":7753,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7753,"column":0},"generated":{"line":7754,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7754,"column":0},"generated":{"line":7755,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7755,"column":0},"generated":{"line":7756,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7756,"column":0},"generated":{"line":7757,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7757,"column":0},"generated":{"line":7758,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7758,"column":0},"generated":{"line":7759,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7759,"column":0},"generated":{"line":7760,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7760,"column":0},"generated":{"line":7761,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7761,"column":0},"generated":{"line":7762,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7762,"column":0},"generated":{"line":7763,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7763,"column":0},"generated":{"line":7764,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7764,"column":0},"generated":{"line":7765,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7765,"column":0},"generated":{"line":7766,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7766,"column":0},"generated":{"line":7767,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7767,"column":0},"generated":{"line":7768,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7768,"column":0},"generated":{"line":7769,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7769,"column":0},"generated":{"line":7770,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7770,"column":0},"generated":{"line":7771,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7771,"column":0},"generated":{"line":7772,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7772,"column":0},"generated":{"line":7773,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7773,"column":0},"generated":{"line":7774,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7774,"column":0},"generated":{"line":7775,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7775,"column":0},"generated":{"line":7776,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7776,"column":0},"generated":{"line":7777,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7777,"column":0},"generated":{"line":7778,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7778,"column":0},"generated":{"line":7779,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7779,"column":0},"generated":{"line":7780,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7780,"column":0},"generated":{"line":7781,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7781,"column":0},"generated":{"line":7782,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7782,"column":0},"generated":{"line":7783,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7783,"column":0},"generated":{"line":7784,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7784,"column":0},"generated":{"line":7785,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7785,"column":0},"generated":{"line":7786,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7786,"column":0},"generated":{"line":7787,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7787,"column":0},"generated":{"line":7788,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7788,"column":0},"generated":{"line":7789,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7789,"column":0},"generated":{"line":7790,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7790,"column":0},"generated":{"line":7791,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7791,"column":0},"generated":{"line":7792,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7792,"column":0},"generated":{"line":7793,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7793,"column":0},"generated":{"line":7794,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7794,"column":0},"generated":{"line":7795,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7795,"column":0},"generated":{"line":7796,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7796,"column":0},"generated":{"line":7797,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7797,"column":0},"generated":{"line":7798,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7798,"column":0},"generated":{"line":7799,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7799,"column":0},"generated":{"line":7800,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7800,"column":0},"generated":{"line":7801,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7801,"column":0},"generated":{"line":7802,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7802,"column":0},"generated":{"line":7803,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7803,"column":0},"generated":{"line":7804,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7804,"column":0},"generated":{"line":7805,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7805,"column":0},"generated":{"line":7806,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7806,"column":0},"generated":{"line":7807,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7807,"column":0},"generated":{"line":7808,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7808,"column":0},"generated":{"line":7809,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7809,"column":0},"generated":{"line":7810,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7810,"column":0},"generated":{"line":7811,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7811,"column":0},"generated":{"line":7812,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7812,"column":0},"generated":{"line":7813,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7813,"column":0},"generated":{"line":7814,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7814,"column":0},"generated":{"line":7815,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7815,"column":0},"generated":{"line":7816,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7816,"column":0},"generated":{"line":7817,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7817,"column":0},"generated":{"line":7818,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7818,"column":0},"generated":{"line":7819,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7819,"column":0},"generated":{"line":7820,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7820,"column":0},"generated":{"line":7821,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7821,"column":0},"generated":{"line":7822,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7822,"column":0},"generated":{"line":7823,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7823,"column":0},"generated":{"line":7824,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7824,"column":0},"generated":{"line":7825,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7825,"column":0},"generated":{"line":7826,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7826,"column":0},"generated":{"line":7827,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7827,"column":0},"generated":{"line":7828,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7828,"column":0},"generated":{"line":7829,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7829,"column":0},"generated":{"line":7830,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7830,"column":0},"generated":{"line":7831,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7831,"column":0},"generated":{"line":7832,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7832,"column":0},"generated":{"line":7833,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7833,"column":0},"generated":{"line":7834,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7834,"column":0},"generated":{"line":7835,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7835,"column":0},"generated":{"line":7836,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7836,"column":0},"generated":{"line":7837,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7837,"column":0},"generated":{"line":7838,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7838,"column":0},"generated":{"line":7839,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7839,"column":0},"generated":{"line":7840,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7840,"column":0},"generated":{"line":7841,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7841,"column":0},"generated":{"line":7842,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7842,"column":0},"generated":{"line":7843,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7843,"column":0},"generated":{"line":7844,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7844,"column":0},"generated":{"line":7845,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7845,"column":0},"generated":{"line":7846,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7846,"column":0},"generated":{"line":7847,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7847,"column":0},"generated":{"line":7848,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7848,"column":0},"generated":{"line":7849,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7849,"column":0},"generated":{"line":7850,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7850,"column":0},"generated":{"line":7851,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7851,"column":0},"generated":{"line":7852,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7852,"column":0},"generated":{"line":7853,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7853,"column":0},"generated":{"line":7854,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7854,"column":0},"generated":{"line":7855,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7855,"column":0},"generated":{"line":7856,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7856,"column":0},"generated":{"line":7857,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7857,"column":0},"generated":{"line":7858,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7858,"column":0},"generated":{"line":7859,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7859,"column":0},"generated":{"line":7860,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7860,"column":0},"generated":{"line":7861,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7861,"column":0},"generated":{"line":7862,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7862,"column":0},"generated":{"line":7863,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7863,"column":0},"generated":{"line":7864,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7864,"column":0},"generated":{"line":7865,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7865,"column":0},"generated":{"line":7866,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7866,"column":0},"generated":{"line":7867,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7867,"column":0},"generated":{"line":7868,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7868,"column":0},"generated":{"line":7869,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7869,"column":0},"generated":{"line":7870,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7870,"column":0},"generated":{"line":7871,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7871,"column":0},"generated":{"line":7872,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7872,"column":0},"generated":{"line":7873,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7873,"column":0},"generated":{"line":7874,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7874,"column":0},"generated":{"line":7875,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7875,"column":0},"generated":{"line":7876,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7876,"column":0},"generated":{"line":7877,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7877,"column":0},"generated":{"line":7878,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7878,"column":0},"generated":{"line":7879,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7879,"column":0},"generated":{"line":7880,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7880,"column":0},"generated":{"line":7881,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7881,"column":0},"generated":{"line":7882,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7882,"column":0},"generated":{"line":7883,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7883,"column":0},"generated":{"line":7884,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7884,"column":0},"generated":{"line":7885,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7885,"column":0},"generated":{"line":7886,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7886,"column":0},"generated":{"line":7887,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7887,"column":0},"generated":{"line":7888,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7888,"column":0},"generated":{"line":7889,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7889,"column":0},"generated":{"line":7890,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7890,"column":0},"generated":{"line":7891,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7891,"column":0},"generated":{"line":7892,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7892,"column":0},"generated":{"line":7893,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7893,"column":0},"generated":{"line":7894,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7894,"column":0},"generated":{"line":7895,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7895,"column":0},"generated":{"line":7896,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7896,"column":0},"generated":{"line":7897,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7897,"column":0},"generated":{"line":7898,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7898,"column":0},"generated":{"line":7899,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7899,"column":0},"generated":{"line":7900,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7900,"column":0},"generated":{"line":7901,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7901,"column":0},"generated":{"line":7902,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7902,"column":0},"generated":{"line":7903,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7903,"column":0},"generated":{"line":7904,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7904,"column":0},"generated":{"line":7905,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7905,"column":0},"generated":{"line":7906,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7906,"column":0},"generated":{"line":7907,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7907,"column":0},"generated":{"line":7908,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7908,"column":0},"generated":{"line":7909,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7909,"column":0},"generated":{"line":7910,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7910,"column":0},"generated":{"line":7911,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7911,"column":0},"generated":{"line":7912,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7912,"column":0},"generated":{"line":7913,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7913,"column":0},"generated":{"line":7914,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7914,"column":0},"generated":{"line":7915,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7915,"column":0},"generated":{"line":7916,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7916,"column":0},"generated":{"line":7917,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7917,"column":0},"generated":{"line":7918,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7918,"column":0},"generated":{"line":7919,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7919,"column":0},"generated":{"line":7920,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7920,"column":0},"generated":{"line":7921,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7921,"column":0},"generated":{"line":7922,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7922,"column":0},"generated":{"line":7923,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7923,"column":0},"generated":{"line":7924,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7924,"column":0},"generated":{"line":7925,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7925,"column":0},"generated":{"line":7926,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7926,"column":0},"generated":{"line":7927,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7927,"column":0},"generated":{"line":7928,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7928,"column":0},"generated":{"line":7929,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7929,"column":0},"generated":{"line":7930,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7930,"column":0},"generated":{"line":7931,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7931,"column":0},"generated":{"line":7932,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7932,"column":0},"generated":{"line":7933,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7933,"column":0},"generated":{"line":7934,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7934,"column":0},"generated":{"line":7935,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7935,"column":0},"generated":{"line":7936,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7936,"column":0},"generated":{"line":7937,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7937,"column":0},"generated":{"line":7938,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7938,"column":0},"generated":{"line":7939,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7939,"column":0},"generated":{"line":7940,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7940,"column":0},"generated":{"line":7941,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7941,"column":0},"generated":{"line":7942,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7942,"column":0},"generated":{"line":7943,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7943,"column":0},"generated":{"line":7944,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7944,"column":0},"generated":{"line":7945,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7945,"column":0},"generated":{"line":7946,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7946,"column":0},"generated":{"line":7947,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7947,"column":0},"generated":{"line":7948,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7948,"column":0},"generated":{"line":7949,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7949,"column":0},"generated":{"line":7950,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7950,"column":0},"generated":{"line":7951,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7951,"column":0},"generated":{"line":7952,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7952,"column":0},"generated":{"line":7953,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7953,"column":0},"generated":{"line":7954,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7954,"column":0},"generated":{"line":7955,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7955,"column":0},"generated":{"line":7956,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7956,"column":0},"generated":{"line":7957,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7957,"column":0},"generated":{"line":7958,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7958,"column":0},"generated":{"line":7959,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7959,"column":0},"generated":{"line":7960,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7960,"column":0},"generated":{"line":7961,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7961,"column":0},"generated":{"line":7962,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7962,"column":0},"generated":{"line":7963,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7963,"column":0},"generated":{"line":7964,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7964,"column":0},"generated":{"line":7965,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7965,"column":0},"generated":{"line":7966,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7966,"column":0},"generated":{"line":7967,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7967,"column":0},"generated":{"line":7968,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7968,"column":0},"generated":{"line":7969,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7969,"column":0},"generated":{"line":7970,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7970,"column":0},"generated":{"line":7971,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7971,"column":0},"generated":{"line":7972,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7972,"column":0},"generated":{"line":7973,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7973,"column":0},"generated":{"line":7974,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7974,"column":0},"generated":{"line":7975,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7975,"column":0},"generated":{"line":7976,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7976,"column":0},"generated":{"line":7977,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7977,"column":0},"generated":{"line":7978,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7978,"column":0},"generated":{"line":7979,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7979,"column":0},"generated":{"line":7980,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7980,"column":0},"generated":{"line":7981,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7981,"column":0},"generated":{"line":7982,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7982,"column":0},"generated":{"line":7983,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7983,"column":0},"generated":{"line":7984,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7984,"column":0},"generated":{"line":7985,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7985,"column":0},"generated":{"line":7986,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7986,"column":0},"generated":{"line":7987,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7987,"column":0},"generated":{"line":7988,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7988,"column":0},"generated":{"line":7989,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7989,"column":0},"generated":{"line":7990,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7990,"column":0},"generated":{"line":7991,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7991,"column":0},"generated":{"line":7992,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7992,"column":0},"generated":{"line":7993,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7993,"column":0},"generated":{"line":7994,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7994,"column":0},"generated":{"line":7995,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7995,"column":0},"generated":{"line":7996,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7996,"column":0},"generated":{"line":7997,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7997,"column":0},"generated":{"line":7998,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7998,"column":0},"generated":{"line":7999,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":7999,"column":0},"generated":{"line":8000,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8000,"column":0},"generated":{"line":8001,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8001,"column":0},"generated":{"line":8002,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8002,"column":0},"generated":{"line":8003,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8003,"column":0},"generated":{"line":8004,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8004,"column":0},"generated":{"line":8005,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8005,"column":0},"generated":{"line":8006,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8006,"column":0},"generated":{"line":8007,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8007,"column":0},"generated":{"line":8008,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8008,"column":0},"generated":{"line":8009,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8009,"column":0},"generated":{"line":8010,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8010,"column":0},"generated":{"line":8011,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8011,"column":0},"generated":{"line":8012,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8012,"column":0},"generated":{"line":8013,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8013,"column":0},"generated":{"line":8014,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8014,"column":0},"generated":{"line":8015,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8015,"column":0},"generated":{"line":8016,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8016,"column":0},"generated":{"line":8017,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8017,"column":0},"generated":{"line":8018,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8018,"column":0},"generated":{"line":8019,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8019,"column":0},"generated":{"line":8020,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8020,"column":0},"generated":{"line":8021,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8021,"column":0},"generated":{"line":8022,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8022,"column":0},"generated":{"line":8023,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8023,"column":0},"generated":{"line":8024,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8024,"column":0},"generated":{"line":8025,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8025,"column":0},"generated":{"line":8026,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8026,"column":0},"generated":{"line":8027,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8027,"column":0},"generated":{"line":8028,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8028,"column":0},"generated":{"line":8029,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8029,"column":0},"generated":{"line":8030,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8030,"column":0},"generated":{"line":8031,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8031,"column":0},"generated":{"line":8032,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8032,"column":0},"generated":{"line":8033,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8033,"column":0},"generated":{"line":8034,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8034,"column":0},"generated":{"line":8035,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8035,"column":0},"generated":{"line":8036,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8036,"column":0},"generated":{"line":8037,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8037,"column":0},"generated":{"line":8038,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8038,"column":0},"generated":{"line":8039,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8039,"column":0},"generated":{"line":8040,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8040,"column":0},"generated":{"line":8041,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8041,"column":0},"generated":{"line":8042,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8042,"column":0},"generated":{"line":8043,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8043,"column":0},"generated":{"line":8044,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8044,"column":0},"generated":{"line":8045,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8045,"column":0},"generated":{"line":8046,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8046,"column":0},"generated":{"line":8047,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8047,"column":0},"generated":{"line":8048,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8048,"column":0},"generated":{"line":8049,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8049,"column":0},"generated":{"line":8050,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8050,"column":0},"generated":{"line":8051,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8051,"column":0},"generated":{"line":8052,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8052,"column":0},"generated":{"line":8053,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8053,"column":0},"generated":{"line":8054,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8054,"column":0},"generated":{"line":8055,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8055,"column":0},"generated":{"line":8056,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8056,"column":0},"generated":{"line":8057,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8057,"column":0},"generated":{"line":8058,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8058,"column":0},"generated":{"line":8059,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8059,"column":0},"generated":{"line":8060,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8060,"column":0},"generated":{"line":8061,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8061,"column":0},"generated":{"line":8062,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8062,"column":0},"generated":{"line":8063,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8063,"column":0},"generated":{"line":8064,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8064,"column":0},"generated":{"line":8065,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8065,"column":0},"generated":{"line":8066,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8066,"column":0},"generated":{"line":8067,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8067,"column":0},"generated":{"line":8068,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8068,"column":0},"generated":{"line":8069,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8069,"column":0},"generated":{"line":8070,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8070,"column":0},"generated":{"line":8071,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8071,"column":0},"generated":{"line":8072,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8072,"column":0},"generated":{"line":8073,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8073,"column":0},"generated":{"line":8074,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8074,"column":0},"generated":{"line":8075,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8075,"column":0},"generated":{"line":8076,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8076,"column":0},"generated":{"line":8077,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8077,"column":0},"generated":{"line":8078,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8078,"column":0},"generated":{"line":8079,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8079,"column":0},"generated":{"line":8080,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8080,"column":0},"generated":{"line":8081,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8081,"column":0},"generated":{"line":8082,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8082,"column":0},"generated":{"line":8083,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8083,"column":0},"generated":{"line":8084,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8084,"column":0},"generated":{"line":8085,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8085,"column":0},"generated":{"line":8086,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8086,"column":0},"generated":{"line":8087,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8087,"column":0},"generated":{"line":8088,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8088,"column":0},"generated":{"line":8089,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8089,"column":0},"generated":{"line":8090,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8090,"column":0},"generated":{"line":8091,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8091,"column":0},"generated":{"line":8092,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8092,"column":0},"generated":{"line":8093,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8093,"column":0},"generated":{"line":8094,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8094,"column":0},"generated":{"line":8095,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8095,"column":0},"generated":{"line":8096,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8096,"column":0},"generated":{"line":8097,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8097,"column":0},"generated":{"line":8098,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8098,"column":0},"generated":{"line":8099,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8099,"column":0},"generated":{"line":8100,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8100,"column":0},"generated":{"line":8101,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8101,"column":0},"generated":{"line":8102,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8102,"column":0},"generated":{"line":8103,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8103,"column":0},"generated":{"line":8104,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8104,"column":0},"generated":{"line":8105,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8105,"column":0},"generated":{"line":8106,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8106,"column":0},"generated":{"line":8107,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8107,"column":0},"generated":{"line":8108,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8108,"column":0},"generated":{"line":8109,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8109,"column":0},"generated":{"line":8110,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8110,"column":0},"generated":{"line":8111,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8111,"column":0},"generated":{"line":8112,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8112,"column":0},"generated":{"line":8113,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8113,"column":0},"generated":{"line":8114,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8114,"column":0},"generated":{"line":8115,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8115,"column":0},"generated":{"line":8116,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8116,"column":0},"generated":{"line":8117,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8117,"column":0},"generated":{"line":8118,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8118,"column":0},"generated":{"line":8119,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8119,"column":0},"generated":{"line":8120,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8120,"column":0},"generated":{"line":8121,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8121,"column":0},"generated":{"line":8122,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8122,"column":0},"generated":{"line":8123,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8123,"column":0},"generated":{"line":8124,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8124,"column":0},"generated":{"line":8125,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8125,"column":0},"generated":{"line":8126,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8126,"column":0},"generated":{"line":8127,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8127,"column":0},"generated":{"line":8128,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8128,"column":0},"generated":{"line":8129,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8129,"column":0},"generated":{"line":8130,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8130,"column":0},"generated":{"line":8131,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8131,"column":0},"generated":{"line":8132,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8132,"column":0},"generated":{"line":8133,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8133,"column":0},"generated":{"line":8134,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8134,"column":0},"generated":{"line":8135,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8135,"column":0},"generated":{"line":8136,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8136,"column":0},"generated":{"line":8137,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8137,"column":0},"generated":{"line":8138,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8138,"column":0},"generated":{"line":8139,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8139,"column":0},"generated":{"line":8140,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8140,"column":0},"generated":{"line":8141,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8141,"column":0},"generated":{"line":8142,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8142,"column":0},"generated":{"line":8143,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8143,"column":0},"generated":{"line":8144,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8144,"column":0},"generated":{"line":8145,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8145,"column":0},"generated":{"line":8146,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8146,"column":0},"generated":{"line":8147,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8147,"column":0},"generated":{"line":8148,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8148,"column":0},"generated":{"line":8149,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8149,"column":0},"generated":{"line":8150,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8150,"column":0},"generated":{"line":8151,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8151,"column":0},"generated":{"line":8152,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8152,"column":0},"generated":{"line":8153,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8153,"column":0},"generated":{"line":8154,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8154,"column":0},"generated":{"line":8155,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8155,"column":0},"generated":{"line":8156,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8156,"column":0},"generated":{"line":8157,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8157,"column":0},"generated":{"line":8158,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8158,"column":0},"generated":{"line":8159,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8159,"column":0},"generated":{"line":8160,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8160,"column":0},"generated":{"line":8161,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8161,"column":0},"generated":{"line":8162,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8162,"column":0},"generated":{"line":8163,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8163,"column":0},"generated":{"line":8164,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8164,"column":0},"generated":{"line":8165,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8165,"column":0},"generated":{"line":8166,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8166,"column":0},"generated":{"line":8167,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8167,"column":0},"generated":{"line":8168,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8168,"column":0},"generated":{"line":8169,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8169,"column":0},"generated":{"line":8170,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8170,"column":0},"generated":{"line":8171,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8171,"column":0},"generated":{"line":8172,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8172,"column":0},"generated":{"line":8173,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8173,"column":0},"generated":{"line":8174,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8174,"column":0},"generated":{"line":8175,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8175,"column":0},"generated":{"line":8176,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8176,"column":0},"generated":{"line":8177,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8177,"column":0},"generated":{"line":8178,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8178,"column":0},"generated":{"line":8179,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8179,"column":0},"generated":{"line":8180,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8180,"column":0},"generated":{"line":8181,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8181,"column":0},"generated":{"line":8182,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8182,"column":0},"generated":{"line":8183,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8183,"column":0},"generated":{"line":8184,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8184,"column":0},"generated":{"line":8185,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8185,"column":0},"generated":{"line":8186,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8186,"column":0},"generated":{"line":8187,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8187,"column":0},"generated":{"line":8188,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8188,"column":0},"generated":{"line":8189,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8189,"column":0},"generated":{"line":8190,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8190,"column":0},"generated":{"line":8191,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8191,"column":0},"generated":{"line":8192,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8192,"column":0},"generated":{"line":8193,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8193,"column":0},"generated":{"line":8194,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8194,"column":0},"generated":{"line":8195,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8195,"column":0},"generated":{"line":8196,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8196,"column":0},"generated":{"line":8197,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8197,"column":0},"generated":{"line":8198,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8198,"column":0},"generated":{"line":8199,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8199,"column":0},"generated":{"line":8200,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8200,"column":0},"generated":{"line":8201,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8201,"column":0},"generated":{"line":8202,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8202,"column":0},"generated":{"line":8203,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8203,"column":0},"generated":{"line":8204,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8204,"column":0},"generated":{"line":8205,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8205,"column":0},"generated":{"line":8206,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8206,"column":0},"generated":{"line":8207,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8207,"column":0},"generated":{"line":8208,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8208,"column":0},"generated":{"line":8209,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8209,"column":0},"generated":{"line":8210,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8210,"column":0},"generated":{"line":8211,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8211,"column":0},"generated":{"line":8212,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8212,"column":0},"generated":{"line":8213,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8213,"column":0},"generated":{"line":8214,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8214,"column":0},"generated":{"line":8215,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8215,"column":0},"generated":{"line":8216,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8216,"column":0},"generated":{"line":8217,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8217,"column":0},"generated":{"line":8218,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8218,"column":0},"generated":{"line":8219,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8219,"column":0},"generated":{"line":8220,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8220,"column":0},"generated":{"line":8221,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8221,"column":0},"generated":{"line":8222,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8222,"column":0},"generated":{"line":8223,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8223,"column":0},"generated":{"line":8224,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8224,"column":0},"generated":{"line":8225,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8225,"column":0},"generated":{"line":8226,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8226,"column":0},"generated":{"line":8227,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8227,"column":0},"generated":{"line":8228,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8228,"column":0},"generated":{"line":8229,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8229,"column":0},"generated":{"line":8230,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8230,"column":0},"generated":{"line":8231,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8231,"column":0},"generated":{"line":8232,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8232,"column":0},"generated":{"line":8233,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8233,"column":0},"generated":{"line":8234,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8234,"column":0},"generated":{"line":8235,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8235,"column":0},"generated":{"line":8236,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8236,"column":0},"generated":{"line":8237,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8237,"column":0},"generated":{"line":8238,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8238,"column":0},"generated":{"line":8239,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8239,"column":0},"generated":{"line":8240,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8240,"column":0},"generated":{"line":8241,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8241,"column":0},"generated":{"line":8242,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8242,"column":0},"generated":{"line":8243,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8243,"column":0},"generated":{"line":8244,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8244,"column":0},"generated":{"line":8245,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8245,"column":0},"generated":{"line":8246,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8246,"column":0},"generated":{"line":8247,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8247,"column":0},"generated":{"line":8248,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8248,"column":0},"generated":{"line":8249,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8249,"column":0},"generated":{"line":8250,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8250,"column":0},"generated":{"line":8251,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8251,"column":0},"generated":{"line":8252,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8252,"column":0},"generated":{"line":8253,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8253,"column":0},"generated":{"line":8254,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8254,"column":0},"generated":{"line":8255,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8255,"column":0},"generated":{"line":8256,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8256,"column":0},"generated":{"line":8257,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8257,"column":0},"generated":{"line":8258,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8258,"column":0},"generated":{"line":8259,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8259,"column":0},"generated":{"line":8260,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8260,"column":0},"generated":{"line":8261,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8261,"column":0},"generated":{"line":8262,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8262,"column":0},"generated":{"line":8263,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8263,"column":0},"generated":{"line":8264,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8264,"column":0},"generated":{"line":8265,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8265,"column":0},"generated":{"line":8266,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8266,"column":0},"generated":{"line":8267,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8267,"column":0},"generated":{"line":8268,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8268,"column":0},"generated":{"line":8269,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8269,"column":0},"generated":{"line":8270,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8270,"column":0},"generated":{"line":8271,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8271,"column":0},"generated":{"line":8272,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8272,"column":0},"generated":{"line":8273,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8273,"column":0},"generated":{"line":8274,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8274,"column":0},"generated":{"line":8275,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8275,"column":0},"generated":{"line":8276,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8276,"column":0},"generated":{"line":8277,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8277,"column":0},"generated":{"line":8278,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8278,"column":0},"generated":{"line":8279,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8279,"column":0},"generated":{"line":8280,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8280,"column":0},"generated":{"line":8281,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8281,"column":0},"generated":{"line":8282,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8282,"column":0},"generated":{"line":8283,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8283,"column":0},"generated":{"line":8284,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8284,"column":0},"generated":{"line":8285,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8285,"column":0},"generated":{"line":8286,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8286,"column":0},"generated":{"line":8287,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8287,"column":0},"generated":{"line":8288,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8288,"column":0},"generated":{"line":8289,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8289,"column":0},"generated":{"line":8290,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8290,"column":0},"generated":{"line":8291,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8291,"column":0},"generated":{"line":8292,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8292,"column":0},"generated":{"line":8293,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8293,"column":0},"generated":{"line":8294,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8294,"column":0},"generated":{"line":8295,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8295,"column":0},"generated":{"line":8296,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8296,"column":0},"generated":{"line":8297,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8297,"column":0},"generated":{"line":8298,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8298,"column":0},"generated":{"line":8299,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8299,"column":0},"generated":{"line":8300,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8300,"column":0},"generated":{"line":8301,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8301,"column":0},"generated":{"line":8302,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8302,"column":0},"generated":{"line":8303,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8303,"column":0},"generated":{"line":8304,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8304,"column":0},"generated":{"line":8305,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8305,"column":0},"generated":{"line":8306,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8306,"column":0},"generated":{"line":8307,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8307,"column":0},"generated":{"line":8308,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8308,"column":0},"generated":{"line":8309,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8309,"column":0},"generated":{"line":8310,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8310,"column":0},"generated":{"line":8311,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8311,"column":0},"generated":{"line":8312,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8312,"column":0},"generated":{"line":8313,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8313,"column":0},"generated":{"line":8314,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8314,"column":0},"generated":{"line":8315,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8315,"column":0},"generated":{"line":8316,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8316,"column":0},"generated":{"line":8317,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8317,"column":0},"generated":{"line":8318,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8318,"column":0},"generated":{"line":8319,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8319,"column":0},"generated":{"line":8320,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8320,"column":0},"generated":{"line":8321,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8321,"column":0},"generated":{"line":8322,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8322,"column":0},"generated":{"line":8323,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8323,"column":0},"generated":{"line":8324,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8324,"column":0},"generated":{"line":8325,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8325,"column":0},"generated":{"line":8326,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8326,"column":0},"generated":{"line":8327,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8327,"column":0},"generated":{"line":8328,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8328,"column":0},"generated":{"line":8329,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8329,"column":0},"generated":{"line":8330,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8330,"column":0},"generated":{"line":8331,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8331,"column":0},"generated":{"line":8332,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8332,"column":0},"generated":{"line":8333,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8333,"column":0},"generated":{"line":8334,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8334,"column":0},"generated":{"line":8335,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8335,"column":0},"generated":{"line":8336,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8336,"column":0},"generated":{"line":8337,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8337,"column":0},"generated":{"line":8338,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8338,"column":0},"generated":{"line":8339,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8339,"column":0},"generated":{"line":8340,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8340,"column":0},"generated":{"line":8341,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8341,"column":0},"generated":{"line":8342,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8342,"column":0},"generated":{"line":8343,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8343,"column":0},"generated":{"line":8344,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8344,"column":0},"generated":{"line":8345,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8345,"column":0},"generated":{"line":8346,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8346,"column":0},"generated":{"line":8347,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8347,"column":0},"generated":{"line":8348,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8348,"column":0},"generated":{"line":8349,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8349,"column":0},"generated":{"line":8350,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8350,"column":0},"generated":{"line":8351,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8351,"column":0},"generated":{"line":8352,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8352,"column":0},"generated":{"line":8353,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8353,"column":0},"generated":{"line":8354,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8354,"column":0},"generated":{"line":8355,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8355,"column":0},"generated":{"line":8356,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8356,"column":0},"generated":{"line":8357,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8357,"column":0},"generated":{"line":8358,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8358,"column":0},"generated":{"line":8359,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8359,"column":0},"generated":{"line":8360,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8360,"column":0},"generated":{"line":8361,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8361,"column":0},"generated":{"line":8362,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8362,"column":0},"generated":{"line":8363,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8363,"column":0},"generated":{"line":8364,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8364,"column":0},"generated":{"line":8365,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8365,"column":0},"generated":{"line":8366,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8366,"column":0},"generated":{"line":8367,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8367,"column":0},"generated":{"line":8368,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8368,"column":0},"generated":{"line":8369,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8369,"column":0},"generated":{"line":8370,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8370,"column":0},"generated":{"line":8371,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8371,"column":0},"generated":{"line":8372,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8372,"column":0},"generated":{"line":8373,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8373,"column":0},"generated":{"line":8374,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8374,"column":0},"generated":{"line":8375,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8375,"column":0},"generated":{"line":8376,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8376,"column":0},"generated":{"line":8377,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8377,"column":0},"generated":{"line":8378,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8378,"column":0},"generated":{"line":8379,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8379,"column":0},"generated":{"line":8380,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8380,"column":0},"generated":{"line":8381,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8381,"column":0},"generated":{"line":8382,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8382,"column":0},"generated":{"line":8383,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8383,"column":0},"generated":{"line":8384,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8384,"column":0},"generated":{"line":8385,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8385,"column":0},"generated":{"line":8386,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8386,"column":0},"generated":{"line":8387,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8387,"column":0},"generated":{"line":8388,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8388,"column":0},"generated":{"line":8389,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8389,"column":0},"generated":{"line":8390,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8390,"column":0},"generated":{"line":8391,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8391,"column":0},"generated":{"line":8392,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8392,"column":0},"generated":{"line":8393,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8393,"column":0},"generated":{"line":8394,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8394,"column":0},"generated":{"line":8395,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8395,"column":0},"generated":{"line":8396,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8396,"column":0},"generated":{"line":8397,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8397,"column":0},"generated":{"line":8398,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8398,"column":0},"generated":{"line":8399,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8399,"column":0},"generated":{"line":8400,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8400,"column":0},"generated":{"line":8401,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8401,"column":0},"generated":{"line":8402,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8402,"column":0},"generated":{"line":8403,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8403,"column":0},"generated":{"line":8404,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8404,"column":0},"generated":{"line":8405,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8405,"column":0},"generated":{"line":8406,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8406,"column":0},"generated":{"line":8407,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8407,"column":0},"generated":{"line":8408,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8408,"column":0},"generated":{"line":8409,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8409,"column":0},"generated":{"line":8410,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8410,"column":0},"generated":{"line":8411,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8411,"column":0},"generated":{"line":8412,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8412,"column":0},"generated":{"line":8413,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8413,"column":0},"generated":{"line":8414,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8414,"column":0},"generated":{"line":8415,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8415,"column":0},"generated":{"line":8416,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8416,"column":0},"generated":{"line":8417,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8417,"column":0},"generated":{"line":8418,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8418,"column":0},"generated":{"line":8419,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8419,"column":0},"generated":{"line":8420,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8420,"column":0},"generated":{"line":8421,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8421,"column":0},"generated":{"line":8422,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8422,"column":0},"generated":{"line":8423,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8423,"column":0},"generated":{"line":8424,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8424,"column":0},"generated":{"line":8425,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8425,"column":0},"generated":{"line":8426,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8426,"column":0},"generated":{"line":8427,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8427,"column":0},"generated":{"line":8428,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8428,"column":0},"generated":{"line":8429,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8429,"column":0},"generated":{"line":8430,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8430,"column":0},"generated":{"line":8431,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8431,"column":0},"generated":{"line":8432,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8432,"column":0},"generated":{"line":8433,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8433,"column":0},"generated":{"line":8434,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8434,"column":0},"generated":{"line":8435,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8435,"column":0},"generated":{"line":8436,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8436,"column":0},"generated":{"line":8437,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8437,"column":0},"generated":{"line":8438,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8438,"column":0},"generated":{"line":8439,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8439,"column":0},"generated":{"line":8440,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8440,"column":0},"generated":{"line":8441,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8441,"column":0},"generated":{"line":8442,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8442,"column":0},"generated":{"line":8443,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8443,"column":0},"generated":{"line":8444,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8444,"column":0},"generated":{"line":8445,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8445,"column":0},"generated":{"line":8446,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8446,"column":0},"generated":{"line":8447,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8447,"column":0},"generated":{"line":8448,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8448,"column":0},"generated":{"line":8449,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8449,"column":0},"generated":{"line":8450,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8450,"column":0},"generated":{"line":8451,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8451,"column":0},"generated":{"line":8452,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8452,"column":0},"generated":{"line":8453,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8453,"column":0},"generated":{"line":8454,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8454,"column":0},"generated":{"line":8455,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8455,"column":0},"generated":{"line":8456,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8456,"column":0},"generated":{"line":8457,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8457,"column":0},"generated":{"line":8458,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8458,"column":0},"generated":{"line":8459,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8459,"column":0},"generated":{"line":8460,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8460,"column":0},"generated":{"line":8461,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8461,"column":0},"generated":{"line":8462,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8462,"column":0},"generated":{"line":8463,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8463,"column":0},"generated":{"line":8464,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8464,"column":0},"generated":{"line":8465,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8465,"column":0},"generated":{"line":8466,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8466,"column":0},"generated":{"line":8467,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8467,"column":0},"generated":{"line":8468,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8468,"column":0},"generated":{"line":8469,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8469,"column":0},"generated":{"line":8470,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8470,"column":0},"generated":{"line":8471,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8471,"column":0},"generated":{"line":8472,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8472,"column":0},"generated":{"line":8473,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8473,"column":0},"generated":{"line":8474,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8474,"column":0},"generated":{"line":8475,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8475,"column":0},"generated":{"line":8476,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8476,"column":0},"generated":{"line":8477,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8477,"column":0},"generated":{"line":8478,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8478,"column":0},"generated":{"line":8479,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8479,"column":0},"generated":{"line":8480,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8480,"column":0},"generated":{"line":8481,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8481,"column":0},"generated":{"line":8482,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8482,"column":0},"generated":{"line":8483,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8483,"column":0},"generated":{"line":8484,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8484,"column":0},"generated":{"line":8485,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8485,"column":0},"generated":{"line":8486,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8486,"column":0},"generated":{"line":8487,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8487,"column":0},"generated":{"line":8488,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8488,"column":0},"generated":{"line":8489,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8489,"column":0},"generated":{"line":8490,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8490,"column":0},"generated":{"line":8491,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8491,"column":0},"generated":{"line":8492,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8492,"column":0},"generated":{"line":8493,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8493,"column":0},"generated":{"line":8494,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8494,"column":0},"generated":{"line":8495,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8495,"column":0},"generated":{"line":8496,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8496,"column":0},"generated":{"line":8497,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8497,"column":0},"generated":{"line":8498,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8498,"column":0},"generated":{"line":8499,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8499,"column":0},"generated":{"line":8500,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8500,"column":0},"generated":{"line":8501,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8501,"column":0},"generated":{"line":8502,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8502,"column":0},"generated":{"line":8503,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8503,"column":0},"generated":{"line":8504,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8504,"column":0},"generated":{"line":8505,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8505,"column":0},"generated":{"line":8506,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8506,"column":0},"generated":{"line":8507,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8507,"column":0},"generated":{"line":8508,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8508,"column":0},"generated":{"line":8509,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8509,"column":0},"generated":{"line":8510,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8510,"column":0},"generated":{"line":8511,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8511,"column":0},"generated":{"line":8512,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8512,"column":0},"generated":{"line":8513,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8513,"column":0},"generated":{"line":8514,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8514,"column":0},"generated":{"line":8515,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8515,"column":0},"generated":{"line":8516,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8516,"column":0},"generated":{"line":8517,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8517,"column":0},"generated":{"line":8518,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8518,"column":0},"generated":{"line":8519,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8519,"column":0},"generated":{"line":8520,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8520,"column":0},"generated":{"line":8521,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8521,"column":0},"generated":{"line":8522,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8522,"column":0},"generated":{"line":8523,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8523,"column":0},"generated":{"line":8524,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8524,"column":0},"generated":{"line":8525,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8525,"column":0},"generated":{"line":8526,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8526,"column":0},"generated":{"line":8527,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8527,"column":0},"generated":{"line":8528,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8528,"column":0},"generated":{"line":8529,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8529,"column":0},"generated":{"line":8530,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8530,"column":0},"generated":{"line":8531,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8531,"column":0},"generated":{"line":8532,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8532,"column":0},"generated":{"line":8533,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8533,"column":0},"generated":{"line":8534,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8534,"column":0},"generated":{"line":8535,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8535,"column":0},"generated":{"line":8536,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8536,"column":0},"generated":{"line":8537,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8537,"column":0},"generated":{"line":8538,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8538,"column":0},"generated":{"line":8539,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8539,"column":0},"generated":{"line":8540,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8540,"column":0},"generated":{"line":8541,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8541,"column":0},"generated":{"line":8542,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8542,"column":0},"generated":{"line":8543,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8543,"column":0},"generated":{"line":8544,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8544,"column":0},"generated":{"line":8545,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8545,"column":0},"generated":{"line":8546,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8546,"column":0},"generated":{"line":8547,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8547,"column":0},"generated":{"line":8548,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8548,"column":0},"generated":{"line":8549,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8549,"column":0},"generated":{"line":8550,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8550,"column":0},"generated":{"line":8551,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8551,"column":0},"generated":{"line":8552,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8552,"column":0},"generated":{"line":8553,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8553,"column":0},"generated":{"line":8554,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8554,"column":0},"generated":{"line":8555,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8555,"column":0},"generated":{"line":8556,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8556,"column":0},"generated":{"line":8557,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8557,"column":0},"generated":{"line":8558,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8558,"column":0},"generated":{"line":8559,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8559,"column":0},"generated":{"line":8560,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8560,"column":0},"generated":{"line":8561,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8561,"column":0},"generated":{"line":8562,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8562,"column":0},"generated":{"line":8563,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8563,"column":0},"generated":{"line":8564,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8564,"column":0},"generated":{"line":8565,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8565,"column":0},"generated":{"line":8566,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8566,"column":0},"generated":{"line":8567,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8567,"column":0},"generated":{"line":8568,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8568,"column":0},"generated":{"line":8569,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8569,"column":0},"generated":{"line":8570,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8570,"column":0},"generated":{"line":8571,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8571,"column":0},"generated":{"line":8572,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8572,"column":0},"generated":{"line":8573,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8573,"column":0},"generated":{"line":8574,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8574,"column":0},"generated":{"line":8575,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8575,"column":0},"generated":{"line":8576,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8576,"column":0},"generated":{"line":8577,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8577,"column":0},"generated":{"line":8578,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8578,"column":0},"generated":{"line":8579,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8579,"column":0},"generated":{"line":8580,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8580,"column":0},"generated":{"line":8581,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8581,"column":0},"generated":{"line":8582,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8582,"column":0},"generated":{"line":8583,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8583,"column":0},"generated":{"line":8584,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8584,"column":0},"generated":{"line":8585,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8585,"column":0},"generated":{"line":8586,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8586,"column":0},"generated":{"line":8587,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8587,"column":0},"generated":{"line":8588,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8588,"column":0},"generated":{"line":8589,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8589,"column":0},"generated":{"line":8590,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8590,"column":0},"generated":{"line":8591,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8591,"column":0},"generated":{"line":8592,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8592,"column":0},"generated":{"line":8593,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8593,"column":0},"generated":{"line":8594,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8594,"column":0},"generated":{"line":8595,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8595,"column":0},"generated":{"line":8596,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8596,"column":0},"generated":{"line":8597,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8597,"column":0},"generated":{"line":8598,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8598,"column":0},"generated":{"line":8599,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8599,"column":0},"generated":{"line":8600,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8600,"column":0},"generated":{"line":8601,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8601,"column":0},"generated":{"line":8602,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8602,"column":0},"generated":{"line":8603,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8603,"column":0},"generated":{"line":8604,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8604,"column":0},"generated":{"line":8605,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8605,"column":0},"generated":{"line":8606,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8606,"column":0},"generated":{"line":8607,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8607,"column":0},"generated":{"line":8608,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8608,"column":0},"generated":{"line":8609,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8609,"column":0},"generated":{"line":8610,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8610,"column":0},"generated":{"line":8611,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8611,"column":0},"generated":{"line":8612,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8612,"column":0},"generated":{"line":8613,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8613,"column":0},"generated":{"line":8614,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8614,"column":0},"generated":{"line":8615,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8615,"column":0},"generated":{"line":8616,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8616,"column":0},"generated":{"line":8617,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8617,"column":0},"generated":{"line":8618,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8618,"column":0},"generated":{"line":8619,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8619,"column":0},"generated":{"line":8620,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8620,"column":0},"generated":{"line":8621,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8621,"column":0},"generated":{"line":8622,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8622,"column":0},"generated":{"line":8623,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8623,"column":0},"generated":{"line":8624,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8624,"column":0},"generated":{"line":8625,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8625,"column":0},"generated":{"line":8626,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8626,"column":0},"generated":{"line":8627,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8627,"column":0},"generated":{"line":8628,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8628,"column":0},"generated":{"line":8629,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8629,"column":0},"generated":{"line":8630,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8630,"column":0},"generated":{"line":8631,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8631,"column":0},"generated":{"line":8632,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8632,"column":0},"generated":{"line":8633,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8633,"column":0},"generated":{"line":8634,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8634,"column":0},"generated":{"line":8635,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8635,"column":0},"generated":{"line":8636,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8636,"column":0},"generated":{"line":8637,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8637,"column":0},"generated":{"line":8638,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8638,"column":0},"generated":{"line":8639,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8639,"column":0},"generated":{"line":8640,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8640,"column":0},"generated":{"line":8641,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8641,"column":0},"generated":{"line":8642,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8642,"column":0},"generated":{"line":8643,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8643,"column":0},"generated":{"line":8644,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8644,"column":0},"generated":{"line":8645,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8645,"column":0},"generated":{"line":8646,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8646,"column":0},"generated":{"line":8647,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8647,"column":0},"generated":{"line":8648,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8648,"column":0},"generated":{"line":8649,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8649,"column":0},"generated":{"line":8650,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8650,"column":0},"generated":{"line":8651,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8651,"column":0},"generated":{"line":8652,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8652,"column":0},"generated":{"line":8653,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8653,"column":0},"generated":{"line":8654,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8654,"column":0},"generated":{"line":8655,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8655,"column":0},"generated":{"line":8656,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8656,"column":0},"generated":{"line":8657,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8657,"column":0},"generated":{"line":8658,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8658,"column":0},"generated":{"line":8659,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8659,"column":0},"generated":{"line":8660,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8660,"column":0},"generated":{"line":8661,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8661,"column":0},"generated":{"line":8662,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8662,"column":0},"generated":{"line":8663,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8663,"column":0},"generated":{"line":8664,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8664,"column":0},"generated":{"line":8665,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8665,"column":0},"generated":{"line":8666,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8666,"column":0},"generated":{"line":8667,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8667,"column":0},"generated":{"line":8668,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8668,"column":0},"generated":{"line":8669,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8669,"column":0},"generated":{"line":8670,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8670,"column":0},"generated":{"line":8671,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8671,"column":0},"generated":{"line":8672,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8672,"column":0},"generated":{"line":8673,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8673,"column":0},"generated":{"line":8674,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8674,"column":0},"generated":{"line":8675,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8675,"column":0},"generated":{"line":8676,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8676,"column":0},"generated":{"line":8677,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8677,"column":0},"generated":{"line":8678,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8678,"column":0},"generated":{"line":8679,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8679,"column":0},"generated":{"line":8680,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8680,"column":0},"generated":{"line":8681,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8681,"column":0},"generated":{"line":8682,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8682,"column":0},"generated":{"line":8683,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8683,"column":0},"generated":{"line":8684,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8684,"column":0},"generated":{"line":8685,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8685,"column":0},"generated":{"line":8686,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8686,"column":0},"generated":{"line":8687,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8687,"column":0},"generated":{"line":8688,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8688,"column":0},"generated":{"line":8689,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8689,"column":0},"generated":{"line":8690,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8690,"column":0},"generated":{"line":8691,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8691,"column":0},"generated":{"line":8692,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8692,"column":0},"generated":{"line":8693,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8693,"column":0},"generated":{"line":8694,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8694,"column":0},"generated":{"line":8695,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8695,"column":0},"generated":{"line":8696,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8696,"column":0},"generated":{"line":8697,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8697,"column":0},"generated":{"line":8698,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8698,"column":0},"generated":{"line":8699,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8699,"column":0},"generated":{"line":8700,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8700,"column":0},"generated":{"line":8701,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8701,"column":0},"generated":{"line":8702,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8702,"column":0},"generated":{"line":8703,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8703,"column":0},"generated":{"line":8704,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8704,"column":0},"generated":{"line":8705,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8705,"column":0},"generated":{"line":8706,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8706,"column":0},"generated":{"line":8707,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8707,"column":0},"generated":{"line":8708,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8708,"column":0},"generated":{"line":8709,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8709,"column":0},"generated":{"line":8710,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8710,"column":0},"generated":{"line":8711,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8711,"column":0},"generated":{"line":8712,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8712,"column":0},"generated":{"line":8713,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8713,"column":0},"generated":{"line":8714,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8714,"column":0},"generated":{"line":8715,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8715,"column":0},"generated":{"line":8716,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8716,"column":0},"generated":{"line":8717,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8717,"column":0},"generated":{"line":8718,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8718,"column":0},"generated":{"line":8719,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8719,"column":0},"generated":{"line":8720,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8720,"column":0},"generated":{"line":8721,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8721,"column":0},"generated":{"line":8722,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8722,"column":0},"generated":{"line":8723,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8723,"column":0},"generated":{"line":8724,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8724,"column":0},"generated":{"line":8725,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8725,"column":0},"generated":{"line":8726,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8726,"column":0},"generated":{"line":8727,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8727,"column":0},"generated":{"line":8728,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8728,"column":0},"generated":{"line":8729,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8729,"column":0},"generated":{"line":8730,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8730,"column":0},"generated":{"line":8731,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8731,"column":0},"generated":{"line":8732,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8732,"column":0},"generated":{"line":8733,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8733,"column":0},"generated":{"line":8734,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8734,"column":0},"generated":{"line":8735,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8735,"column":0},"generated":{"line":8736,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8736,"column":0},"generated":{"line":8737,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8737,"column":0},"generated":{"line":8738,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8738,"column":0},"generated":{"line":8739,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8739,"column":0},"generated":{"line":8740,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8740,"column":0},"generated":{"line":8741,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8741,"column":0},"generated":{"line":8742,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8742,"column":0},"generated":{"line":8743,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8743,"column":0},"generated":{"line":8744,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8744,"column":0},"generated":{"line":8745,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8745,"column":0},"generated":{"line":8746,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8746,"column":0},"generated":{"line":8747,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8747,"column":0},"generated":{"line":8748,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8748,"column":0},"generated":{"line":8749,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8749,"column":0},"generated":{"line":8750,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8750,"column":0},"generated":{"line":8751,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8751,"column":0},"generated":{"line":8752,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8752,"column":0},"generated":{"line":8753,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8753,"column":0},"generated":{"line":8754,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8754,"column":0},"generated":{"line":8755,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8755,"column":0},"generated":{"line":8756,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8756,"column":0},"generated":{"line":8757,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8757,"column":0},"generated":{"line":8758,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8758,"column":0},"generated":{"line":8759,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8759,"column":0},"generated":{"line":8760,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8760,"column":0},"generated":{"line":8761,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8761,"column":0},"generated":{"line":8762,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8762,"column":0},"generated":{"line":8763,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8763,"column":0},"generated":{"line":8764,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8764,"column":0},"generated":{"line":8765,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8765,"column":0},"generated":{"line":8766,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8766,"column":0},"generated":{"line":8767,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8767,"column":0},"generated":{"line":8768,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8768,"column":0},"generated":{"line":8769,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8769,"column":0},"generated":{"line":8770,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8770,"column":0},"generated":{"line":8771,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8771,"column":0},"generated":{"line":8772,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8772,"column":0},"generated":{"line":8773,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8773,"column":0},"generated":{"line":8774,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8774,"column":0},"generated":{"line":8775,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8775,"column":0},"generated":{"line":8776,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8776,"column":0},"generated":{"line":8777,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8777,"column":0},"generated":{"line":8778,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8778,"column":0},"generated":{"line":8779,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8779,"column":0},"generated":{"line":8780,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8780,"column":0},"generated":{"line":8781,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8781,"column":0},"generated":{"line":8782,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8782,"column":0},"generated":{"line":8783,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8783,"column":0},"generated":{"line":8784,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8784,"column":0},"generated":{"line":8785,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8785,"column":0},"generated":{"line":8786,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8786,"column":0},"generated":{"line":8787,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8787,"column":0},"generated":{"line":8788,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8788,"column":0},"generated":{"line":8789,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8789,"column":0},"generated":{"line":8790,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8790,"column":0},"generated":{"line":8791,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8791,"column":0},"generated":{"line":8792,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8792,"column":0},"generated":{"line":8793,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8793,"column":0},"generated":{"line":8794,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8794,"column":0},"generated":{"line":8795,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8795,"column":0},"generated":{"line":8796,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8796,"column":0},"generated":{"line":8797,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8797,"column":0},"generated":{"line":8798,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8798,"column":0},"generated":{"line":8799,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8799,"column":0},"generated":{"line":8800,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8800,"column":0},"generated":{"line":8801,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8801,"column":0},"generated":{"line":8802,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8802,"column":0},"generated":{"line":8803,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8803,"column":0},"generated":{"line":8804,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8804,"column":0},"generated":{"line":8805,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8805,"column":0},"generated":{"line":8806,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8806,"column":0},"generated":{"line":8807,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8807,"column":0},"generated":{"line":8808,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8808,"column":0},"generated":{"line":8809,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8809,"column":0},"generated":{"line":8810,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8810,"column":0},"generated":{"line":8811,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8811,"column":0},"generated":{"line":8812,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8812,"column":0},"generated":{"line":8813,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8813,"column":0},"generated":{"line":8814,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8814,"column":0},"generated":{"line":8815,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8815,"column":0},"generated":{"line":8816,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8816,"column":0},"generated":{"line":8817,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8817,"column":0},"generated":{"line":8818,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8818,"column":0},"generated":{"line":8819,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8819,"column":0},"generated":{"line":8820,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8820,"column":0},"generated":{"line":8821,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8821,"column":0},"generated":{"line":8822,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8822,"column":0},"generated":{"line":8823,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8823,"column":0},"generated":{"line":8824,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8824,"column":0},"generated":{"line":8825,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8825,"column":0},"generated":{"line":8826,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8826,"column":0},"generated":{"line":8827,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8827,"column":0},"generated":{"line":8828,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8828,"column":0},"generated":{"line":8829,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8829,"column":0},"generated":{"line":8830,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8830,"column":0},"generated":{"line":8831,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8831,"column":0},"generated":{"line":8832,"column":0}},{"source":"../node_modules/ramda/dist/ramda.js","original":{"line":8832,"column":0},"generated":{"line":8833,"column":0}}],"sources":{"../node_modules/ramda/dist/ramda.js":"//  Ramda v0.22.1\n//  https://github.com/ramda/ramda\n//  (c) 2013-2016 Scott Sauyet, Michael Hurley, and David Chambers\n//  Ramda may be freely distributed under the MIT license.\n\n;(function() {\n\n  'use strict';\n\n  /**\n     * A special placeholder value used to specify \"gaps\" within curried functions,\n     * allowing partial application of any combination of arguments, regardless of\n     * their positions.\n     *\n     * If `g` is a curried ternary function and `_` is `R.__`, the following are\n     * equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2, _)(1, 3)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @constant\n     * @memberOf R\n     * @since v0.6.0\n     * @category Function\n     * @example\n     *\n     *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');\n     *      greet('Alice'); //=> 'Hello, Alice!'\n     */\n    var __ = { '@@functional/placeholder': true };\n\n    /* eslint-disable no-unused-vars */\n    var _arity = function _arity(n, fn) {\n        /* eslint-disable no-unused-vars */\n        switch (n) {\n        case 0:\n            return function () {\n                return fn.apply(this, arguments);\n            };\n        case 1:\n            return function (a0) {\n                return fn.apply(this, arguments);\n            };\n        case 2:\n            return function (a0, a1) {\n                return fn.apply(this, arguments);\n            };\n        case 3:\n            return function (a0, a1, a2) {\n                return fn.apply(this, arguments);\n            };\n        case 4:\n            return function (a0, a1, a2, a3) {\n                return fn.apply(this, arguments);\n            };\n        case 5:\n            return function (a0, a1, a2, a3, a4) {\n                return fn.apply(this, arguments);\n            };\n        case 6:\n            return function (a0, a1, a2, a3, a4, a5) {\n                return fn.apply(this, arguments);\n            };\n        case 7:\n            return function (a0, a1, a2, a3, a4, a5, a6) {\n                return fn.apply(this, arguments);\n            };\n        case 8:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n                return fn.apply(this, arguments);\n            };\n        case 9:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n                return fn.apply(this, arguments);\n            };\n        case 10:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n                return fn.apply(this, arguments);\n            };\n        default:\n            throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n        }\n    };\n\n    var _arrayFromIterator = function _arrayFromIterator(iter) {\n        var list = [];\n        var next;\n        while (!(next = iter.next()).done) {\n            list.push(next.value);\n        }\n        return list;\n    };\n\n    var _arrayOf = function _arrayOf() {\n        return Array.prototype.slice.call(arguments);\n    };\n\n    var _cloneRegExp = function _cloneRegExp(pattern) {\n        return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));\n    };\n\n    var _complement = function _complement(f) {\n        return function () {\n            return !f.apply(this, arguments);\n        };\n    };\n\n    /**\n     * Private `concat` function to merge two array-like objects.\n     *\n     * @private\n     * @param {Array|Arguments} [set1=[]] An array-like object.\n     * @param {Array|Arguments} [set2=[]] An array-like object.\n     * @return {Array} A new, merged array.\n     * @example\n     *\n     *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n     */\n    var _concat = function _concat(set1, set2) {\n        set1 = set1 || [];\n        set2 = set2 || [];\n        var idx;\n        var len1 = set1.length;\n        var len2 = set2.length;\n        var result = [];\n        idx = 0;\n        while (idx < len1) {\n            result[result.length] = set1[idx];\n            idx += 1;\n        }\n        idx = 0;\n        while (idx < len2) {\n            result[result.length] = set2[idx];\n            idx += 1;\n        }\n        return result;\n    };\n\n    var _containsWith = function _containsWith(pred, x, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            if (pred(x, list[idx])) {\n                return true;\n            }\n            idx += 1;\n        }\n        return false;\n    };\n\n    var _filter = function _filter(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [];\n        while (idx < len) {\n            if (fn(list[idx])) {\n                result[result.length] = list[idx];\n            }\n            idx += 1;\n        }\n        return result;\n    };\n\n    var _forceReduced = function _forceReduced(x) {\n        return {\n            '@@transducer/value': x,\n            '@@transducer/reduced': true\n        };\n    };\n\n    // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n    var _functionName = function _functionName(f) {\n        // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n        var match = String(f).match(/^function (\\w*)/);\n        return match == null ? '' : match[1];\n    };\n\n    var _has = function _has(prop, obj) {\n        return Object.prototype.hasOwnProperty.call(obj, prop);\n    };\n\n    var _identity = function _identity(x) {\n        return x;\n    };\n\n    var _isArguments = function () {\n        var toString = Object.prototype.toString;\n        return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {\n            return toString.call(x) === '[object Arguments]';\n        } : function _isArguments(x) {\n            return _has('callee', x);\n        };\n    }();\n\n    /**\n     * Tests whether or not an object is an array.\n     *\n     * @private\n     * @param {*} val The object to test.\n     * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n     * @example\n     *\n     *      _isArray([]); //=> true\n     *      _isArray(null); //=> false\n     *      _isArray({}); //=> false\n     */\n    var _isArray = Array.isArray || function _isArray(val) {\n        return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';\n    };\n\n    var _isFunction = function _isFunction(x) {\n        return Object.prototype.toString.call(x) === '[object Function]';\n    };\n\n    /**\n     * Determine if the passed argument is an integer.\n     *\n     * @private\n     * @param {*} n\n     * @category Type\n     * @return {Boolean}\n     */\n    var _isInteger = Number.isInteger || function _isInteger(n) {\n        return n << 0 === n;\n    };\n\n    var _isNumber = function _isNumber(x) {\n        return Object.prototype.toString.call(x) === '[object Number]';\n    };\n\n    var _isObject = function _isObject(x) {\n        return Object.prototype.toString.call(x) === '[object Object]';\n    };\n\n    var _isPlaceholder = function _isPlaceholder(a) {\n        return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n    };\n\n    var _isRegExp = function _isRegExp(x) {\n        return Object.prototype.toString.call(x) === '[object RegExp]';\n    };\n\n    var _isString = function _isString(x) {\n        return Object.prototype.toString.call(x) === '[object String]';\n    };\n\n    var _isTransformer = function _isTransformer(obj) {\n        return typeof obj['@@transducer/step'] === 'function';\n    };\n\n    var _map = function _map(fn, functor) {\n        var idx = 0;\n        var len = functor.length;\n        var result = Array(len);\n        while (idx < len) {\n            result[idx] = fn(functor[idx]);\n            idx += 1;\n        }\n        return result;\n    };\n\n    // Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    var _objectAssign = function _objectAssign(target) {\n        if (target == null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n        var output = Object(target);\n        var idx = 1;\n        var length = arguments.length;\n        while (idx < length) {\n            var source = arguments[idx];\n            if (source != null) {\n                for (var nextKey in source) {\n                    if (_has(nextKey, source)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n            idx += 1;\n        }\n        return output;\n    };\n\n    var _of = function _of(x) {\n        return [x];\n    };\n\n    var _pipe = function _pipe(f, g) {\n        return function () {\n            return g.call(this, f.apply(this, arguments));\n        };\n    };\n\n    var _pipeP = function _pipeP(f, g) {\n        return function () {\n            var ctx = this;\n            return f.apply(ctx, arguments).then(function (x) {\n                return g.call(ctx, x);\n            });\n        };\n    };\n\n    // \\b matches word boundary; [\\b] matches backspace\n    var _quote = function _quote(s) {\n        var escaped = s.replace(/\\\\/g, '\\\\\\\\').replace(/[\\b]/g, '\\\\b')    // \\b matches word boundary; [\\b] matches backspace\n    .replace(/\\f/g, '\\\\f').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t').replace(/\\v/g, '\\\\v').replace(/\\0/g, '\\\\0');\n        return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n    };\n\n    var _reduced = function _reduced(x) {\n        return x && x['@@transducer/reduced'] ? x : {\n            '@@transducer/value': x,\n            '@@transducer/reduced': true\n        };\n    };\n\n    /**\n     * An optimized, private array `slice` implementation.\n     *\n     * @private\n     * @param {Arguments|Array} args The array or arguments object to consider.\n     * @param {Number} [from=0] The array index to slice from, inclusive.\n     * @param {Number} [to=args.length] The array index to slice to, exclusive.\n     * @return {Array} A new, sliced array.\n     * @example\n     *\n     *      _slice([1, 2, 3, 4, 5], 1, 3); //=> [2, 3]\n     *\n     *      var firstThreeArgs = function(a, b, c, d) {\n     *        return _slice(arguments, 0, 3);\n     *      };\n     *      firstThreeArgs(1, 2, 3, 4); //=> [1, 2, 3]\n     */\n    var _slice = function _slice(args, from, to) {\n        switch (arguments.length) {\n        case 1:\n            return _slice(args, 0, args.length);\n        case 2:\n            return _slice(args, from, args.length);\n        default:\n            var list = [];\n            var idx = 0;\n            var len = Math.max(0, Math.min(args.length, to) - from);\n            while (idx < len) {\n                list[idx] = args[from + idx];\n                idx += 1;\n            }\n            return list;\n        }\n    };\n\n    /**\n     * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n     */\n    var _toISOString = function () {\n        var pad = function pad(n) {\n            return (n < 10 ? '0' : '') + n;\n        };\n        return typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {\n            return d.toISOString();\n        } : function _toISOString(d) {\n            return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';\n        };\n    }();\n\n    var _xfBase = {\n        init: function () {\n            return this.xf['@@transducer/init']();\n        },\n        result: function (result) {\n            return this.xf['@@transducer/result'](result);\n        }\n    };\n\n    var _xwrap = function () {\n        function XWrap(fn) {\n            this.f = fn;\n        }\n        XWrap.prototype['@@transducer/init'] = function () {\n            throw new Error('init not implemented on XWrap');\n        };\n        XWrap.prototype['@@transducer/result'] = function (acc) {\n            return acc;\n        };\n        XWrap.prototype['@@transducer/step'] = function (acc, x) {\n            return this.f(acc, x);\n        };\n        return function _xwrap(fn) {\n            return new XWrap(fn);\n        };\n    }();\n\n    var _aperture = function _aperture(n, list) {\n        var idx = 0;\n        var limit = list.length - (n - 1);\n        var acc = new Array(limit >= 0 ? limit : 0);\n        while (idx < limit) {\n            acc[idx] = _slice(list, idx, idx + n);\n            idx += 1;\n        }\n        return acc;\n    };\n\n    var _assign = typeof Object.assign === 'function' ? Object.assign : _objectAssign;\n\n    /**\n     * Similar to hasMethod, this checks whether a function has a [methodname]\n     * function. If it isn't an array it will execute that function otherwise it\n     * will default to the ramda implementation.\n     *\n     * @private\n     * @param {Function} fn ramda implemtation\n     * @param {String} methodname property to check for a custom implementation\n     * @return {Object} Whatever the return value of the method is.\n     */\n    var _checkForMethod = function _checkForMethod(methodname, fn) {\n        return function () {\n            var length = arguments.length;\n            if (length === 0) {\n                return fn();\n            }\n            var obj = arguments[length - 1];\n            return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, _slice(arguments, 0, length - 1));\n        };\n    };\n\n    /**\n     * Optimized internal one-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry1 = function _curry1(fn) {\n        return function f1(a) {\n            if (arguments.length === 0 || _isPlaceholder(a)) {\n                return f1;\n            } else {\n                return fn.apply(this, arguments);\n            }\n        };\n    };\n\n    /**\n     * Optimized internal two-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry2 = function _curry2(fn) {\n        return function f2(a, b) {\n            switch (arguments.length) {\n            case 0:\n                return f2;\n            case 1:\n                return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n                    return fn(a, _b);\n                });\n            default:\n                return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n                    return fn(_a, b);\n                }) : _isPlaceholder(b) ? _curry1(function (_b) {\n                    return fn(a, _b);\n                }) : fn(a, b);\n            }\n        };\n    };\n\n    /**\n     * Optimized internal three-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry3 = function _curry3(fn) {\n        return function f3(a, b, c) {\n            switch (arguments.length) {\n            case 0:\n                return f3;\n            case 1:\n                return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {\n                    return fn(a, _b, _c);\n                });\n            case 2:\n                return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {\n                    return fn(_a, b, _c);\n                }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {\n                    return fn(a, _b, _c);\n                }) : _curry1(function (_c) {\n                    return fn(a, b, _c);\n                });\n            default:\n                return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {\n                    return fn(_a, _b, c);\n                }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {\n                    return fn(_a, b, _c);\n                }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {\n                    return fn(a, _b, _c);\n                }) : _isPlaceholder(a) ? _curry1(function (_a) {\n                    return fn(_a, b, c);\n                }) : _isPlaceholder(b) ? _curry1(function (_b) {\n                    return fn(a, _b, c);\n                }) : _isPlaceholder(c) ? _curry1(function (_c) {\n                    return fn(a, b, _c);\n                }) : fn(a, b, c);\n            }\n        };\n    };\n\n    /**\n     * Internal curryN function.\n     *\n     * @private\n     * @category Function\n     * @param {Number} length The arity of the curried function.\n     * @param {Array} received An array of arguments received thus far.\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curryN = function _curryN(length, received, fn) {\n        return function () {\n            var combined = [];\n            var argsIdx = 0;\n            var left = length;\n            var combinedIdx = 0;\n            while (combinedIdx < received.length || argsIdx < arguments.length) {\n                var result;\n                if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n                    result = received[combinedIdx];\n                } else {\n                    result = arguments[argsIdx];\n                    argsIdx += 1;\n                }\n                combined[combinedIdx] = result;\n                if (!_isPlaceholder(result)) {\n                    left -= 1;\n                }\n                combinedIdx += 1;\n            }\n            return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n        };\n    };\n\n    /**\n     * Returns a function that dispatches with different strategies based on the\n     * object in list position (last argument). If it is an array, executes [fn].\n     * Otherwise, if it has a function with [methodname], it will execute that\n     * function (functor case). Otherwise, if it is a transformer, uses transducer\n     * [xf] to return a new transformer (transducer case). Otherwise, it will\n     * default to executing [fn].\n     *\n     * @private\n     * @param {String} methodname property to check for a custom implementation\n     * @param {Function} xf transducer to initialize if object is transformer\n     * @param {Function} fn default ramda implementation\n     * @return {Function} A function that dispatches on object in list position\n     */\n    var _dispatchable = function _dispatchable(methodname, xf, fn) {\n        return function () {\n            var length = arguments.length;\n            if (length === 0) {\n                return fn();\n            }\n            var obj = arguments[length - 1];\n            if (!_isArray(obj)) {\n                var args = _slice(arguments, 0, length - 1);\n                if (typeof obj[methodname] === 'function') {\n                    return obj[methodname].apply(obj, args);\n                }\n                if (_isTransformer(obj)) {\n                    var transducer = xf.apply(null, args);\n                    return transducer(obj);\n                }\n            }\n            return fn.apply(this, arguments);\n        };\n    };\n\n    var _dropLastWhile = function dropLastWhile(pred, list) {\n        var idx = list.length - 1;\n        while (idx >= 0 && pred(list[idx])) {\n            idx -= 1;\n        }\n        return _slice(list, 0, idx + 1);\n    };\n\n    var _xall = function () {\n        function XAll(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.all = true;\n        }\n        XAll.prototype['@@transducer/init'] = _xfBase.init;\n        XAll.prototype['@@transducer/result'] = function (result) {\n            if (this.all) {\n                result = this.xf['@@transducer/step'](result, true);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XAll.prototype['@@transducer/step'] = function (result, input) {\n            if (!this.f(input)) {\n                this.all = false;\n                result = _reduced(this.xf['@@transducer/step'](result, false));\n            }\n            return result;\n        };\n        return _curry2(function _xall(f, xf) {\n            return new XAll(f, xf);\n        });\n    }();\n\n    var _xany = function () {\n        function XAny(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.any = false;\n        }\n        XAny.prototype['@@transducer/init'] = _xfBase.init;\n        XAny.prototype['@@transducer/result'] = function (result) {\n            if (!this.any) {\n                result = this.xf['@@transducer/step'](result, false);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XAny.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.any = true;\n                result = _reduced(this.xf['@@transducer/step'](result, true));\n            }\n            return result;\n        };\n        return _curry2(function _xany(f, xf) {\n            return new XAny(f, xf);\n        });\n    }();\n\n    var _xaperture = function () {\n        function XAperture(n, xf) {\n            this.xf = xf;\n            this.pos = 0;\n            this.full = false;\n            this.acc = new Array(n);\n        }\n        XAperture.prototype['@@transducer/init'] = _xfBase.init;\n        XAperture.prototype['@@transducer/result'] = function (result) {\n            this.acc = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XAperture.prototype['@@transducer/step'] = function (result, input) {\n            this.store(input);\n            return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;\n        };\n        XAperture.prototype.store = function (input) {\n            this.acc[this.pos] = input;\n            this.pos += 1;\n            if (this.pos === this.acc.length) {\n                this.pos = 0;\n                this.full = true;\n            }\n        };\n        XAperture.prototype.getCopy = function () {\n            return _concat(_slice(this.acc, this.pos), _slice(this.acc, 0, this.pos));\n        };\n        return _curry2(function _xaperture(n, xf) {\n            return new XAperture(n, xf);\n        });\n    }();\n\n    var _xdrop = function () {\n        function XDrop(n, xf) {\n            this.xf = xf;\n            this.n = n;\n        }\n        XDrop.prototype['@@transducer/init'] = _xfBase.init;\n        XDrop.prototype['@@transducer/result'] = _xfBase.result;\n        XDrop.prototype['@@transducer/step'] = function (result, input) {\n            if (this.n > 0) {\n                this.n -= 1;\n                return result;\n            }\n            return this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdrop(n, xf) {\n            return new XDrop(n, xf);\n        });\n    }();\n\n    var _xdropLast = function () {\n        function XDropLast(n, xf) {\n            this.xf = xf;\n            this.pos = 0;\n            this.full = false;\n            this.acc = new Array(n);\n        }\n        XDropLast.prototype['@@transducer/init'] = _xfBase.init;\n        XDropLast.prototype['@@transducer/result'] = function (result) {\n            this.acc = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XDropLast.prototype['@@transducer/step'] = function (result, input) {\n            if (this.full) {\n                result = this.xf['@@transducer/step'](result, this.acc[this.pos]);\n            }\n            this.store(input);\n            return result;\n        };\n        XDropLast.prototype.store = function (input) {\n            this.acc[this.pos] = input;\n            this.pos += 1;\n            if (this.pos === this.acc.length) {\n                this.pos = 0;\n                this.full = true;\n            }\n        };\n        return _curry2(function _xdropLast(n, xf) {\n            return new XDropLast(n, xf);\n        });\n    }();\n\n    var _xdropRepeatsWith = function () {\n        function XDropRepeatsWith(pred, xf) {\n            this.xf = xf;\n            this.pred = pred;\n            this.lastValue = undefined;\n            this.seenFirstValue = false;\n        }\n        XDropRepeatsWith.prototype['@@transducer/init'] = function () {\n            return this.xf['@@transducer/init']();\n        };\n        XDropRepeatsWith.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](result);\n        };\n        XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {\n            var sameAsLast = false;\n            if (!this.seenFirstValue) {\n                this.seenFirstValue = true;\n            } else if (this.pred(this.lastValue, input)) {\n                sameAsLast = true;\n            }\n            this.lastValue = input;\n            return sameAsLast ? result : this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdropRepeatsWith(pred, xf) {\n            return new XDropRepeatsWith(pred, xf);\n        });\n    }();\n\n    var _xdropWhile = function () {\n        function XDropWhile(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XDropWhile.prototype['@@transducer/init'] = _xfBase.init;\n        XDropWhile.prototype['@@transducer/result'] = _xfBase.result;\n        XDropWhile.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f) {\n                if (this.f(input)) {\n                    return result;\n                }\n                this.f = null;\n            }\n            return this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdropWhile(f, xf) {\n            return new XDropWhile(f, xf);\n        });\n    }();\n\n    var _xfilter = function () {\n        function XFilter(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XFilter.prototype['@@transducer/init'] = _xfBase.init;\n        XFilter.prototype['@@transducer/result'] = _xfBase.result;\n        XFilter.prototype['@@transducer/step'] = function (result, input) {\n            return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n        };\n        return _curry2(function _xfilter(f, xf) {\n            return new XFilter(f, xf);\n        });\n    }();\n\n    var _xfind = function () {\n        function XFind(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.found = false;\n        }\n        XFind.prototype['@@transducer/init'] = _xfBase.init;\n        XFind.prototype['@@transducer/result'] = function (result) {\n            if (!this.found) {\n                result = this.xf['@@transducer/step'](result, void 0);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XFind.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.found = true;\n                result = _reduced(this.xf['@@transducer/step'](result, input));\n            }\n            return result;\n        };\n        return _curry2(function _xfind(f, xf) {\n            return new XFind(f, xf);\n        });\n    }();\n\n    var _xfindIndex = function () {\n        function XFindIndex(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.idx = -1;\n            this.found = false;\n        }\n        XFindIndex.prototype['@@transducer/init'] = _xfBase.init;\n        XFindIndex.prototype['@@transducer/result'] = function (result) {\n            if (!this.found) {\n                result = this.xf['@@transducer/step'](result, -1);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XFindIndex.prototype['@@transducer/step'] = function (result, input) {\n            this.idx += 1;\n            if (this.f(input)) {\n                this.found = true;\n                result = _reduced(this.xf['@@transducer/step'](result, this.idx));\n            }\n            return result;\n        };\n        return _curry2(function _xfindIndex(f, xf) {\n            return new XFindIndex(f, xf);\n        });\n    }();\n\n    var _xfindLast = function () {\n        function XFindLast(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XFindLast.prototype['@@transducer/init'] = _xfBase.init;\n        XFindLast.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));\n        };\n        XFindLast.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.last = input;\n            }\n            return result;\n        };\n        return _curry2(function _xfindLast(f, xf) {\n            return new XFindLast(f, xf);\n        });\n    }();\n\n    var _xfindLastIndex = function () {\n        function XFindLastIndex(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.idx = -1;\n            this.lastIdx = -1;\n        }\n        XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;\n        XFindLastIndex.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));\n        };\n        XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {\n            this.idx += 1;\n            if (this.f(input)) {\n                this.lastIdx = this.idx;\n            }\n            return result;\n        };\n        return _curry2(function _xfindLastIndex(f, xf) {\n            return new XFindLastIndex(f, xf);\n        });\n    }();\n\n    var _xmap = function () {\n        function XMap(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XMap.prototype['@@transducer/init'] = _xfBase.init;\n        XMap.prototype['@@transducer/result'] = _xfBase.result;\n        XMap.prototype['@@transducer/step'] = function (result, input) {\n            return this.xf['@@transducer/step'](result, this.f(input));\n        };\n        return _curry2(function _xmap(f, xf) {\n            return new XMap(f, xf);\n        });\n    }();\n\n    var _xreduceBy = function () {\n        function XReduceBy(valueFn, valueAcc, keyFn, xf) {\n            this.valueFn = valueFn;\n            this.valueAcc = valueAcc;\n            this.keyFn = keyFn;\n            this.xf = xf;\n            this.inputs = {};\n        }\n        XReduceBy.prototype['@@transducer/init'] = _xfBase.init;\n        XReduceBy.prototype['@@transducer/result'] = function (result) {\n            var key;\n            for (key in this.inputs) {\n                if (_has(key, this.inputs)) {\n                    result = this.xf['@@transducer/step'](result, this.inputs[key]);\n                    if (result['@@transducer/reduced']) {\n                        result = result['@@transducer/value'];\n                        break;\n                    }\n                }\n            }\n            this.inputs = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XReduceBy.prototype['@@transducer/step'] = function (result, input) {\n            var key = this.keyFn(input);\n            this.inputs[key] = this.inputs[key] || [\n                key,\n                this.valueAcc\n            ];\n            this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);\n            return result;\n        };\n        return _curryN(4, [], function _xreduceBy(valueFn, valueAcc, keyFn, xf) {\n            return new XReduceBy(valueFn, valueAcc, keyFn, xf);\n        });\n    }();\n\n    var _xtake = function () {\n        function XTake(n, xf) {\n            this.xf = xf;\n            this.n = n;\n            this.i = 0;\n        }\n        XTake.prototype['@@transducer/init'] = _xfBase.init;\n        XTake.prototype['@@transducer/result'] = _xfBase.result;\n        XTake.prototype['@@transducer/step'] = function (result, input) {\n            this.i += 1;\n            var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);\n            return this.i >= this.n ? _reduced(ret) : ret;\n        };\n        return _curry2(function _xtake(n, xf) {\n            return new XTake(n, xf);\n        });\n    }();\n\n    var _xtakeWhile = function () {\n        function XTakeWhile(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;\n        XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;\n        XTakeWhile.prototype['@@transducer/step'] = function (result, input) {\n            return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);\n        };\n        return _curry2(function _xtakeWhile(f, xf) {\n            return new XTakeWhile(f, xf);\n        });\n    }();\n\n    /**\n     * Adds two values.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Number}\n     * @see R.subtract\n     * @example\n     *\n     *      R.add(2, 3);       //=>  5\n     *      R.add(7)(10);      //=> 17\n     */\n    var add = _curry2(function add(a, b) {\n        return Number(a) + Number(b);\n    });\n\n    /**\n     * Applies a function to the value at the given index of an array, returning a\n     * new copy of the array with the element at the given index replaced with the\n     * result of the function application.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig (a -> a) -> Number -> [a] -> [a]\n     * @param {Function} fn The function to apply.\n     * @param {Number} idx The index.\n     * @param {Array|Arguments} list An array-like object whose value\n     *        at the supplied index will be replaced.\n     * @return {Array} A copy of the supplied array-like object with\n     *         the element at index `idx` replaced with the value\n     *         returned by applying `fn` to the existing element.\n     * @see R.update\n     * @example\n     *\n     *      R.adjust(R.add(10), 1, [0, 1, 2]);     //=> [0, 11, 2]\n     *      R.adjust(R.add(10))(1)([0, 1, 2]);     //=> [0, 11, 2]\n     */\n    var adjust = _curry3(function adjust(fn, idx, list) {\n        if (idx >= list.length || idx < -list.length) {\n            return list;\n        }\n        var start = idx < 0 ? list.length : 0;\n        var _idx = start + idx;\n        var _list = _concat(list);\n        _list[_idx] = fn(list[_idx]);\n        return _list;\n    });\n\n    /**\n     * Returns `true` if all elements of the list match the predicate, `false` if\n     * there are any that don't.\n     *\n     * Dispatches to the `all` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is satisfied by every element, `false`\n     *         otherwise.\n     * @see R.any, R.none, R.transduce\n     * @example\n     *\n     *      var lessThan2 = R.flip(R.lt)(2);\n     *      var lessThan3 = R.flip(R.lt)(3);\n     *      R.all(lessThan2)([1, 2]); //=> false\n     *      R.all(lessThan3)([1, 2]); //=> true\n     */\n    var all = _curry2(_dispatchable('all', _xall, function all(fn, list) {\n        var idx = 0;\n        while (idx < list.length) {\n            if (!fn(list[idx])) {\n                return false;\n            }\n            idx += 1;\n        }\n        return true;\n    }));\n\n    /**\n     * Returns a function that always returns the given value. Note that for\n     * non-primitives the value returned is a reference to the original value.\n     *\n     * This function is known as `const`, `constant`, or `K` (for K combinator) in\n     * other languages and libraries.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig a -> (* -> a)\n     * @param {*} val The value to wrap in a function\n     * @return {Function} A Function :: * -> val.\n     * @example\n     *\n     *      var t = R.always('Tee');\n     *      t(); //=> 'Tee'\n     */\n    var always = _curry1(function always(val) {\n        return function () {\n            return val;\n        };\n    });\n\n    /**\n     * Returns `true` if both arguments are `true`; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> * -> *\n     * @param {Boolean} a A boolean value\n     * @param {Boolean} b A boolean value\n     * @return {Boolean} `true` if both arguments are `true`, `false` otherwise\n     * @see R.both\n     * @example\n     *\n     *      R.and(true, true); //=> true\n     *      R.and(true, false); //=> false\n     *      R.and(false, true); //=> false\n     *      R.and(false, false); //=> false\n     */\n    var and = _curry2(function and(a, b) {\n        return a && b;\n    });\n\n    /**\n     * Returns `true` if at least one of elements of the list match the predicate,\n     * `false` otherwise.\n     *\n     * Dispatches to the `any` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\n     *         otherwise.\n     * @see R.all, R.none, R.transduce\n     * @example\n     *\n     *      var lessThan0 = R.flip(R.lt)(0);\n     *      var lessThan2 = R.flip(R.lt)(2);\n     *      R.any(lessThan0)([1, 2]); //=> false\n     *      R.any(lessThan2)([1, 2]); //=> true\n     */\n    var any = _curry2(_dispatchable('any', _xany, function any(fn, list) {\n        var idx = 0;\n        while (idx < list.length) {\n            if (fn(list[idx])) {\n                return true;\n            }\n            idx += 1;\n        }\n        return false;\n    }));\n\n    /**\n     * Returns a new list, composed of n-tuples of consecutive elements If `n` is\n     * greater than the length of the list, an empty list is returned.\n     *\n     * Dispatches to the `aperture` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig Number -> [a] -> [[a]]\n     * @param {Number} n The size of the tuples to create\n     * @param {Array} list The list to split into `n`-tuples\n     * @return {Array} The new list.\n     * @see R.transduce\n     * @example\n     *\n     *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n     *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n     *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n     */\n    var aperture = _curry2(_dispatchable('aperture', _xaperture, _aperture));\n\n    /**\n     * Returns a new list containing the contents of the given list, followed by\n     * the given element.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} el The element to add to the end of the new list.\n     * @param {Array} list The list whose contents will be added to the beginning of the output\n     *        list.\n     * @return {Array} A new list containing the contents of the old list followed by `el`.\n     * @see R.prepend\n     * @example\n     *\n     *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n     *      R.append('tests', []); //=> ['tests']\n     *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n     */\n    var append = _curry2(function append(el, list) {\n        return _concat(list, [el]);\n    });\n\n    /**\n     * Applies function `fn` to the argument list `args`. This is useful for\n     * creating a fixed-arity function from a variadic function. `fn` should be a\n     * bound function if context is significant.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Function\n     * @sig (*... -> a) -> [*] -> a\n     * @param {Function} fn\n     * @param {Array} args\n     * @return {*}\n     * @see R.call, R.unapply\n     * @example\n     *\n     *      var nums = [1, 2, 3, -99, 42, 6, 7];\n     *      R.apply(Math.max, nums); //=> 42\n     */\n    var apply = _curry2(function apply(fn, args) {\n        return fn.apply(this, args);\n    });\n\n    /**\n     * Makes a shallow clone of an object, setting or overriding the specified\n     * property with the given value. Note that this copies and flattens prototype\n     * properties onto the new object as well. All non-primitive properties are\n     * copied by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig String -> a -> {k: v} -> {k: v}\n     * @param {String} prop the property name to set\n     * @param {*} val the new value\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original except for the specified property.\n     * @see R.dissoc\n     * @example\n     *\n     *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n     */\n    var assoc = _curry3(function assoc(prop, val, obj) {\n        var result = {};\n        for (var p in obj) {\n            result[p] = obj[p];\n        }\n        result[prop] = val;\n        return result;\n    });\n\n    /**\n     * Makes a shallow clone of an object, setting or overriding the nodes required\n     * to create the given path, and placing the specific value at the tail end of\n     * that path. Note that this copies and flattens prototype properties onto the\n     * new object as well. All non-primitive properties are copied by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig [String] -> a -> {k: v} -> {k: v}\n     * @param {Array} path the path to set\n     * @param {*} val the new value\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original except along the specified path.\n     * @see R.dissocPath\n     * @example\n     *\n     *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\n     */\n    var assocPath = _curry3(function assocPath(path, val, obj) {\n        switch (path.length) {\n        case 0:\n            return val;\n        case 1:\n            return assoc(path[0], val, obj);\n        default:\n            return assoc(path[0], assocPath(_slice(path, 1), val, Object(obj[path[0]])), obj);\n        }\n    });\n\n    /**\n     * Creates a function that is bound to a context.\n     * Note: `R.bind` does not provide the additional argument-binding capabilities of\n     * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Function\n     * @category Object\n     * @sig (* -> *) -> {*} -> (* -> *)\n     * @param {Function} fn The function to bind to context\n     * @param {Object} thisObj The context to bind `fn` to\n     * @return {Function} A function that will execute in the context of `thisObj`.\n     * @see R.partial\n     * @example\n     *\n     *      var log = R.bind(console.log, console);\n     *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n     *      // logs {a: 2}\n     */\n    var bind = _curry2(function bind(fn, thisObj) {\n        return _arity(fn.length, function () {\n            return fn.apply(thisObj, arguments);\n        });\n    });\n\n    /**\n     * Restricts a number to be within a range.\n     *\n     * Also works for other ordered types such as Strings and Dates.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category Relation\n     * @sig Ord a => a -> a -> a -> a\n     * @param {Number} minimum number\n     * @param {Number} maximum number\n     * @param {Number} value to be clamped\n     * @return {Number} Returns the clamped value\n     * @example\n     *\n     *      R.clamp(1, 10, -1) // => 1\n     *      R.clamp(1, 10, 11) // => 10\n     *      R.clamp(1, 10, 4)  // => 4\n     */\n    var clamp = _curry3(function clamp(min, max, value) {\n        if (min > max) {\n            throw new Error('min must not be greater than max in clamp(min, max, value)');\n        }\n        return value < min ? min : value > max ? max : value;\n    });\n\n    /**\n     * Makes a comparator function out of a function that reports whether the first\n     * element is less than the second.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a, b -> Boolean) -> (a, b -> Number)\n     * @param {Function} pred A predicate function of arity two.\n     * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`.\n     * @example\n     *\n     *      var cmp = R.comparator((a, b) => a.age < b.age);\n     *      var people = [\n     *        // ...\n     *      ];\n     *      R.sort(cmp, people);\n     */\n    var comparator = _curry1(function comparator(pred) {\n        return function (a, b) {\n            return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;\n        };\n    });\n\n    /**\n     * Returns a curried equivalent of the provided function, with the specified\n     * arity. The curried function has two unusual capabilities. First, its\n     * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n     * following are equivalent:\n     *\n     *   - `g(1)(2)(3)`\n     *   - `g(1)(2, 3)`\n     *   - `g(1, 2)(3)`\n     *   - `g(1, 2, 3)`\n     *\n     * Secondly, the special placeholder value `R.__` may be used to specify\n     * \"gaps\", allowing partial application of any combination of arguments,\n     * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n     * following are equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @func\n     * @memberOf R\n     * @since v0.5.0\n     * @category Function\n     * @sig Number -> (* -> a) -> (* -> a)\n     * @param {Number} length The arity for the returned function.\n     * @param {Function} fn The function to curry.\n     * @return {Function} A new, curried function.\n     * @see R.curry\n     * @example\n     *\n     *      var sumArgs = (...args) => R.sum(args);\n     *\n     *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n     *      var f = curriedAddFourNumbers(1, 2);\n     *      var g = f(3);\n     *      g(4); //=> 10\n     */\n    var curryN = _curry2(function curryN(length, fn) {\n        if (length === 1) {\n            return _curry1(fn);\n        }\n        return _arity(length, _curryN(length, [], fn));\n    });\n\n    /**\n     * Decrements its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @see R.inc\n     * @example\n     *\n     *      R.dec(42); //=> 41\n     */\n    var dec = add(-1);\n\n    /**\n     * Returns the second argument if it is not `null`, `undefined` or `NaN`\n     * otherwise the first argument is returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Logic\n     * @sig a -> b -> a | b\n     * @param {a} val The default value.\n     * @param {b} val The value to return if it is not null or undefined\n     * @return {*} The the second value or the default value\n     * @example\n     *\n     *      var defaultTo42 = R.defaultTo(42);\n     *\n     *      defaultTo42(null);  //=> 42\n     *      defaultTo42(undefined);  //=> 42\n     *      defaultTo42('Ramda');  //=> 'Ramda'\n     *      defaultTo42(parseInt('string')); //=> 42\n     */\n    var defaultTo = _curry2(function defaultTo(d, v) {\n        return v == null || v !== v ? d : v;\n    });\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements in the first list not\n     * contained in the second list. Duplication is determined according to the\n     * value returned by applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` that are not in `list2`.\n     * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith\n     * @example\n     *\n     *      var cmp = (x, y) => x.a === y.a;\n     *      var l1 = [{a: 1}, {a: 2}, {a: 3}];\n     *      var l2 = [{a: 3}, {a: 4}];\n     *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n     */\n    var differenceWith = _curry3(function differenceWith(pred, first, second) {\n        var out = [];\n        var idx = 0;\n        var firstLen = first.length;\n        while (idx < firstLen) {\n            if (!_containsWith(pred, first[idx], second) && !_containsWith(pred, first[idx], out)) {\n                out.push(first[idx]);\n            }\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new object that does not contain a `prop` property.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Object\n     * @sig String -> {k: v} -> {k: v}\n     * @param {String} prop the name of the property to dissociate\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original but without the specified property\n     * @see R.assoc\n     * @example\n     *\n     *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}\n     */\n    var dissoc = _curry2(function dissoc(prop, obj) {\n        var result = {};\n        for (var p in obj) {\n            if (p !== prop) {\n                result[p] = obj[p];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Makes a shallow clone of an object, omitting the property at the given path.\n     * Note that this copies and flattens prototype properties onto the new object\n     * as well. All non-primitive properties are copied by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.11.0\n     * @category Object\n     * @sig [String] -> {k: v} -> {k: v}\n     * @param {Array} path the path to set\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object without the property at path\n     * @see R.assocPath\n     * @example\n     *\n     *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}\n     */\n    var dissocPath = _curry2(function dissocPath(path, obj) {\n        switch (path.length) {\n        case 0:\n            return obj;\n        case 1:\n            return dissoc(path[0], obj);\n        default:\n            var head = path[0];\n            var tail = _slice(path, 1);\n            return obj[head] == null ? obj : assoc(head, dissocPath(tail, obj[head]), obj);\n        }\n    });\n\n    /**\n     * Divides two numbers. Equivalent to `a / b`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a / b`.\n     * @see R.multiply\n     * @example\n     *\n     *      R.divide(71, 100); //=> 0.71\n     *\n     *      var half = R.divide(R.__, 2);\n     *      half(42); //=> 21\n     *\n     *      var reciprocal = R.divide(1);\n     *      reciprocal(4);   //=> 0.25\n     */\n    var divide = _curry2(function divide(a, b) {\n        return a / b;\n    });\n\n    /**\n     * Returns a new list excluding the leading elements of a given list which\n     * satisfy the supplied predicate function. It passes each value to the supplied\n     * predicate function, skipping elements while the predicate function returns\n     * `true`. The predicate function is applied to one argument: *(value)*.\n     *\n     * Dispatches to the `dropWhile` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.takeWhile, R.transduce, R.addIndex\n     * @example\n     *\n     *      var lteTwo = x => x <= 2;\n     *\n     *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n     */\n    var dropWhile = _curry2(_dispatchable('dropWhile', _xdropWhile, function dropWhile(pred, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len && pred(list[idx])) {\n            idx += 1;\n        }\n        return _slice(list, idx);\n    }));\n\n    /**\n     * Returns the empty value of its argument's type. Ramda defines the empty\n     * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other\n     * types are supported if they define `<Type>.empty` and/or\n     * `<Type>.prototype.empty`.\n     *\n     * Dispatches to the `empty` method of the first argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig a -> a\n     * @param {*} x\n     * @return {*}\n     * @example\n     *\n     *      R.empty(Just(42));      //=> Nothing()\n     *      R.empty([1, 2, 3]);     //=> []\n     *      R.empty('unicorns');    //=> ''\n     *      R.empty({x: 1, y: 2});  //=> {}\n     */\n    // else\n    var empty = _curry1(function empty(x) {\n        return x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {\n            return arguments;\n        }() : // else\n        void 0;\n    });\n\n    /**\n     * Creates a new object by recursively evolving a shallow copy of `object`,\n     * according to the `transformation` functions. All non-primitive properties\n     * are copied by reference.\n     *\n     * A `transformation` function will not be invoked if its corresponding key\n     * does not exist in the evolved object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {k: (v -> v)} -> {k: v} -> {k: v}\n     * @param {Object} transformations The object specifying transformation functions to apply\n     *        to the object.\n     * @param {Object} object The object to be transformed.\n     * @return {Object} The transformed object.\n     * @example\n     *\n     *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\n     *      var transformations = {\n     *        firstName: R.trim,\n     *        lastName: R.trim, // Will not get invoked.\n     *        data: {elapsed: R.add(1), remaining: R.add(-1)}\n     *      };\n     *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\n     */\n    var evolve = _curry2(function evolve(transformations, object) {\n        var result = {};\n        var transformation, key, type;\n        for (key in object) {\n            transformation = transformations[key];\n            type = typeof transformation;\n            result[key] = type === 'function' ? transformation(object[key]) : type === 'object' ? evolve(transformations[key], object[key]) : object[key];\n        }\n        return result;\n    });\n\n    /**\n     * Returns the first element of the list which matches the predicate, or\n     * `undefined` if no element matches.\n     *\n     * Dispatches to the `find` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> a | undefined\n     * @param {Function} fn The predicate function used to determine if the element is the\n     *        desired one.\n     * @param {Array} list The array to consider.\n     * @return {Object} The element found, or `undefined`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n     *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}\n     *      R.find(R.propEq('a', 4))(xs); //=> undefined\n     */\n    var find = _curry2(_dispatchable('find', _xfind, function find(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            if (fn(list[idx])) {\n                return list[idx];\n            }\n            idx += 1;\n        }\n    }));\n\n    /**\n     * Returns the index of the first element of the list which matches the\n     * predicate, or `-1` if no element matches.\n     *\n     * Dispatches to the `findIndex` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Number\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Number} The index of the element found, or `-1`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n     *      R.findIndex(R.propEq('a', 2))(xs); //=> 1\n     *      R.findIndex(R.propEq('a', 4))(xs); //=> -1\n     */\n    var findIndex = _curry2(_dispatchable('findIndex', _xfindIndex, function findIndex(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            if (fn(list[idx])) {\n                return idx;\n            }\n            idx += 1;\n        }\n        return -1;\n    }));\n\n    /**\n     * Returns the last element of the list which matches the predicate, or\n     * `undefined` if no element matches.\n     *\n     * Dispatches to the `findLast` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> a | undefined\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Object} The element found, or `undefined`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n     *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}\n     *      R.findLast(R.propEq('a', 4))(xs); //=> undefined\n     */\n    var findLast = _curry2(_dispatchable('findLast', _xfindLast, function findLast(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            if (fn(list[idx])) {\n                return list[idx];\n            }\n            idx -= 1;\n        }\n    }));\n\n    /**\n     * Returns the index of the last element of the list which matches the\n     * predicate, or `-1` if no element matches.\n     *\n     * Dispatches to the `findLastIndex` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Number\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Number} The index of the element found, or `-1`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n     *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1\n     *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1\n     */\n    var findLastIndex = _curry2(_dispatchable('findLastIndex', _xfindLastIndex, function findLastIndex(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            if (fn(list[idx])) {\n                return idx;\n            }\n            idx -= 1;\n        }\n        return -1;\n    }));\n\n    /**\n     * Iterate over an input `list`, calling a provided function `fn` for each\n     * element in the list.\n     *\n     * `fn` receives one argument: *(value)*.\n     *\n     * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n     * arrays), unlike the native `Array.prototype.forEach` method. For more\n     * details on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n     *\n     * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n     * the original array. In some libraries this function is named `each`.\n     *\n     * Dispatches to the `forEach` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> *) -> [a] -> [a]\n     * @param {Function} fn The function to invoke. Receives one argument, `value`.\n     * @param {Array} list The list to iterate over.\n     * @return {Array} The original list.\n     * @see R.addIndex\n     * @example\n     *\n     *      var printXPlusFive = x => console.log(x + 5);\n     *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n     *      // logs 6\n     *      // logs 7\n     *      // logs 8\n     */\n    var forEach = _curry2(_checkForMethod('forEach', function forEach(fn, list) {\n        var len = list.length;\n        var idx = 0;\n        while (idx < len) {\n            fn(list[idx]);\n            idx += 1;\n        }\n        return list;\n    }));\n\n    /**\n     * Creates a new object from a list key-value pairs. If a key appears in\n     * multiple pairs, the rightmost pair is included in the object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [[k,v]] -> {k: v}\n     * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n     * @return {Object} The object made by pairing up `keys` and `values`.\n     * @see R.toPairs, R.pair\n     * @example\n     *\n     *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n     */\n    var fromPairs = _curry1(function fromPairs(pairs) {\n        var result = {};\n        var idx = 0;\n        while (idx < pairs.length) {\n            result[pairs[idx][0]] = pairs[idx][1];\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Takes a list and returns a list of lists where each sublist's elements are\n     * all \"equal\" according to the provided equality function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.21.0\n     * @category List\n     * @sig ((a, a) → Boolean) → [a] → [[a]]\n     * @param {Function} fn Function for determining whether two given (adjacent)\n     *        elements should be in the same group\n     * @param {Array} list The array to group. Also accepts a string, which will be\n     *        treated as a list of characters.\n     * @return {List} A list that contains sublists of equal elements,\n     *         whose concatenations are equal to the original list.\n     * @example\n     *\n     * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n     * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]\n     *\n     * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n     * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]\n     *\n     * R.groupWith(R.eqBy(isVowel), 'aestiou')\n     * //=> ['ae', 'st', 'iou']\n     */\n    var groupWith = _curry2(function (fn, list) {\n        var res = [];\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            var nextidx = idx + 1;\n            while (nextidx < len && fn(list[idx], list[nextidx])) {\n                nextidx += 1;\n            }\n            res.push(list.slice(idx, nextidx));\n            idx = nextidx;\n        }\n        return res;\n    });\n\n    /**\n     * Returns `true` if the first argument is greater than the second; `false`\n     * otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @see R.lt\n     * @example\n     *\n     *      R.gt(2, 1); //=> true\n     *      R.gt(2, 2); //=> false\n     *      R.gt(2, 3); //=> false\n     *      R.gt('a', 'z'); //=> false\n     *      R.gt('z', 'a'); //=> true\n     */\n    var gt = _curry2(function gt(a, b) {\n        return a > b;\n    });\n\n    /**\n     * Returns `true` if the first argument is greater than or equal to the second;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Boolean}\n     * @see R.lte\n     * @example\n     *\n     *      R.gte(2, 1); //=> true\n     *      R.gte(2, 2); //=> true\n     *      R.gte(2, 3); //=> false\n     *      R.gte('a', 'z'); //=> false\n     *      R.gte('z', 'a'); //=> true\n     */\n    var gte = _curry2(function gte(a, b) {\n        return a >= b;\n    });\n\n    /**\n     * Returns whether or not an object has an own property with the specified name\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Object\n     * @sig s -> {s: x} -> Boolean\n     * @param {String} prop The name of the property to check for.\n     * @param {Object} obj The object to query.\n     * @return {Boolean} Whether the property exists.\n     * @example\n     *\n     *      var hasName = R.has('name');\n     *      hasName({name: 'alice'});   //=> true\n     *      hasName({name: 'bob'});     //=> true\n     *      hasName({});                //=> false\n     *\n     *      var point = {x: 0, y: 0};\n     *      var pointHas = R.has(R.__, point);\n     *      pointHas('x');  //=> true\n     *      pointHas('y');  //=> true\n     *      pointHas('z');  //=> false\n     */\n    var has = _curry2(_has);\n\n    /**\n     * Returns whether or not an object or its prototype chain has a property with\n     * the specified name\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Object\n     * @sig s -> {s: x} -> Boolean\n     * @param {String} prop The name of the property to check for.\n     * @param {Object} obj The object to query.\n     * @return {Boolean} Whether the property exists.\n     * @example\n     *\n     *      function Rectangle(width, height) {\n     *        this.width = width;\n     *        this.height = height;\n     *      }\n     *      Rectangle.prototype.area = function() {\n     *        return this.width * this.height;\n     *      };\n     *\n     *      var square = new Rectangle(2, 2);\n     *      R.hasIn('width', square);  //=> true\n     *      R.hasIn('area', square);  //=> true\n     */\n    var hasIn = _curry2(function hasIn(prop, obj) {\n        return prop in obj;\n    });\n\n    /**\n     * Returns true if its arguments are identical, false otherwise. Values are\n     * identical if they reference the same memory. `NaN` is identical to `NaN`;\n     * `0` and `-0` are not identical.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Relation\n     * @sig a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @example\n     *\n     *      var o = {};\n     *      R.identical(o, o); //=> true\n     *      R.identical(1, 1); //=> true\n     *      R.identical(1, '1'); //=> false\n     *      R.identical([], []); //=> false\n     *      R.identical(0, -0); //=> false\n     *      R.identical(NaN, NaN); //=> true\n     */\n    // SameValue algorithm\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    // Step 6.a: NaN == NaN\n    var identical = _curry2(function identical(a, b) {\n        // SameValue algorithm\n        if (a === b) {\n            // Steps 1-5, 7-10\n            // Steps 6.b-6.e: +0 != -0\n            return a !== 0 || 1 / a === 1 / b;\n        } else {\n            // Step 6.a: NaN == NaN\n            return a !== a && b !== b;\n        }\n    });\n\n    /**\n     * A function that does nothing but return the parameter supplied to it. Good\n     * as a default or placeholder function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig a -> a\n     * @param {*} x The value to return.\n     * @return {*} The input value, `x`.\n     * @example\n     *\n     *      R.identity(1); //=> 1\n     *\n     *      var obj = {};\n     *      R.identity(obj) === obj; //=> true\n     */\n    var identity = _curry1(_identity);\n\n    /**\n     * Creates a function that will process either the `onTrue` or the `onFalse`\n     * function depending upon the result of the `condition` predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Logic\n     * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\n     * @param {Function} condition A predicate function\n     * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n     * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n     * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`\n     *                    function depending upon the result of the `condition` predicate.\n     * @see R.unless, R.when\n     * @example\n     *\n     *      var incCount = R.ifElse(\n     *        R.has('count'),\n     *        R.over(R.lensProp('count'), R.inc),\n     *        R.assoc('count', 1)\n     *      );\n     *      incCount({});           //=> { count: 1 }\n     *      incCount({ count: 1 }); //=> { count: 2 }\n     */\n    var ifElse = _curry3(function ifElse(condition, onTrue, onFalse) {\n        return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {\n            return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);\n        });\n    });\n\n    /**\n     * Increments its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @see R.dec\n     * @example\n     *\n     *      R.inc(42); //=> 43\n     */\n    var inc = add(1);\n\n    /**\n     * Inserts the supplied element into the list, at index `index`. _Note that\n     * this is not destructive_: it returns a copy of the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.2\n     * @category List\n     * @sig Number -> a -> [a] -> [a]\n     * @param {Number} index The position to insert the element\n     * @param {*} elt The element to insert into the Array\n     * @param {Array} list The list to insert into\n     * @return {Array} A new Array with `elt` inserted at `index`.\n     * @example\n     *\n     *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]\n     */\n    var insert = _curry3(function insert(idx, elt, list) {\n        idx = idx < list.length && idx >= 0 ? idx : list.length;\n        var result = _slice(list);\n        result.splice(idx, 0, elt);\n        return result;\n    });\n\n    /**\n     * Inserts the sub-list into the list, at index `index`. _Note that this is not\n     * destructive_: it returns a copy of the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @sig Number -> [a] -> [a] -> [a]\n     * @param {Number} index The position to insert the sub-list\n     * @param {Array} elts The sub-list to insert into the Array\n     * @param {Array} list The list to insert the sub-list into\n     * @return {Array} A new Array with `elts` inserted starting at `index`.\n     * @example\n     *\n     *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]\n     */\n    var insertAll = _curry3(function insertAll(idx, elts, list) {\n        idx = idx < list.length && idx >= 0 ? idx : list.length;\n        return _concat(_concat(_slice(list, 0, idx), elts), _slice(list, idx));\n    });\n\n    /**\n     * Creates a new list with the separator interposed between elements.\n     *\n     * Dispatches to the `intersperse` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} separator The element to add to the list.\n     * @param {Array} list The list to be interposed.\n     * @return {Array} The new list.\n     * @example\n     *\n     *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']\n     */\n    var intersperse = _curry2(_checkForMethod('intersperse', function intersperse(separator, list) {\n        var out = [];\n        var idx = 0;\n        var length = list.length;\n        while (idx < length) {\n            if (idx === length - 1) {\n                out.push(list[idx]);\n            } else {\n                out.push(list[idx], separator);\n            }\n            idx += 1;\n        }\n        return out;\n    }));\n\n    /**\n     * See if an object (`val`) is an instance of the supplied constructor. This\n     * function will check up the inheritance chain, if any.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Type\n     * @sig (* -> {*}) -> a -> Boolean\n     * @param {Object} ctor A constructor\n     * @param {*} val The value to test\n     * @return {Boolean}\n     * @example\n     *\n     *      R.is(Object, {}); //=> true\n     *      R.is(Number, 1); //=> true\n     *      R.is(Object, 1); //=> false\n     *      R.is(String, 's'); //=> true\n     *      R.is(String, new String('')); //=> true\n     *      R.is(Object, new String('')); //=> true\n     *      R.is(Object, 's'); //=> false\n     *      R.is(Number, {}); //=> false\n     */\n    var is = _curry2(function is(Ctor, val) {\n        return val != null && val.constructor === Ctor || val instanceof Ctor;\n    });\n\n    /**\n     * Tests whether or not an object is similar to an array.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.5.0\n     * @category Type\n     * @category List\n     * @sig * -> Boolean\n     * @param {*} x The object to test.\n     * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n     * @example\n     *\n     *      R.isArrayLike([]); //=> true\n     *      R.isArrayLike(true); //=> false\n     *      R.isArrayLike({}); //=> false\n     *      R.isArrayLike({length: 10}); //=> false\n     *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n     */\n    var isArrayLike = _curry1(function isArrayLike(x) {\n        if (_isArray(x)) {\n            return true;\n        }\n        if (!x) {\n            return false;\n        }\n        if (typeof x !== 'object') {\n            return false;\n        }\n        if (_isString(x)) {\n            return false;\n        }\n        if (x.nodeType === 1) {\n            return !!x.length;\n        }\n        if (x.length === 0) {\n            return true;\n        }\n        if (x.length > 0) {\n            return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n        }\n        return false;\n    });\n\n    /**\n     * Checks if the input value is `null` or `undefined`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Type\n     * @sig * -> Boolean\n     * @param {*} x The value to test.\n     * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n     * @example\n     *\n     *      R.isNil(null); //=> true\n     *      R.isNil(undefined); //=> true\n     *      R.isNil(0); //=> false\n     *      R.isNil([]); //=> false\n     */\n    var isNil = _curry1(function isNil(x) {\n        return x == null;\n    });\n\n    /**\n     * Returns a list containing the names of all the enumerable own properties of\n     * the supplied object.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> [k]\n     * @param {Object} obj The object to extract properties from\n     * @return {Array} An array of the object's own properties.\n     * @example\n     *\n     *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n     */\n    // cover IE < 9 keys issues\n    // Safari bug\n    var keys = function () {\n        // cover IE < 9 keys issues\n        var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');\n        var nonEnumerableProps = [\n            'constructor',\n            'valueOf',\n            'isPrototypeOf',\n            'toString',\n            'propertyIsEnumerable',\n            'hasOwnProperty',\n            'toLocaleString'\n        ];\n        // Safari bug\n        var hasArgsEnumBug = function () {\n            'use strict';\n            return arguments.propertyIsEnumerable('length');\n        }();\n        var contains = function contains(list, item) {\n            var idx = 0;\n            while (idx < list.length) {\n                if (list[idx] === item) {\n                    return true;\n                }\n                idx += 1;\n            }\n            return false;\n        };\n        return typeof Object.keys === 'function' && !hasArgsEnumBug ? _curry1(function keys(obj) {\n            return Object(obj) !== obj ? [] : Object.keys(obj);\n        }) : _curry1(function keys(obj) {\n            if (Object(obj) !== obj) {\n                return [];\n            }\n            var prop, nIdx;\n            var ks = [];\n            var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n            for (prop in obj) {\n                if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n                    ks[ks.length] = prop;\n                }\n            }\n            if (hasEnumBug) {\n                nIdx = nonEnumerableProps.length - 1;\n                while (nIdx >= 0) {\n                    prop = nonEnumerableProps[nIdx];\n                    if (_has(prop, obj) && !contains(ks, prop)) {\n                        ks[ks.length] = prop;\n                    }\n                    nIdx -= 1;\n                }\n            }\n            return ks;\n        });\n    }();\n\n    /**\n     * Returns a list containing the names of all the properties of the supplied\n     * object, including prototype properties.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig {k: v} -> [k]\n     * @param {Object} obj The object to extract properties from\n     * @return {Array} An array of the object's own and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.keysIn(f); //=> ['x', 'y']\n     */\n    var keysIn = _curry1(function keysIn(obj) {\n        var prop;\n        var ks = [];\n        for (prop in obj) {\n            ks[ks.length] = prop;\n        }\n        return ks;\n    });\n\n    /**\n     * Returns the number of elements in the array by returning `list.length`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [a] -> Number\n     * @param {Array} list The array to inspect.\n     * @return {Number} The length of the array.\n     * @example\n     *\n     *      R.length([]); //=> 0\n     *      R.length([1, 2, 3]); //=> 3\n     */\n    var length = _curry1(function length(list) {\n        return list != null && _isNumber(list.length) ? list.length : NaN;\n    });\n\n    /**\n     * Returns `true` if the first argument is less than the second; `false`\n     * otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @see R.gt\n     * @example\n     *\n     *      R.lt(2, 1); //=> false\n     *      R.lt(2, 2); //=> false\n     *      R.lt(2, 3); //=> true\n     *      R.lt('a', 'z'); //=> true\n     *      R.lt('z', 'a'); //=> false\n     */\n    var lt = _curry2(function lt(a, b) {\n        return a < b;\n    });\n\n    /**\n     * Returns `true` if the first argument is less than or equal to the second;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Boolean}\n     * @see R.gte\n     * @example\n     *\n     *      R.lte(2, 1); //=> false\n     *      R.lte(2, 2); //=> true\n     *      R.lte(2, 3); //=> true\n     *      R.lte('a', 'z'); //=> true\n     *      R.lte('z', 'a'); //=> false\n     */\n    var lte = _curry2(function lte(a, b) {\n        return a <= b;\n    });\n\n    /**\n     * The mapAccum function behaves like a combination of map and reduce; it\n     * applies a function to each element of a list, passing an accumulating\n     * parameter from left to right, and returning a final value of this\n     * accumulator together with the new list.\n     *\n     * The iterator function receives two arguments, *acc* and *value*, and should\n     * return a tuple *[acc, value]*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.addIndex\n     * @example\n     *\n     *      var digits = ['1', '2', '3', '4'];\n     *      var appender = (a, b) => [a + b, a + b];\n     *\n     *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n     */\n    var mapAccum = _curry3(function mapAccum(fn, acc, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [];\n        var tuple = [acc];\n        while (idx < len) {\n            tuple = fn(tuple[0], list[idx]);\n            result[idx] = tuple[1];\n            idx += 1;\n        }\n        return [\n            tuple[0],\n            result\n        ];\n    });\n\n    /**\n     * The mapAccumRight function behaves like a combination of map and reduce; it\n     * applies a function to each element of a list, passing an accumulating\n     * parameter from right to left, and returning a final value of this\n     * accumulator together with the new list.\n     *\n     * Similar to `mapAccum`, except moves through the input list from the right to\n     * the left.\n     *\n     * The iterator function receives two arguments, *acc* and *value*, and should\n     * return a tuple *[acc, value]*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.addIndex\n     * @example\n     *\n     *      var digits = ['1', '2', '3', '4'];\n     *      var append = (a, b) => [a + b, a + b];\n     *\n     *      R.mapAccumRight(append, 0, digits); //=> ['04321', ['04321', '0432', '043', '04']]\n     */\n    var mapAccumRight = _curry3(function mapAccumRight(fn, acc, list) {\n        var idx = list.length - 1;\n        var result = [];\n        var tuple = [acc];\n        while (idx >= 0) {\n            tuple = fn(tuple[0], list[idx]);\n            result[idx] = tuple[1];\n            idx -= 1;\n        }\n        return [\n            tuple[0],\n            result\n        ];\n    });\n\n    /**\n     * Tests a regular expression against a String. Note that this function will\n     * return an empty array when there are no matches. This differs from\n     * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n     * which returns `null` when there are no matches.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category String\n     * @sig RegExp -> String -> [String | Undefined]\n     * @param {RegExp} rx A regular expression.\n     * @param {String} str The string to match against\n     * @return {Array} The list of matches or empty array.\n     * @see R.test\n     * @example\n     *\n     *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n     *      R.match(/a/, 'b'); //=> []\n     *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n     */\n    var match = _curry2(function match(rx, str) {\n        return str.match(rx) || [];\n    });\n\n    /**\n     * mathMod behaves like the modulo operator should mathematically, unlike the\n     * `%` operator (and by extension, R.modulo). So while \"-17 % 5\" is -2,\n     * mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaN\n     * when the modulus is zero or negative.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} m The dividend.\n     * @param {Number} p the modulus.\n     * @return {Number} The result of `b mod a`.\n     * @example\n     *\n     *      R.mathMod(-17, 5);  //=> 3\n     *      R.mathMod(17, 5);   //=> 2\n     *      R.mathMod(17, -5);  //=> NaN\n     *      R.mathMod(17, 0);   //=> NaN\n     *      R.mathMod(17.2, 5); //=> NaN\n     *      R.mathMod(17, 5.3); //=> NaN\n     *\n     *      var clock = R.mathMod(R.__, 12);\n     *      clock(15); //=> 3\n     *      clock(24); //=> 0\n     *\n     *      var seventeenMod = R.mathMod(17);\n     *      seventeenMod(3);  //=> 2\n     *      seventeenMod(4);  //=> 1\n     *      seventeenMod(10); //=> 7\n     */\n    var mathMod = _curry2(function mathMod(m, p) {\n        if (!_isInteger(m)) {\n            return NaN;\n        }\n        if (!_isInteger(p) || p < 1) {\n            return NaN;\n        }\n        return (m % p + p) % p;\n    });\n\n    /**\n     * Returns the larger of its two arguments.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> a\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.maxBy, R.min\n     * @example\n     *\n     *      R.max(789, 123); //=> 789\n     *      R.max('a', 'b'); //=> 'b'\n     */\n    var max = _curry2(function max(a, b) {\n        return b > a ? b : a;\n    });\n\n    /**\n     * Takes a function and two values, and returns whichever value produces the\n     * larger result when passed to the provided function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> a -> a -> a\n     * @param {Function} f\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.max, R.minBy\n     * @example\n     *\n     *      //  square :: Number -> Number\n     *      var square = n => n * n;\n     *\n     *      R.maxBy(square, -3, 2); //=> -3\n     *\n     *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5\n     *      R.reduce(R.maxBy(square), 0, []); //=> 0\n     */\n    var maxBy = _curry3(function maxBy(f, a, b) {\n        return f(b) > f(a) ? b : a;\n    });\n\n    /**\n     * Create a new object with the own properties of the first object merged with\n     * the own properties of the second object. If a key exists in both objects,\n     * the value from the second object will be used.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> {k: v} -> {k: v}\n     * @param {Object} l\n     * @param {Object} r\n     * @return {Object}\n     * @see R.mergeWith, R.mergeWithKey\n     * @example\n     *\n     *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n     *      //=> { 'name': 'fred', 'age': 40 }\n     *\n     *      var resetToDefault = R.merge(R.__, {x: 0});\n     *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n     */\n    var merge = _curry2(function merge(l, r) {\n        return _assign({}, l, r);\n    });\n\n    /**\n     * Merges a list of objects together into one object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig [{k: v}] -> {k: v}\n     * @param {Array} list An array of objects\n     * @return {Object} A merged object.\n     * @see R.reduce\n     * @example\n     *\n     *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n     *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}\n     */\n    var mergeAll = _curry1(function mergeAll(list) {\n        return _assign.apply(null, [{}].concat(list));\n    });\n\n    /**\n     * Creates a new object with the own properties of the two provided objects. If\n     * a key exists in both objects, the provided function is applied to the key\n     * and the values associated with the key in each object, with the result being\n     * used as the value associated with the key in the returned object. The key\n     * will be excluded from the returned object if the resulting value is\n     * `undefined`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Object\n     * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}\n     * @param {Function} fn\n     * @param {Object} l\n     * @param {Object} r\n     * @return {Object}\n     * @see R.merge, R.mergeWith\n     * @example\n     *\n     *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n     *      R.mergeWithKey(concatValues,\n     *                     { a: true, thing: 'foo', values: [10, 20] },\n     *                     { b: true, thing: 'bar', values: [15, 35] });\n     *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n     */\n    var mergeWithKey = _curry3(function mergeWithKey(fn, l, r) {\n        var result = {};\n        var k;\n        for (k in l) {\n            if (_has(k, l)) {\n                result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n            }\n        }\n        for (k in r) {\n            if (_has(k, r) && !_has(k, result)) {\n                result[k] = r[k];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Returns the smaller of its two arguments.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> a\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.minBy, R.max\n     * @example\n     *\n     *      R.min(789, 123); //=> 123\n     *      R.min('a', 'b'); //=> 'a'\n     */\n    var min = _curry2(function min(a, b) {\n        return b < a ? b : a;\n    });\n\n    /**\n     * Takes a function and two values, and returns whichever value produces the\n     * smaller result when passed to the provided function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> a -> a -> a\n     * @param {Function} f\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.min, R.maxBy\n     * @example\n     *\n     *      //  square :: Number -> Number\n     *      var square = n => n * n;\n     *\n     *      R.minBy(square, -3, 2); //=> 2\n     *\n     *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n     *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n     */\n    var minBy = _curry3(function minBy(f, a, b) {\n        return f(b) < f(a) ? b : a;\n    });\n\n    /**\n     * Divides the first parameter by the second and returns the remainder. Note\n     * that this function preserves the JavaScript-style behavior for modulo. For\n     * mathematical modulo see `mathMod`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The value to the divide.\n     * @param {Number} b The pseudo-modulus\n     * @return {Number} The result of `b % a`.\n     * @see R.mathMod\n     * @example\n     *\n     *      R.modulo(17, 3); //=> 2\n     *      // JS behavior:\n     *      R.modulo(-17, 3); //=> -2\n     *      R.modulo(17, -3); //=> 2\n     *\n     *      var isOdd = R.modulo(R.__, 2);\n     *      isOdd(42); //=> 0\n     *      isOdd(21); //=> 1\n     */\n    var modulo = _curry2(function modulo(a, b) {\n        return a % b;\n    });\n\n    /**\n     * Multiplies two numbers. Equivalent to `a * b` but curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a * b`.\n     * @see R.divide\n     * @example\n     *\n     *      var double = R.multiply(2);\n     *      var triple = R.multiply(3);\n     *      double(3);       //=>  6\n     *      triple(4);       //=> 12\n     *      R.multiply(2, 5);  //=> 10\n     */\n    var multiply = _curry2(function multiply(a, b) {\n        return a * b;\n    });\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts\n     * exactly `n` parameters. Any extraneous parameters will not be passed to the\n     * supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig Number -> (* -> a) -> (* -> a)\n     * @param {Number} n The desired arity of the new function.\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity `n`.\n     * @example\n     *\n     *      var takesTwoArgs = (a, b) => [a, b];\n     *\n     *      takesTwoArgs.length; //=> 2\n     *      takesTwoArgs(1, 2); //=> [1, 2]\n     *\n     *      var takesOneArg = R.nAry(1, takesTwoArgs);\n     *      takesOneArg.length; //=> 1\n     *      // Only `n` arguments are passed to the wrapped function\n     *      takesOneArg(1, 2); //=> [1, undefined]\n     */\n    var nAry = _curry2(function nAry(n, fn) {\n        switch (n) {\n        case 0:\n            return function () {\n                return fn.call(this);\n            };\n        case 1:\n            return function (a0) {\n                return fn.call(this, a0);\n            };\n        case 2:\n            return function (a0, a1) {\n                return fn.call(this, a0, a1);\n            };\n        case 3:\n            return function (a0, a1, a2) {\n                return fn.call(this, a0, a1, a2);\n            };\n        case 4:\n            return function (a0, a1, a2, a3) {\n                return fn.call(this, a0, a1, a2, a3);\n            };\n        case 5:\n            return function (a0, a1, a2, a3, a4) {\n                return fn.call(this, a0, a1, a2, a3, a4);\n            };\n        case 6:\n            return function (a0, a1, a2, a3, a4, a5) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5);\n            };\n        case 7:\n            return function (a0, a1, a2, a3, a4, a5, a6) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6);\n            };\n        case 8:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);\n            };\n        case 9:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);\n            };\n        case 10:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);\n            };\n        default:\n            throw new Error('First argument to nAry must be a non-negative integer no greater than ten');\n        }\n    });\n\n    /**\n     * Negates its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @example\n     *\n     *      R.negate(42); //=> -42\n     */\n    var negate = _curry1(function negate(n) {\n        return -n;\n    });\n\n    /**\n     * Returns `true` if no elements of the list match the predicate, `false`\n     * otherwise.\n     *\n     * Dispatches to the `any` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.\n     * @see R.all, R.any\n     * @example\n     *\n     *      var isEven = n => n % 2 === 0;\n     *\n     *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true\n     *      R.none(isEven, [1, 3, 5, 7, 8, 11]); //=> false\n     */\n    var none = _curry2(_complement(_dispatchable('any', _xany, any)));\n\n    /**\n     * A function that returns the `!` of its argument. It will return `true` when\n     * passed false-y value, and `false` when passed a truth-y one.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> Boolean\n     * @param {*} a any value\n     * @return {Boolean} the logical inverse of passed argument.\n     * @see R.complement\n     * @example\n     *\n     *      R.not(true); //=> false\n     *      R.not(false); //=> true\n     *      R.not(0); //=> true\n     *      R.not(1); //=> false\n     */\n    var not = _curry1(function not(a) {\n        return !a;\n    });\n\n    /**\n     * Returns the nth element of the given list or string. If n is negative the\n     * element at index length + n is returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> [a] -> a | Undefined\n     * @sig Number -> String -> String\n     * @param {Number} offset\n     * @param {*} list\n     * @return {*}\n     * @example\n     *\n     *      var list = ['foo', 'bar', 'baz', 'quux'];\n     *      R.nth(1, list); //=> 'bar'\n     *      R.nth(-1, list); //=> 'quux'\n     *      R.nth(-99, list); //=> undefined\n     *\n     *      R.nth(2, 'abc'); //=> 'c'\n     *      R.nth(3, 'abc'); //=> ''\n     */\n    var nth = _curry2(function nth(offset, list) {\n        var idx = offset < 0 ? list.length + offset : offset;\n        return _isString(list) ? list.charAt(idx) : list[idx];\n    });\n\n    /**\n     * Returns a function which returns its nth argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig Number -> *... -> *\n     * @param {Number} n\n     * @return {Function}\n     * @example\n     *\n     *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'\n     *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'\n     */\n    var nthArg = _curry1(function nthArg(n) {\n        var arity = n < 0 ? 1 : n + 1;\n        return curryN(arity, function () {\n            return nth(n, arguments);\n        });\n    });\n\n    /**\n     * Creates an object containing a single key:value pair.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Object\n     * @sig String -> a -> {String:a}\n     * @param {String} key\n     * @param {*} val\n     * @return {Object}\n     * @see R.pair\n     * @example\n     *\n     *      var matchPhrases = R.compose(\n     *        R.objOf('must'),\n     *        R.map(R.objOf('match_phrase'))\n     *      );\n     *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n     */\n    var objOf = _curry2(function objOf(key, val) {\n        var obj = {};\n        obj[key] = val;\n        return obj;\n    });\n\n    /**\n     * Returns a singleton array containing the value provided.\n     *\n     * Note this `of` is different from the ES6 `of`; See\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig a -> [a]\n     * @param {*} x any value\n     * @return {Array} An array wrapping `x`.\n     * @example\n     *\n     *      R.of(null); //=> [null]\n     *      R.of([42]); //=> [[42]]\n     */\n    var of = _curry1(_of);\n\n    /**\n     * Accepts a function `fn` and returns a function that guards invocation of\n     * `fn` such that `fn` can only ever be called once, no matter how many times\n     * the returned function is invoked. The first value calculated is returned in\n     * subsequent invocations.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a... -> b) -> (a... -> b)\n     * @param {Function} fn The function to wrap in a call-only-once wrapper.\n     * @return {Function} The wrapped function.\n     * @example\n     *\n     *      var addOneOnce = R.once(x => x + 1);\n     *      addOneOnce(10); //=> 11\n     *      addOneOnce(addOneOnce(50)); //=> 11\n     */\n    var once = _curry1(function once(fn) {\n        var called = false;\n        var result;\n        return _arity(fn.length, function () {\n            if (called) {\n                return result;\n            }\n            called = true;\n            result = fn.apply(this, arguments);\n            return result;\n        });\n    });\n\n    /**\n     * Returns `true` if one or both of its arguments are `true`. Returns `false`\n     * if both arguments are `false`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> * -> *\n     * @param {Boolean} a A boolean value\n     * @param {Boolean} b A boolean value\n     * @return {Boolean} `true` if one or both arguments are `true`, `false` otherwise\n     * @see R.either\n     * @example\n     *\n     *      R.or(true, true); //=> true\n     *      R.or(true, false); //=> true\n     *      R.or(false, true); //=> true\n     *      R.or(false, false); //=> false\n     */\n    var or = _curry2(function or(a, b) {\n        return a || b;\n    });\n\n    /**\n     * Returns the result of \"setting\" the portion of the given data structure\n     * focused by the given lens to the result of applying the given function to\n     * the focused value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> (a -> a) -> s -> s\n     * @param {Lens} lens\n     * @param {*} v\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var headLens = R.lensIndex(0);\n     *\n     *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n     */\n    // `Identity` is a functor that holds a single value, where `map` simply\n    // transforms the held value with the provided function.\n    // The value returned by the getter function is first transformed with `f`,\n    // then set as the value of an `Identity`. This is then mapped over with the\n    // setter function of the lens.\n    var over = function () {\n        // `Identity` is a functor that holds a single value, where `map` simply\n        // transforms the held value with the provided function.\n        var Identity = function (x) {\n            return {\n                value: x,\n                map: function (f) {\n                    return Identity(f(x));\n                }\n            };\n        };\n        return _curry3(function over(lens, f, x) {\n            // The value returned by the getter function is first transformed with `f`,\n            // then set as the value of an `Identity`. This is then mapped over with the\n            // setter function of the lens.\n            return lens(function (y) {\n                return Identity(f(y));\n            })(x).value;\n        });\n    }();\n\n    /**\n     * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category List\n     * @sig a -> b -> (a,b)\n     * @param {*} fst\n     * @param {*} snd\n     * @return {Array}\n     * @see R.objOf, R.of\n     * @example\n     *\n     *      R.pair('foo', 'bar'); //=> ['foo', 'bar']\n     */\n    var pair = _curry2(function pair(fst, snd) {\n        return [\n            fst,\n            snd\n        ];\n    });\n\n    /**\n     * Retrieve the value at a given path.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig [String] -> {k: v} -> v | Undefined\n     * @param {Array} path The path to use.\n     * @param {Object} obj The object to retrieve the nested property from.\n     * @return {*} The data at `path`.\n     * @see R.prop\n     * @example\n     *\n     *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n     *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n     */\n    var path = _curry2(function path(paths, obj) {\n        var val = obj;\n        var idx = 0;\n        while (idx < paths.length) {\n            if (val == null) {\n                return;\n            }\n            val = val[paths[idx]];\n            idx += 1;\n        }\n        return val;\n    });\n\n    /**\n     * If the given, non-null object has a value at the given path, returns the\n     * value at that path. Otherwise returns the provided default value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Object\n     * @sig a -> [String] -> Object -> a\n     * @param {*} d The default value.\n     * @param {Array} p The path to use.\n     * @param {Object} obj The object to retrieve the nested property from.\n     * @return {*} The data at `path` of the supplied object or the default value.\n     * @example\n     *\n     *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n     *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n     */\n    var pathOr = _curry3(function pathOr(d, p, obj) {\n        return defaultTo(d, path(p, obj));\n    });\n\n    /**\n     * Returns `true` if the specified object property at given path satisfies the\n     * given predicate; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Logic\n     * @sig (a -> Boolean) -> [String] -> Object -> Boolean\n     * @param {Function} pred\n     * @param {Array} propPath\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.propSatisfies, R.path\n     * @example\n     *\n     *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true\n     */\n    var pathSatisfies = _curry3(function pathSatisfies(pred, propPath, obj) {\n        return propPath.length > 0 && pred(path(propPath, obj));\n    });\n\n    /**\n     * Returns a partial copy of an object containing only the keys specified. If\n     * the key does not exist, the property is ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> {k: v}\n     * @param {Array} names an array of String property names to copy onto a new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties from `names` on it.\n     * @see R.omit, R.props\n     * @example\n     *\n     *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n     *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n     */\n    var pick = _curry2(function pick(names, obj) {\n        var result = {};\n        var idx = 0;\n        while (idx < names.length) {\n            if (names[idx] in obj) {\n                result[names[idx]] = obj[names[idx]];\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Similar to `pick` except that this one includes a `key: undefined` pair for\n     * properties that don't exist.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> {k: v}\n     * @param {Array} names an array of String property names to copy onto a new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties from `names` on it.\n     * @see R.pick\n     * @example\n     *\n     *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n     *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}\n     */\n    var pickAll = _curry2(function pickAll(names, obj) {\n        var result = {};\n        var idx = 0;\n        var len = names.length;\n        while (idx < len) {\n            var name = names[idx];\n            result[name] = obj[name];\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns a partial copy of an object containing only the keys that satisfy\n     * the supplied predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig (v, k -> Boolean) -> {k: v} -> {k: v}\n     * @param {Function} pred A predicate to determine whether or not a key\n     *        should be included on the output object.\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties that satisfy `pred`\n     *         on it.\n     * @see R.pick, R.filter\n     * @example\n     *\n     *      var isUpperCase = (val, key) => key.toUpperCase() === key;\n     *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}\n     */\n    var pickBy = _curry2(function pickBy(test, obj) {\n        var result = {};\n        for (var prop in obj) {\n            if (test(obj[prop], prop, obj)) {\n                result[prop] = obj[prop];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Returns a new list with the given element at the front, followed by the\n     * contents of the list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} el The item to add to the head of the output list.\n     * @param {Array} list The array to add to the tail of the output list.\n     * @return {Array} A new array.\n     * @see R.append\n     * @example\n     *\n     *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n     */\n    var prepend = _curry2(function prepend(el, list) {\n        return _concat([el], list);\n    });\n\n    /**\n     * Returns a function that when supplied an object returns the indicated\n     * property of that object, if it exists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig s -> {s: a} -> a | Undefined\n     * @param {String} p The property name\n     * @param {Object} obj The object to query\n     * @return {*} The value at `obj.p`.\n     * @see R.path\n     * @example\n     *\n     *      R.prop('x', {x: 100}); //=> 100\n     *      R.prop('x', {}); //=> undefined\n     */\n    var prop = _curry2(function prop(p, obj) {\n        return obj[p];\n    });\n\n    /**\n     * Returns `true` if the specified object property is of the given type;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Type\n     * @sig Type -> String -> Object -> Boolean\n     * @param {Function} type\n     * @param {String} name\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.is, R.propSatisfies\n     * @example\n     *\n     *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true\n     *      R.propIs(Number, 'x', {x: 'foo'});    //=> false\n     *      R.propIs(Number, 'x', {});            //=> false\n     */\n    var propIs = _curry3(function propIs(type, name, obj) {\n        return is(type, obj[name]);\n    });\n\n    /**\n     * If the given, non-null object has an own property with the specified name,\n     * returns the value of that property. Otherwise returns the provided default\n     * value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Object\n     * @sig a -> String -> Object -> a\n     * @param {*} val The default value.\n     * @param {String} p The name of the property to return.\n     * @param {Object} obj The object to query.\n     * @return {*} The value of given property of the supplied object or the default value.\n     * @example\n     *\n     *      var alice = {\n     *        name: 'ALICE',\n     *        age: 101\n     *      };\n     *      var favorite = R.prop('favoriteLibrary');\n     *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n     *\n     *      favorite(alice);  //=> undefined\n     *      favoriteWithDefault(alice);  //=> 'Ramda'\n     */\n    var propOr = _curry3(function propOr(val, p, obj) {\n        return obj != null && _has(p, obj) ? obj[p] : val;\n    });\n\n    /**\n     * Returns `true` if the specified object property satisfies the given\n     * predicate; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Logic\n     * @sig (a -> Boolean) -> String -> {String: a} -> Boolean\n     * @param {Function} pred\n     * @param {String} name\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.propEq, R.propIs\n     * @example\n     *\n     *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true\n     */\n    var propSatisfies = _curry3(function propSatisfies(pred, name, obj) {\n        return pred(obj[name]);\n    });\n\n    /**\n     * Acts as multiple `prop`: array of keys in, array of values out. Preserves\n     * order.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> [v]\n     * @param {Array} ps The property names to fetch\n     * @param {Object} obj The object to query\n     * @return {Array} The corresponding values or partially applied function.\n     * @example\n     *\n     *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]\n     *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]\n     *\n     *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));\n     *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'\n     */\n    var props = _curry2(function props(ps, obj) {\n        var len = ps.length;\n        var out = [];\n        var idx = 0;\n        while (idx < len) {\n            out[idx] = obj[ps[idx]];\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> Number -> [Number]\n     * @param {Number} from The first number in the list.\n     * @param {Number} to One more than the last number in the list.\n     * @return {Array} The list of numbers in tthe set `[a, b)`.\n     * @example\n     *\n     *      R.range(1, 5);    //=> [1, 2, 3, 4]\n     *      R.range(50, 53);  //=> [50, 51, 52]\n     */\n    var range = _curry2(function range(from, to) {\n        if (!(_isNumber(from) && _isNumber(to))) {\n            throw new TypeError('Both arguments to range must be numbers');\n        }\n        var result = [];\n        var n = from;\n        while (n < to) {\n            result.push(n);\n            n += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns a single item by iterating through the list, successively calling\n     * the iterator function and passing it an accumulator value and the current\n     * value from the array, and then passing the result to the next call.\n     *\n     * Similar to `reduce`, except moves through the input list from the right to\n     * the left.\n     *\n     * The iterator function receives two values: *(acc, value)*\n     *\n     * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n     * arrays), unlike the native `Array.prototype.reduce` method. For more details\n     * on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,b -> a) -> a -> [b] -> a\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.addIndex\n     * @example\n     *\n     *      var pairs = [ ['a', 1], ['b', 2], ['c', 3] ];\n     *      var flattenPairs = (acc, pair) => acc.concat(pair);\n     *\n     *      R.reduceRight(flattenPairs, [], pairs); //=> [ 'c', 3, 'b', 2, 'a', 1 ]\n     */\n    var reduceRight = _curry3(function reduceRight(fn, acc, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            acc = fn(acc, list[idx]);\n            idx -= 1;\n        }\n        return acc;\n    });\n\n    /**\n     * Returns a value wrapped to indicate that it is the final value of the reduce\n     * and transduce functions. The returned value should be considered a black\n     * box: the internal structure is not guaranteed to be stable.\n     *\n     * Note: this optimization is unavailable to functions not explicitly listed\n     * above. For instance, it is not currently supported by reduceRight.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category List\n     * @sig a -> *\n     * @param {*} x The final value of the reduce.\n     * @return {*} The wrapped value.\n     * @see R.reduce, R.transduce\n     * @example\n     *\n     *      R.reduce(\n     *        R.pipe(R.add, R.when(R.gte(R.__, 10), R.reduced)),\n     *        0,\n     *        [1, 2, 3, 4, 5]) // 10\n     */\n    var reduced = _curry1(_reduced);\n\n    /**\n     * Removes the sub-list of `list` starting at index `start` and containing\n     * `count` elements. _Note that this is not destructive_: it returns a copy of\n     * the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.2\n     * @category List\n     * @sig Number -> Number -> [a] -> [a]\n     * @param {Number} start The position to start removing elements\n     * @param {Number} count The number of elements to remove\n     * @param {Array} list The list to remove from\n     * @return {Array} A new Array with `count` elements from `start` removed.\n     * @example\n     *\n     *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]\n     */\n    var remove = _curry3(function remove(start, count, list) {\n        return _concat(_slice(list, 0, Math.min(start, list.length)), _slice(list, Math.min(list.length, start + count)));\n    });\n\n    /**\n     * Replace a substring or regex match in a string with a replacement.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category String\n     * @sig RegExp|String -> String -> String -> String\n     * @param {RegExp|String} pattern A regular expression or a substring to match.\n     * @param {String} replacement The string to replace the matches with.\n     * @param {String} str The String to do the search and replacement in.\n     * @return {String} The result.\n     * @example\n     *\n     *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n     *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n     *\n     *      // Use the \"g\" (global) flag to replace all occurrences:\n     *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n     */\n    var replace = _curry3(function replace(regex, replacement, str) {\n        return str.replace(regex, replacement);\n    });\n\n    /**\n     * Returns a new list or string with the elements or characters in reverse\n     * order.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {Array|String} list\n     * @return {Array|String}\n     * @example\n     *\n     *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n     *      R.reverse([1, 2]);     //=> [2, 1]\n     *      R.reverse([1]);        //=> [1]\n     *      R.reverse([]);         //=> []\n     *\n     *      R.reverse('abc');      //=> 'cba'\n     *      R.reverse('ab');       //=> 'ba'\n     *      R.reverse('a');        //=> 'a'\n     *      R.reverse('');         //=> ''\n     */\n    var reverse = _curry1(function reverse(list) {\n        return _isString(list) ? list.split('').reverse().join('') : _slice(list).reverse();\n    });\n\n    /**\n     * Scan is similar to reduce, but returns a list of successively reduced values\n     * from the left\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (a,b -> a) -> a -> [b] -> [a]\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {Array} A list of all intermediately reduced values.\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n     */\n    var scan = _curry3(function scan(fn, acc, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [acc];\n        while (idx < len) {\n            acc = fn(acc, list[idx]);\n            result[idx + 1] = acc;\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns the result of \"setting\" the portion of the given data structure\n     * focused by the given lens to the given value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> a -> s -> s\n     * @param {Lens} lens\n     * @param {*} v\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n     *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}\n     */\n    var set = _curry3(function set(lens, v, x) {\n        return over(lens, always(v), x);\n    });\n\n    /**\n     * Returns the elements of the given list or string (or object with a `slice`\n     * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n     *\n     * Dispatches to the `slice` method of the third argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @sig Number -> Number -> [a] -> [a]\n     * @sig Number -> Number -> String -> String\n     * @param {Number} fromIndex The start index (inclusive).\n     * @param {Number} toIndex The end index (exclusive).\n     * @param {*} list\n     * @return {*}\n     * @example\n     *\n     *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n     *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n     *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n     *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n     *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n     */\n    var slice = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n        return Array.prototype.slice.call(list, fromIndex, toIndex);\n    }));\n\n    /**\n     * Returns a copy of the list, sorted according to the comparator function,\n     * which should accept two values at a time and return a negative number if the\n     * first value is smaller, a positive number if it's larger, and zero if they\n     * are equal. Please note that this is a **copy** of the list. It does not\n     * modify the original.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,a -> Number) -> [a] -> [a]\n     * @param {Function} comparator A sorting function :: a -> b -> Int\n     * @param {Array} list The list to sort\n     * @return {Array} a new array with its elements sorted by the comparator function.\n     * @example\n     *\n     *      var diff = function(a, b) { return a - b; };\n     *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]\n     */\n    var sort = _curry2(function sort(comparator, list) {\n        return _slice(list).sort(comparator);\n    });\n\n    /**\n     * Sorts the list according to the supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> [a] -> [a]\n     * @param {Function} fn\n     * @param {Array} list The list to sort.\n     * @return {Array} A new list sorted by the keys generated by `fn`.\n     * @example\n     *\n     *      var sortByFirstItem = R.sortBy(R.prop(0));\n     *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\n     *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];\n     *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n     *      var alice = {\n     *        name: 'ALICE',\n     *        age: 101\n     *      };\n     *      var bob = {\n     *        name: 'Bob',\n     *        age: -10\n     *      };\n     *      var clara = {\n     *        name: 'clara',\n     *        age: 314.159\n     *      };\n     *      var people = [clara, bob, alice];\n     *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\n     */\n    var sortBy = _curry2(function sortBy(fn, list) {\n        return _slice(list).sort(function (a, b) {\n            var aa = fn(a);\n            var bb = fn(b);\n            return aa < bb ? -1 : aa > bb ? 1 : 0;\n        });\n    });\n\n    /**\n     * Splits a given list or string at a given index.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig Number -> [a] -> [[a], [a]]\n     * @sig Number -> String -> [String, String]\n     * @param {Number} index The index where the array/string is split.\n     * @param {Array|String} array The array/string to be split.\n     * @return {Array}\n     * @example\n     *\n     *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\n     *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']\n     *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']\n     */\n    var splitAt = _curry2(function splitAt(index, array) {\n        return [\n            slice(0, index, array),\n            slice(index, length(array), array)\n        ];\n    });\n\n    /**\n     * Splits a collection into slices of the specified length.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [[a]]\n     * @sig Number -> String -> [String]\n     * @param {Number} n\n     * @param {Array} list\n     * @return {Array}\n     * @example\n     *\n     *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n     *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n     */\n    var splitEvery = _curry2(function splitEvery(n, list) {\n        if (n <= 0) {\n            throw new Error('First argument to splitEvery must be a positive integer');\n        }\n        var result = [];\n        var idx = 0;\n        while (idx < list.length) {\n            result.push(slice(idx, idx += n, list));\n        }\n        return result;\n    });\n\n    /**\n     * Takes a list and a predicate and returns a pair of lists with the following properties:\n     *\n     *  - the result of concatenating the two output lists is equivalent to the input list;\n     *  - none of the elements of the first output list satisfies the predicate; and\n     *  - if the second output list is non-empty, its first element satisfies the predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n     * @param {Function} pred The predicate that determines where the array is split.\n     * @param {Array} list The array to be split.\n     * @return {Array}\n     * @example\n     *\n     *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n     */\n    var splitWhen = _curry2(function splitWhen(pred, list) {\n        var idx = 0;\n        var len = list.length;\n        var prefix = [];\n        while (idx < len && !pred(list[idx])) {\n            prefix.push(list[idx]);\n            idx += 1;\n        }\n        return [\n            prefix,\n            _slice(list, idx)\n        ];\n    });\n\n    /**\n     * Subtracts its second argument from its first argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a - b`.\n     * @see R.add\n     * @example\n     *\n     *      R.subtract(10, 8); //=> 2\n     *\n     *      var minus5 = R.subtract(R.__, 5);\n     *      minus5(17); //=> 12\n     *\n     *      var complementaryAngle = R.subtract(90);\n     *      complementaryAngle(30); //=> 60\n     *      complementaryAngle(72); //=> 18\n     */\n    var subtract = _curry2(function subtract(a, b) {\n        return Number(a) - Number(b);\n    });\n\n    /**\n     * Returns all but the first element of the given list or string (or object\n     * with a `tail` method).\n     *\n     * Dispatches to the `slice` method of the first argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @see R.head, R.init, R.last\n     * @example\n     *\n     *      R.tail([1, 2, 3]);  //=> [2, 3]\n     *      R.tail([1, 2]);     //=> [2]\n     *      R.tail([1]);        //=> []\n     *      R.tail([]);         //=> []\n     *\n     *      R.tail('abc');  //=> 'bc'\n     *      R.tail('ab');   //=> 'b'\n     *      R.tail('a');    //=> ''\n     *      R.tail('');     //=> ''\n     */\n    var tail = _checkForMethod('tail', slice(1, Infinity));\n\n    /**\n     * Returns the first `n` elements of the given list, string, or\n     * transducer/transformer (or object with a `take` method).\n     *\n     * Dispatches to the `take` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n\n     * @param {*} list\n     * @return {*}\n     * @see R.drop\n     * @example\n     *\n     *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n     *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n     *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.take(3, 'ramda');               //=> 'ram'\n     *\n     *      var personnel = [\n     *        'Dave Brubeck',\n     *        'Paul Desmond',\n     *        'Eugene Wright',\n     *        'Joe Morello',\n     *        'Gerry Mulligan',\n     *        'Bob Bates',\n     *        'Joe Dodge',\n     *        'Ron Crotty'\n     *      ];\n     *\n     *      var takeFive = R.take(5);\n     *      takeFive(personnel);\n     *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n     */\n    var take = _curry2(_dispatchable('take', _xtake, function take(n, xs) {\n        return slice(0, n < 0 ? Infinity : n, xs);\n    }));\n\n    /**\n     * Returns a new list containing the last `n` elements of a given list, passing\n     * each value to the supplied predicate function, and terminating when the\n     * predicate function returns `false`. Excludes the element that caused the\n     * predicate function to fail. The predicate function is passed one argument:\n     * *(value)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.dropLastWhile, R.addIndex\n     * @example\n     *\n     *      var isNotOne = x => x !== 1;\n     *\n     *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n     */\n    var takeLastWhile = _curry2(function takeLastWhile(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0 && fn(list[idx])) {\n            idx -= 1;\n        }\n        return _slice(list, idx + 1, Infinity);\n    });\n\n    /**\n     * Returns a new list containing the first `n` elements of a given list,\n     * passing each value to the supplied predicate function, and terminating when\n     * the predicate function returns `false`. Excludes the element that caused the\n     * predicate function to fail. The predicate function is passed one argument:\n     * *(value)*.\n     *\n     * Dispatches to the `takeWhile` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.dropWhile, R.transduce, R.addIndex\n     * @example\n     *\n     *      var isNotFour = x => x !== 4;\n     *\n     *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]\n     */\n    var takeWhile = _curry2(_dispatchable('takeWhile', _xtakeWhile, function takeWhile(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len && fn(list[idx])) {\n            idx += 1;\n        }\n        return _slice(list, 0, idx);\n    }));\n\n    /**\n     * Runs the given function with the supplied object, then returns the object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a -> *) -> a -> a\n     * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n     * @param {*} x\n     * @return {*} `x`.\n     * @example\n     *\n     *      var sayX = x => console.log('x is ' + x);\n     *      R.tap(sayX, 100); //=> 100\n     *      // logs 'x is 100'\n     */\n    var tap = _curry2(function tap(fn, x) {\n        fn(x);\n        return x;\n    });\n\n    /**\n     * Calls an input function `n` times, returning an array containing the results\n     * of those function calls.\n     *\n     * `fn` is passed one argument: The current value of `n`, which begins at `0`\n     * and is gradually incremented to `n - 1`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.3\n     * @category List\n     * @sig (Number -> a) -> Number -> [a]\n     * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n     * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n     * @return {Array} An array containing the return values of all calls to `fn`.\n     * @example\n     *\n     *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n     */\n    var times = _curry2(function times(fn, n) {\n        var len = Number(n);\n        var idx = 0;\n        var list;\n        if (len < 0 || isNaN(len)) {\n            throw new RangeError('n must be a non-negative number');\n        }\n        list = new Array(len);\n        while (idx < len) {\n            list[idx] = fn(idx);\n            idx += 1;\n        }\n        return list;\n    });\n\n    /**\n     * Converts an object into an array of key, value arrays. Only the object's\n     * own properties are used.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Object\n     * @sig {String: *} -> [[String,*]]\n     * @param {Object} obj The object to extract from\n     * @return {Array} An array of key, value arrays from the object's own properties.\n     * @see R.fromPairs\n     * @example\n     *\n     *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]\n     */\n    var toPairs = _curry1(function toPairs(obj) {\n        var pairs = [];\n        for (var prop in obj) {\n            if (_has(prop, obj)) {\n                pairs[pairs.length] = [\n                    prop,\n                    obj[prop]\n                ];\n            }\n        }\n        return pairs;\n    });\n\n    /**\n     * Converts an object into an array of key, value arrays. The object's own\n     * properties and prototype properties are used. Note that the order of the\n     * output array is not guaranteed to be consistent across different JS\n     * platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Object\n     * @sig {String: *} -> [[String,*]]\n     * @param {Object} obj The object to extract from\n     * @return {Array} An array of key, value arrays from the object's own\n     *         and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]\n     */\n    var toPairsIn = _curry1(function toPairsIn(obj) {\n        var pairs = [];\n        for (var prop in obj) {\n            pairs[pairs.length] = [\n                prop,\n                obj[prop]\n            ];\n        }\n        return pairs;\n    });\n\n    /**\n     * Transposes the rows and columns of a 2D list.\n     * When passed a list of `n` lists of length `x`,\n     * returns a list of `x` lists of length `n`.\n     *\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig [[a]] -> [[a]]\n     * @param {Array} list A 2D list\n     * @return {Array} A 2D list\n     * @example\n     *\n     *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]\n     *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n     *\n     * If some of the rows are shorter than the following rows, their elements are skipped:\n     *\n     *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]\n     */\n    var transpose = _curry1(function transpose(outerlist) {\n        var i = 0;\n        var result = [];\n        while (i < outerlist.length) {\n            var innerlist = outerlist[i];\n            var j = 0;\n            while (j < innerlist.length) {\n                if (typeof result[j] === 'undefined') {\n                    result[j] = [];\n                }\n                result[j].push(innerlist[j]);\n                j += 1;\n            }\n            i += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Removes (strips) whitespace from both ends of the string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to trim.\n     * @return {String} Trimmed version of `str`.\n     * @example\n     *\n     *      R.trim('   xyz  '); //=> 'xyz'\n     *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n     */\n    var trim = function () {\n        var ws = '\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' + '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' + '\\u2029\\uFEFF';\n        var zeroWidth = '\\u200B';\n        var hasProtoTrim = typeof String.prototype.trim === 'function';\n        if (!hasProtoTrim || (ws.trim() || !zeroWidth.trim())) {\n            return _curry1(function trim(str) {\n                var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n                var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n                return str.replace(beginRx, '').replace(endRx, '');\n            });\n        } else {\n            return _curry1(function trim(str) {\n                return str.trim();\n            });\n        }\n    }();\n\n    /**\n     * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\n     * function evaluates the `tryer`; if it does not throw, it simply returns the\n     * result. If the `tryer` *does* throw, the returned function evaluates the\n     * `catcher` function and returns its result. Note that for effective\n     * composition with this function, both the `tryer` and `catcher` functions\n     * must return the same type of results.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category Function\n     * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)\n     * @param {Function} tryer The function that may throw.\n     * @param {Function} catcher The function that will be evaluated if `tryer` throws.\n     * @return {Function} A new function that will catch exceptions and send then to the catcher.\n     * @example\n     *\n     *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true\n     *      R.tryCatch(R.prop('x'), R.F)(null);      //=> false\n     */\n    var tryCatch = _curry2(function _tryCatch(tryer, catcher) {\n        return _arity(tryer.length, function () {\n            try {\n                return tryer.apply(this, arguments);\n            } catch (e) {\n                return catcher.apply(this, _concat([e], arguments));\n            }\n        });\n    });\n\n    /**\n     * Gives a single-word string description of the (native) type of a value,\n     * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n     * attempt to distinguish user Object types any further, reporting them all as\n     * 'Object'.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Type\n     * @sig (* -> {*}) -> String\n     * @param {*} val The value to test\n     * @return {String}\n     * @example\n     *\n     *      R.type({}); //=> \"Object\"\n     *      R.type(1); //=> \"Number\"\n     *      R.type(false); //=> \"Boolean\"\n     *      R.type('s'); //=> \"String\"\n     *      R.type(null); //=> \"Null\"\n     *      R.type([]); //=> \"Array\"\n     *      R.type(/[A-z]/); //=> \"RegExp\"\n     */\n    var type = _curry1(function type(val) {\n        return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n    });\n\n    /**\n     * Takes a function `fn`, which takes a single array argument, and returns a\n     * function which:\n     *\n     *   - takes any number of positional arguments;\n     *   - passes these arguments to `fn` as an array; and\n     *   - returns the result.\n     *\n     * In other words, R.unapply derives a variadic function from a function which\n     * takes an array. R.unapply is the inverse of R.apply.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Function\n     * @sig ([*...] -> a) -> (*... -> a)\n     * @param {Function} fn\n     * @return {Function}\n     * @see R.apply\n     * @example\n     *\n     *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n     */\n    var unapply = _curry1(function unapply(fn) {\n        return function () {\n            return fn(_slice(arguments));\n        };\n    });\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts\n     * exactly 1 parameter. Any extraneous parameters will not be passed to the\n     * supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Function\n     * @sig (* -> b) -> (a -> b)\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity 1.\n     * @example\n     *\n     *      var takesTwoArgs = function(a, b) {\n     *        return [a, b];\n     *      };\n     *      takesTwoArgs.length; //=> 2\n     *      takesTwoArgs(1, 2); //=> [1, 2]\n     *\n     *      var takesOneArg = R.unary(takesTwoArgs);\n     *      takesOneArg.length; //=> 1\n     *      // Only 1 argument is passed to the wrapped function\n     *      takesOneArg(1, 2); //=> [1, undefined]\n     */\n    var unary = _curry1(function unary(fn) {\n        return nAry(1, fn);\n    });\n\n    /**\n     * Returns a function of arity `n` from a (manually) curried function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Function\n     * @sig Number -> (a -> b) -> (a -> c)\n     * @param {Number} length The arity for the returned function.\n     * @param {Function} fn The function to uncurry.\n     * @return {Function} A new function.\n     * @see R.curry\n     * @example\n     *\n     *      var addFour = a => b => c => d => a + b + c + d;\n     *\n     *      var uncurriedAddFour = R.uncurryN(4, addFour);\n     *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n     */\n    var uncurryN = _curry2(function uncurryN(depth, fn) {\n        return curryN(depth, function () {\n            var currentDepth = 1;\n            var value = fn;\n            var idx = 0;\n            var endIdx;\n            while (currentDepth <= depth && typeof value === 'function') {\n                endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n                value = value.apply(this, _slice(arguments, idx, endIdx));\n                currentDepth += 1;\n                idx = endIdx;\n            }\n            return value;\n        });\n    });\n\n    /**\n     * Builds a list from a seed value. Accepts an iterator function, which returns\n     * either false to stop iteration or an array of length 2 containing the value\n     * to add to the resulting list and the seed to be used in the next call to the\n     * iterator function.\n     *\n     * The iterator function receives one argument: *(seed)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (a -> [b]) -> * -> [b]\n     * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n     *        either false to quit iteration or an array of length two to proceed. The element\n     *        at index 0 of this array will be added to the resulting array, and the element\n     *        at index 1 will be passed to the next call to `fn`.\n     * @param {*} seed The seed value.\n     * @return {Array} The final list.\n     * @example\n     *\n     *      var f = n => n > 50 ? false : [-n, n + 10];\n     *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n     */\n    var unfold = _curry2(function unfold(fn, seed) {\n        var pair = fn(seed);\n        var result = [];\n        while (pair && pair.length) {\n            result[result.length] = pair[0];\n            pair = fn(pair[1]);\n        }\n        return result;\n    });\n\n    /**\n     * Returns a new list containing only one copy of each element in the original\n     * list, based upon the value returned by applying the supplied predicate to\n     * two list elements. Prefers the first item if two items compare equal based\n     * on the predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category List\n     * @sig (a, a -> Boolean) -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      var strEq = R.eqBy(String);\n     *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n     *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n     *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n     *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\n     */\n    var uniqWith = _curry2(function uniqWith(pred, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [];\n        var item;\n        while (idx < len) {\n            item = list[idx];\n            if (!_containsWith(pred, item, result)) {\n                result[result.length] = item;\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Tests the final argument by passing it to the given predicate function. If\n     * the predicate is not satisfied, the function will return the result of\n     * calling the `whenFalseFn` function with the same argument. If the predicate\n     * is satisfied, the argument is returned as is.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Logic\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n     * @param {Function} pred        A predicate function\n     * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates\n     *                               to a falsy value.\n     * @param {*}        x           An object to test with the `pred` function and\n     *                               pass to `whenFalseFn` if necessary.\n     * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.\n     * @see R.ifElse, R.when\n     * @example\n     *\n     *      // coerceArray :: (a|[a]) -> [a]\n     *      var coerceArray = R.unless(R.isArrayLike, R.of);\n     *      coerceArray([1, 2, 3]); //=> [1, 2, 3]\n     *      coerceArray(1);         //=> [1]\n     */\n    var unless = _curry3(function unless(pred, whenFalseFn, x) {\n        return pred(x) ? x : whenFalseFn(x);\n    });\n\n    /**\n     * Takes a predicate, a transformation function, and an initial value,\n     * and returns a value of the same type as the initial value.\n     * It does so by applying the transformation until the predicate is satisfied,\n     * at which point it returns the satisfactory value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category Logic\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n     * @param {Function} pred A predicate function\n     * @param {Function} fn The iterator function\n     * @param {*} init Initial value\n     * @return {*} Final value that satisfies predicate\n     * @example\n     *\n     *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128\n     */\n    var until = _curry3(function until(pred, fn, init) {\n        var val = init;\n        while (!pred(val)) {\n            val = fn(val);\n        }\n        return val;\n    });\n\n    /**\n     * Returns a new copy of the array with the element at the provided index\n     * replaced with the given value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig Number -> a -> [a] -> [a]\n     * @param {Number} idx The index to update.\n     * @param {*} x The value to exist at the given index of the returned array.\n     * @param {Array|Arguments} list The source array-like object to be updated.\n     * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\n     * @see R.adjust\n     * @example\n     *\n     *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]\n     *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]\n     */\n    var update = _curry3(function update(idx, x, list) {\n        return adjust(always(x), idx, list);\n    });\n\n    /**\n     * Accepts a function `fn` and a list of transformer functions and returns a\n     * new curried function. When the new function is invoked, it calls the\n     * function `fn` with parameters consisting of the result of calling each\n     * supplied handler on successive arguments to the new function.\n     *\n     * If more arguments are passed to the returned function than transformer\n     * functions, those arguments are passed directly to `fn` as additional\n     * parameters. If you expect additional arguments that don't need to be\n     * transformed, although you can ignore them, it's best to pass an identity\n     * function so that the new function reports the correct arity.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n     * @param {Function} fn The function to wrap.\n     * @param {Array} transformers A list of transformer functions\n     * @return {Function} The wrapped function.\n     * @example\n     *\n     *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n     *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n     *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n     *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n     */\n    var useWith = _curry2(function useWith(fn, transformers) {\n        return curryN(transformers.length, function () {\n            var args = [];\n            var idx = 0;\n            while (idx < transformers.length) {\n                args.push(transformers[idx].call(this, arguments[idx]));\n                idx += 1;\n            }\n            return fn.apply(this, args.concat(_slice(arguments, transformers.length)));\n        });\n    });\n\n    /**\n     * Returns a list of all the enumerable own properties of the supplied object.\n     * Note that the order of the output array is not guaranteed across different\n     * JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> [v]\n     * @param {Object} obj The object to extract values from\n     * @return {Array} An array of the values of the object's own properties.\n     * @example\n     *\n     *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n     */\n    var values = _curry1(function values(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var vals = [];\n        var idx = 0;\n        while (idx < len) {\n            vals[idx] = obj[props[idx]];\n            idx += 1;\n        }\n        return vals;\n    });\n\n    /**\n     * Returns a list of all the properties, including prototype properties, of the\n     * supplied object.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig {k: v} -> [v]\n     * @param {Object} obj The object to extract values from\n     * @return {Array} An array of the values of the object's own and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.valuesIn(f); //=> ['X', 'Y']\n     */\n    var valuesIn = _curry1(function valuesIn(obj) {\n        var prop;\n        var vs = [];\n        for (prop in obj) {\n            vs[vs.length] = obj[prop];\n        }\n        return vs;\n    });\n\n    /**\n     * Returns a \"view\" of the given data structure, determined by the given lens.\n     * The lens's focus determines which portion of the data structure is visible.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> s -> a\n     * @param {Lens} lens\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.view(xLens, {x: 1, y: 2});  //=> 1\n     *      R.view(xLens, {x: 4, y: 2});  //=> 4\n     */\n    // `Const` is a functor that effectively ignores the function given to `map`.\n    // Using `Const` effectively ignores the setter function of the `lens`,\n    // leaving the value returned by the getter function unmodified.\n    var view = function () {\n        // `Const` is a functor that effectively ignores the function given to `map`.\n        var Const = function (x) {\n            return {\n                value: x,\n                map: function () {\n                    return this;\n                }\n            };\n        };\n        return _curry2(function view(lens, x) {\n            // Using `Const` effectively ignores the setter function of the `lens`,\n            // leaving the value returned by the getter function unmodified.\n            return lens(Const)(x).value;\n        });\n    }();\n\n    /**\n     * Tests the final argument by passing it to the given predicate function. If\n     * the predicate is satisfied, the function will return the result of calling\n     * the `whenTrueFn` function with the same argument. If the predicate is not\n     * satisfied, the argument is returned as is.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Logic\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n     * @param {Function} pred       A predicate function\n     * @param {Function} whenTrueFn A function to invoke when the `condition`\n     *                              evaluates to a truthy value.\n     * @param {*}        x          An object to test with the `pred` function and\n     *                              pass to `whenTrueFn` if necessary.\n     * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.\n     * @see R.ifElse, R.unless\n     * @example\n     *\n     *      // truncate :: String -> String\n     *      var truncate = R.when(\n     *        R.propSatisfies(R.gt(R.__, 10), 'length'),\n     *        R.pipe(R.take(10), R.append('…'), R.join(''))\n     *      );\n     *      truncate('12345');         //=> '12345'\n     *      truncate('0123456789ABC'); //=> '0123456789…'\n     */\n    var when = _curry3(function when(pred, whenTrueFn, x) {\n        return pred(x) ? whenTrueFn(x) : x;\n    });\n\n    /**\n     * Takes a spec object and a test object; returns true if the test satisfies\n     * the spec. Each of the spec's own properties must be a predicate function.\n     * Each predicate is applied to the value of the corresponding property of the\n     * test object. `where` returns true if all the predicates return true, false\n     * otherwise.\n     *\n     * `where` is well suited to declaratively expressing constraints for other\n     * functions such as `filter` and `find`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category Object\n     * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n     * @param {Object} spec\n     * @param {Object} testObj\n     * @return {Boolean}\n     * @example\n     *\n     *      // pred :: Object -> Boolean\n     *      var pred = where({\n     *        a: equals('foo'),\n     *        b: complement(equals('bar')),\n     *        x: gt(__, 10),\n     *        y: lt(__, 20)\n     *      });\n     *\n     *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n     *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n     */\n    var where = _curry2(function where(spec, testObj) {\n        for (var prop in spec) {\n            if (_has(prop, spec) && !spec[prop](testObj[prop])) {\n                return false;\n            }\n        }\n        return true;\n    });\n\n    /**\n     * Wrap a function inside another to allow you to make adjustments to the\n     * parameters, or do other processing either before the internal function is\n     * called or with its results.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)\n     * @param {Function} fn The function to wrap.\n     * @param {Function} wrapper The wrapper function.\n     * @return {Function} The wrapped function.\n     * @deprecated since v0.22.0\n     * @example\n     *\n     *      var greet = name => 'Hello ' + name;\n     *\n     *      var shoutedGreet = R.wrap(greet, (gr, name) => gr(name).toUpperCase());\n     *\n     *      shoutedGreet(\"Kathy\"); //=> \"HELLO KATHY\"\n     *\n     *      var shortenedGreet = R.wrap(greet, function(gr, name) {\n     *        return gr(name.substring(0, 3));\n     *      });\n     *      shortenedGreet(\"Robert\"); //=> \"Hello Rob\"\n     */\n    var wrap = _curry2(function wrap(fn, wrapper) {\n        return curryN(fn.length, function () {\n            return wrapper.apply(this, _concat([fn], arguments));\n        });\n    });\n\n    /**\n     * Creates a new list out of the two supplied by creating each possible pair\n     * from the lists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b] -> [[a,b]]\n     * @param {Array} as The first list.\n     * @param {Array} bs The second list.\n     * @return {Array} The list made by combining each possible pair from\n     *         `as` and `bs` into pairs (`[a, b]`).\n     * @example\n     *\n     *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\n     */\n    // = xprodWith(prepend); (takes about 3 times as long...)\n    var xprod = _curry2(function xprod(a, b) {\n        // = xprodWith(prepend); (takes about 3 times as long...)\n        var idx = 0;\n        var ilen = a.length;\n        var j;\n        var jlen = b.length;\n        var result = [];\n        while (idx < ilen) {\n            j = 0;\n            while (j < jlen) {\n                result[result.length] = [\n                    a[idx],\n                    b[j]\n                ];\n                j += 1;\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Creates a new list out of the two supplied by pairing up equally-positioned\n     * items from both lists. The returned list is truncated to the length of the\n     * shorter of the two input lists.\n     * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b] -> [[a,b]]\n     * @param {Array} list1 The first array to consider.\n     * @param {Array} list2 The second array to consider.\n     * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\n     * @example\n     *\n     *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n     */\n    var zip = _curry2(function zip(a, b) {\n        var rv = [];\n        var idx = 0;\n        var len = Math.min(a.length, b.length);\n        while (idx < len) {\n            rv[idx] = [\n                a[idx],\n                b[idx]\n            ];\n            idx += 1;\n        }\n        return rv;\n    });\n\n    /**\n     * Creates a new object out of a list of keys and a list of values.\n     * Key/value pairing is truncated to the length of the shorter of the two lists.\n     * Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [String] -> [*] -> {String: *}\n     * @param {Array} keys The array that will be properties on the output object.\n     * @param {Array} values The list of values on the output object.\n     * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n     * @example\n     *\n     *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n     */\n    var zipObj = _curry2(function zipObj(keys, values) {\n        var idx = 0;\n        var len = Math.min(keys.length, values.length);\n        var out = {};\n        while (idx < len) {\n            out[keys[idx]] = values[idx];\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Creates a new list out of the two supplied by applying the function to each\n     * equally-positioned pair in the lists. The returned list is truncated to the\n     * length of the shorter of the two input lists.\n     *\n     * @function\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,b -> c) -> [a] -> [b] -> [c]\n     * @param {Function} fn The function used to combine the two elements into one value.\n     * @param {Array} list1 The first array to consider.\n     * @param {Array} list2 The second array to consider.\n     * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`\n     *         using `fn`.\n     * @example\n     *\n     *      var f = (x, y) => {\n     *        // ...\n     *      };\n     *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n     *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\n     */\n    var zipWith = _curry3(function zipWith(fn, a, b) {\n        var rv = [];\n        var idx = 0;\n        var len = Math.min(a.length, b.length);\n        while (idx < len) {\n            rv[idx] = fn(a[idx], b[idx]);\n            idx += 1;\n        }\n        return rv;\n    });\n\n    /**\n     * A function that always returns `false`. Any passed in parameters are ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig * -> Boolean\n     * @param {*}\n     * @return {Boolean}\n     * @see R.always, R.T\n     * @example\n     *\n     *      R.F(); //=> false\n     */\n    var F = always(false);\n\n    /**\n     * A function that always returns `true`. Any passed in parameters are ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig * -> Boolean\n     * @param {*}\n     * @return {Boolean}\n     * @see R.always, R.F\n     * @example\n     *\n     *      R.T(); //=> true\n     */\n    var T = always(true);\n\n    /**\n     * Copies an object.\n     *\n     * @private\n     * @param {*} value The value to be copied\n     * @param {Array} refFrom Array containing the source references\n     * @param {Array} refTo Array containing the copied source references\n     * @param {Boolean} deep Whether or not to perform deep cloning.\n     * @return {*} The copied value.\n     */\n    var _clone = function _clone(value, refFrom, refTo, deep) {\n        var copy = function copy(copiedValue) {\n            var len = refFrom.length;\n            var idx = 0;\n            while (idx < len) {\n                if (value === refFrom[idx]) {\n                    return refTo[idx];\n                }\n                idx += 1;\n            }\n            refFrom[idx + 1] = value;\n            refTo[idx + 1] = copiedValue;\n            for (var key in value) {\n                copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];\n            }\n            return copiedValue;\n        };\n        switch (type(value)) {\n        case 'Object':\n            return copy({});\n        case 'Array':\n            return copy([]);\n        case 'Date':\n            return new Date(value.valueOf());\n        case 'RegExp':\n            return _cloneRegExp(value);\n        default:\n            return value;\n        }\n    };\n\n    var _createPartialApplicator = function _createPartialApplicator(concat) {\n        return _curry2(function (fn, args) {\n            return _arity(Math.max(0, fn.length - args.length), function () {\n                return fn.apply(this, concat(args, arguments));\n            });\n        });\n    };\n\n    var _dropLast = function dropLast(n, xs) {\n        return take(n < xs.length ? xs.length - n : 0, xs);\n    };\n\n    // Values of other types are only equal if identical.\n    var _equals = function _equals(a, b, stackA, stackB) {\n        if (identical(a, b)) {\n            return true;\n        }\n        if (type(a) !== type(b)) {\n            return false;\n        }\n        if (a == null || b == null) {\n            return false;\n        }\n        if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n            return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);\n        }\n        switch (type(a)) {\n        case 'Arguments':\n        case 'Array':\n        case 'Object':\n            if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {\n                return a === b;\n            }\n            break;\n        case 'Boolean':\n        case 'Number':\n        case 'String':\n            if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {\n                return false;\n            }\n            break;\n        case 'Date':\n            if (!identical(a.valueOf(), b.valueOf())) {\n                return false;\n            }\n            break;\n        case 'Error':\n            return a.name === b.name && a.message === b.message;\n        case 'RegExp':\n            if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {\n                return false;\n            }\n            break;\n        case 'Map':\n        case 'Set':\n            if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {\n                return false;\n            }\n            break;\n        case 'Int8Array':\n        case 'Uint8Array':\n        case 'Uint8ClampedArray':\n        case 'Int16Array':\n        case 'Uint16Array':\n        case 'Int32Array':\n        case 'Uint32Array':\n        case 'Float32Array':\n        case 'Float64Array':\n            break;\n        case 'ArrayBuffer':\n            break;\n        default:\n            // Values of other types are only equal if identical.\n            return false;\n        }\n        var keysA = keys(a);\n        if (keysA.length !== keys(b).length) {\n            return false;\n        }\n        var idx = stackA.length - 1;\n        while (idx >= 0) {\n            if (stackA[idx] === a) {\n                return stackB[idx] === b;\n            }\n            idx -= 1;\n        }\n        stackA.push(a);\n        stackB.push(b);\n        idx = keysA.length - 1;\n        while (idx >= 0) {\n            var key = keysA[idx];\n            if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {\n                return false;\n            }\n            idx -= 1;\n        }\n        stackA.pop();\n        stackB.pop();\n        return true;\n    };\n\n    /**\n     * `_makeFlat` is a helper function that returns a one-level or fully recursive\n     * function based on the flag passed in.\n     *\n     * @private\n     */\n    var _makeFlat = function _makeFlat(recursive) {\n        return function flatt(list) {\n            var value, jlen, j;\n            var result = [];\n            var idx = 0;\n            var ilen = list.length;\n            while (idx < ilen) {\n                if (isArrayLike(list[idx])) {\n                    value = recursive ? flatt(list[idx]) : list[idx];\n                    j = 0;\n                    jlen = value.length;\n                    while (j < jlen) {\n                        result[result.length] = value[j];\n                        j += 1;\n                    }\n                } else {\n                    result[result.length] = list[idx];\n                }\n                idx += 1;\n            }\n            return result;\n        };\n    };\n\n    var _reduce = function () {\n        function _arrayReduce(xf, acc, list) {\n            var idx = 0;\n            var len = list.length;\n            while (idx < len) {\n                acc = xf['@@transducer/step'](acc, list[idx]);\n                if (acc && acc['@@transducer/reduced']) {\n                    acc = acc['@@transducer/value'];\n                    break;\n                }\n                idx += 1;\n            }\n            return xf['@@transducer/result'](acc);\n        }\n        function _iterableReduce(xf, acc, iter) {\n            var step = iter.next();\n            while (!step.done) {\n                acc = xf['@@transducer/step'](acc, step.value);\n                if (acc && acc['@@transducer/reduced']) {\n                    acc = acc['@@transducer/value'];\n                    break;\n                }\n                step = iter.next();\n            }\n            return xf['@@transducer/result'](acc);\n        }\n        function _methodReduce(xf, acc, obj) {\n            return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));\n        }\n        var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';\n        return function _reduce(fn, acc, list) {\n            if (typeof fn === 'function') {\n                fn = _xwrap(fn);\n            }\n            if (isArrayLike(list)) {\n                return _arrayReduce(fn, acc, list);\n            }\n            if (typeof list.reduce === 'function') {\n                return _methodReduce(fn, acc, list);\n            }\n            if (list[symIterator] != null) {\n                return _iterableReduce(fn, acc, list[symIterator]());\n            }\n            if (typeof list.next === 'function') {\n                return _iterableReduce(fn, acc, list);\n            }\n            throw new TypeError('reduce: list must be array or iterable');\n        };\n    }();\n\n    var _stepCat = function () {\n        var _stepCatArray = {\n            '@@transducer/init': Array,\n            '@@transducer/step': function (xs, x) {\n                xs.push(x);\n                return xs;\n            },\n            '@@transducer/result': _identity\n        };\n        var _stepCatString = {\n            '@@transducer/init': String,\n            '@@transducer/step': function (a, b) {\n                return a + b;\n            },\n            '@@transducer/result': _identity\n        };\n        var _stepCatObject = {\n            '@@transducer/init': Object,\n            '@@transducer/step': function (result, input) {\n                return _assign(result, isArrayLike(input) ? objOf(input[0], input[1]) : input);\n            },\n            '@@transducer/result': _identity\n        };\n        return function _stepCat(obj) {\n            if (_isTransformer(obj)) {\n                return obj;\n            }\n            if (isArrayLike(obj)) {\n                return _stepCatArray;\n            }\n            if (typeof obj === 'string') {\n                return _stepCatString;\n            }\n            if (typeof obj === 'object') {\n                return _stepCatObject;\n            }\n            throw new Error('Cannot create transformer for ' + obj);\n        };\n    }();\n\n    var _xdropLastWhile = function () {\n        function XDropLastWhile(fn, xf) {\n            this.f = fn;\n            this.retained = [];\n            this.xf = xf;\n        }\n        XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;\n        XDropLastWhile.prototype['@@transducer/result'] = function (result) {\n            this.retained = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XDropLastWhile.prototype['@@transducer/step'] = function (result, input) {\n            return this.f(input) ? this.retain(result, input) : this.flush(result, input);\n        };\n        XDropLastWhile.prototype.flush = function (result, input) {\n            result = _reduce(this.xf['@@transducer/step'], result, this.retained);\n            this.retained = [];\n            return this.xf['@@transducer/step'](result, input);\n        };\n        XDropLastWhile.prototype.retain = function (result, input) {\n            this.retained.push(input);\n            return result;\n        };\n        return _curry2(function _xdropLastWhile(fn, xf) {\n            return new XDropLastWhile(fn, xf);\n        });\n    }();\n\n    /**\n     * Creates a new list iteration function from an existing one by adding two new\n     * parameters to its callback function: the current index, and the entire list.\n     *\n     * This would turn, for instance, Ramda's simple `map` function into one that\n     * more closely resembles `Array.prototype.map`. Note that this will only work\n     * for functions in which the iteration callback function is the first\n     * parameter, and where the list is the last parameter. (This latter might be\n     * unimportant if the list parameter is not used.)\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Function\n     * @category List\n     * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)\n     * @param {Function} fn A list iteration function that does not pass index or list to its callback\n     * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n     * @example\n     *\n     *      var mapIndexed = R.addIndex(R.map);\n     *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n     *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n     */\n    var addIndex = _curry1(function addIndex(fn) {\n        return curryN(fn.length, function () {\n            var idx = 0;\n            var origFn = arguments[0];\n            var list = arguments[arguments.length - 1];\n            var args = _slice(arguments);\n            args[0] = function () {\n                var result = origFn.apply(this, _concat(arguments, [\n                    idx,\n                    list\n                ]));\n                idx += 1;\n                return result;\n            };\n            return fn.apply(this, args);\n        });\n    });\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts\n     * exactly 2 parameters. Any extraneous parameters will not be passed to the\n     * supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Function\n     * @sig (* -> c) -> (a, b -> c)\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity 2.\n     * @example\n     *\n     *      var takesThreeArgs = function(a, b, c) {\n     *        return [a, b, c];\n     *      };\n     *      takesThreeArgs.length; //=> 3\n     *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n     *\n     *      var takesTwoArgs = R.binary(takesThreeArgs);\n     *      takesTwoArgs.length; //=> 2\n     *      // Only 2 arguments are passed to the wrapped function\n     *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n     */\n    var binary = _curry1(function binary(fn) {\n        return nAry(2, fn);\n    });\n\n    /**\n     * Creates a deep copy of the value which may contain (nested) `Array`s and\n     * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are not\n     * copied, but assigned by their reference.\n     *\n     * Dispatches to a `clone` method if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {*} -> {*}\n     * @param {*} value The object or array to clone\n     * @return {*} A new object or array.\n     * @example\n     *\n     *      var objects = [{}, {}, {}];\n     *      var objectsClone = R.clone(objects);\n     *      objects[0] === objectsClone[0]; //=> false\n     */\n    var clone = _curry1(function clone(value) {\n        return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, [], [], true);\n    });\n\n    /**\n     * Returns a curried equivalent of the provided function. The curried function\n     * has two unusual capabilities. First, its arguments needn't be provided one\n     * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n     * following are equivalent:\n     *\n     *   - `g(1)(2)(3)`\n     *   - `g(1)(2, 3)`\n     *   - `g(1, 2)(3)`\n     *   - `g(1, 2, 3)`\n     *\n     * Secondly, the special placeholder value `R.__` may be used to specify\n     * \"gaps\", allowing partial application of any combination of arguments,\n     * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n     * following are equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (* -> a) -> (* -> a)\n     * @param {Function} fn The function to curry.\n     * @return {Function} A new, curried function.\n     * @see R.curryN\n     * @example\n     *\n     *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n     *\n     *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n     *      var f = curriedAddFourNumbers(1, 2);\n     *      var g = f(3);\n     *      g(4); //=> 10\n     */\n    var curry = _curry1(function curry(fn) {\n        return curryN(fn.length, fn);\n    });\n\n    /**\n     * Returns all but the first `n` elements of the given list, string, or\n     * transducer/transformer (or object with a `drop` method).\n     *\n     * Dispatches to the `drop` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n\n     * @param {*} list\n     * @return {*}\n     * @see R.take, R.transduce\n     * @example\n     *\n     *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n     *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n     *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n     *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n     *      R.drop(3, 'ramda');               //=> 'da'\n     */\n    var drop = _curry2(_dispatchable('drop', _xdrop, function drop(n, xs) {\n        return slice(Math.max(0, n), Infinity, xs);\n    }));\n\n    /**\n     * Returns a list containing all but the last `n` elements of the given `list`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n The number of elements of `xs` to skip.\n     * @param {Array} xs The collection to consider.\n     * @return {Array}\n     * @see R.takeLast\n     * @example\n     *\n     *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n     *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n     *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n     *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n     *      R.dropLast(3, 'ramda');               //=> 'ra'\n     */\n    var dropLast = _curry2(_dispatchable('dropLast', _xdropLast, _dropLast));\n\n    /**\n     * Returns a new list excluding all the tailing elements of a given list which\n     * satisfy the supplied predicate function. It passes each value from the right\n     * to the supplied predicate function, skipping elements while the predicate\n     * function returns `true`. The predicate function is applied to one argument:\n     * *(value)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.takeLastWhile, R.addIndex\n     * @example\n     *\n     *      var lteThree = x => x <= 3;\n     *\n     *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n     */\n    var dropLastWhile = _curry2(_dispatchable('dropLastWhile', _xdropLastWhile, _dropLastWhile));\n\n    /**\n     * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n     * cyclical data structures.\n     *\n     * Dispatches symmetrically to the `equals` methods of both arguments, if\n     * present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Relation\n     * @sig a -> b -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @example\n     *\n     *      R.equals(1, 1); //=> true\n     *      R.equals(1, '1'); //=> false\n     *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n     *\n     *      var a = {}; a.v = a;\n     *      var b = {}; b.v = b;\n     *      R.equals(a, b); //=> true\n     */\n    var equals = _curry2(function equals(a, b) {\n        return _equals(a, b, [], []);\n    });\n\n    /**\n     * Takes a predicate and a \"filterable\", and returns a new filterable of the\n     * same type containing the members of the given filterable which satisfy the\n     * given predicate.\n     *\n     * Dispatches to the `filter` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Filterable f => (a -> Boolean) -> f a -> f a\n     * @param {Function} pred\n     * @param {Array} filterable\n     * @return {Array}\n     * @see R.reject, R.transduce, R.addIndex\n     * @example\n     *\n     *      var isEven = n => n % 2 === 0;\n     *\n     *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n     *\n     *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n     */\n    // else\n    var filter = _curry2(_dispatchable('filter', _xfilter, function (pred, filterable) {\n        return _isObject(filterable) ? _reduce(function (acc, key) {\n            if (pred(filterable[key])) {\n                acc[key] = filterable[key];\n            }\n            return acc;\n        }, {}, keys(filterable)) : // else\n        _filter(pred, filterable);\n    }));\n\n    /**\n     * Returns a new list by pulling every item out of it (and all its sub-arrays)\n     * and putting them in a new array, depth-first.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b]\n     * @param {Array} list The array to consider.\n     * @return {Array} The flattened list.\n     * @see R.unnest\n     * @example\n     *\n     *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n     *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n     */\n    var flatten = _curry1(_makeFlat(true));\n\n    /**\n     * Returns a new function much like the supplied one, except that the first two\n     * arguments' order is reversed.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)\n     * @param {Function} fn The function to invoke with its first two parameters reversed.\n     * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n     * @example\n     *\n     *      var mergeThree = (a, b, c) => [].concat(a, b, c);\n     *\n     *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n     *\n     *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n     */\n    var flip = _curry1(function flip(fn) {\n        return curry(function (a, b) {\n            var args = _slice(arguments);\n            args[0] = b;\n            args[1] = a;\n            return fn.apply(this, args);\n        });\n    });\n\n    /**\n     * Returns the first element of the given list or string. In some libraries\n     * this function is named `first`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> a | Undefined\n     * @sig String -> String\n     * @param {Array|String} list\n     * @return {*}\n     * @see R.tail, R.init, R.last\n     * @example\n     *\n     *      R.head(['fi', 'fo', 'fum']); //=> 'fi'\n     *      R.head([]); //=> undefined\n     *\n     *      R.head('abc'); //=> 'a'\n     *      R.head(''); //=> ''\n     */\n    var head = nth(0);\n\n    /**\n     * Returns all but the last element of the given list or string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @see R.last, R.head, R.tail\n     * @example\n     *\n     *      R.init([1, 2, 3]);  //=> [1, 2]\n     *      R.init([1, 2]);     //=> [1]\n     *      R.init([1]);        //=> []\n     *      R.init([]);         //=> []\n     *\n     *      R.init('abc');  //=> 'ab'\n     *      R.init('ab');   //=> 'a'\n     *      R.init('a');    //=> ''\n     *      R.init('');     //=> ''\n     */\n    var init = slice(0, -1);\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of those\n     * elements common to both lists. Duplication is determined according to the\n     * value returned by applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n     * @param {Function} pred A predicate function that determines whether\n     *        the two supplied elements are equal.\n     * @param {Array} list1 One list of items to compare\n     * @param {Array} list2 A second list of items to compare\n     * @return {Array} A new list containing those elements common to both lists.\n     * @see R.intersection\n     * @example\n     *\n     *      var buffaloSpringfield = [\n     *        {id: 824, name: 'Richie Furay'},\n     *        {id: 956, name: 'Dewey Martin'},\n     *        {id: 313, name: 'Bruce Palmer'},\n     *        {id: 456, name: 'Stephen Stills'},\n     *        {id: 177, name: 'Neil Young'}\n     *      ];\n     *      var csny = [\n     *        {id: 204, name: 'David Crosby'},\n     *        {id: 456, name: 'Stephen Stills'},\n     *        {id: 539, name: 'Graham Nash'},\n     *        {id: 177, name: 'Neil Young'}\n     *      ];\n     *\n     *      R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);\n     *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n     */\n    var intersectionWith = _curry3(function intersectionWith(pred, list1, list2) {\n        var lookupList, filteredList;\n        if (list1.length > list2.length) {\n            lookupList = list1;\n            filteredList = list2;\n        } else {\n            lookupList = list2;\n            filteredList = list1;\n        }\n        var results = [];\n        var idx = 0;\n        while (idx < filteredList.length) {\n            if (_containsWith(pred, filteredList[idx], lookupList)) {\n                results[results.length] = filteredList[idx];\n            }\n            idx += 1;\n        }\n        return uniqWith(pred, results);\n    });\n\n    /**\n     * Transforms the items of the list with the transducer and appends the\n     * transformed items to the accumulator using an appropriate iterator function\n     * based on the accumulator type.\n     *\n     * The accumulator can be an array, string, object or a transformer. Iterated\n     * items will be appended to arrays and concatenated to strings. Objects will\n     * be merged directly or 2-item arrays will be merged as key, value pairs.\n     *\n     * The accumulator can also be a transformer object that provides a 2-arity\n     * reducing iterator function, step, 0-arity initial value function, init, and\n     * 1-arity result extraction function result. The step function is used as the\n     * iterator function in reduce. The result function is used to convert the\n     * final accumulator into the return type and in most cases is R.identity. The\n     * init function is used to provide the initial accumulator.\n     *\n     * The iteration is performed with R.reduce after initializing the transducer.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig a -> (b -> b) -> [c] -> a\n     * @param {*} acc The initial accumulator value.\n     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n     *\n     *      R.into([], transducer, numbers); //=> [2, 3]\n     *\n     *      var intoArray = R.into([]);\n     *      intoArray(transducer, numbers); //=> [2, 3]\n     */\n    var into = _curry3(function into(acc, xf, list) {\n        return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);\n    });\n\n    /**\n     * Same as R.invertObj, however this accounts for objects with duplicate values\n     * by putting the values into an array.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {s: x} -> {x: [ s, ... ]}\n     * @param {Object} obj The object or array to invert\n     * @return {Object} out A new object with keys\n     * in an array.\n     * @example\n     *\n     *      var raceResultsByFirstName = {\n     *        first: 'alice',\n     *        second: 'jake',\n     *        third: 'alice',\n     *      };\n     *      R.invert(raceResultsByFirstName);\n     *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }\n     */\n    var invert = _curry1(function invert(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var idx = 0;\n        var out = {};\n        while (idx < len) {\n            var key = props[idx];\n            var val = obj[key];\n            var list = _has(val, out) ? out[val] : out[val] = [];\n            list[list.length] = key;\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new object with the keys of the given object as values, and the\n     * values of the given object, which are coerced to strings, as keys. Note\n     * that the last key found is preferred when handling the same value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {s: x} -> {x: s}\n     * @param {Object} obj The object or array to invert\n     * @return {Object} out A new object\n     * @example\n     *\n     *      var raceResults = {\n     *        first: 'alice',\n     *        second: 'jake'\n     *      };\n     *      R.invertObj(raceResults);\n     *      //=> { 'alice': 'first', 'jake':'second' }\n     *\n     *      // Alternatively:\n     *      var raceResults = ['alice', 'jake'];\n     *      R.invertObj(raceResults);\n     *      //=> { 'alice': '0', 'jake':'1' }\n     */\n    var invertObj = _curry1(function invertObj(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var idx = 0;\n        var out = {};\n        while (idx < len) {\n            var key = props[idx];\n            out[obj[key]] = key;\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns `true` if the given value is its type's empty value; `false`\n     * otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig a -> Boolean\n     * @param {*} x\n     * @return {Boolean}\n     * @see R.empty\n     * @example\n     *\n     *      R.isEmpty([1, 2, 3]);   //=> false\n     *      R.isEmpty([]);          //=> true\n     *      R.isEmpty('');          //=> true\n     *      R.isEmpty(null);        //=> false\n     *      R.isEmpty({});          //=> true\n     *      R.isEmpty({length: 0}); //=> false\n     */\n    var isEmpty = _curry1(function isEmpty(x) {\n        return x != null && equals(x, empty(x));\n    });\n\n    /**\n     * Returns the last element of the given list or string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @sig [a] -> a | Undefined\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @see R.init, R.head, R.tail\n     * @example\n     *\n     *      R.last(['fi', 'fo', 'fum']); //=> 'fum'\n     *      R.last([]); //=> undefined\n     *\n     *      R.last('abc'); //=> 'c'\n     *      R.last(''); //=> ''\n     */\n    var last = nth(-1);\n\n    /**\n     * Returns the position of the last occurrence of an item in an array, or -1 if\n     * the item is not included in the array. `R.equals` is used to determine\n     * equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Number\n     * @param {*} target The item to find.\n     * @param {Array} xs The array to search in.\n     * @return {Number} the index of the target, or -1 if the target is not found.\n     * @see R.indexOf\n     * @example\n     *\n     *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6\n     *      R.lastIndexOf(10, [1,2,3,4]); //=> -1\n     */\n    var lastIndexOf = _curry2(function lastIndexOf(target, xs) {\n        if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {\n            return xs.lastIndexOf(target);\n        } else {\n            var idx = xs.length - 1;\n            while (idx >= 0) {\n                if (equals(xs[idx], target)) {\n                    return idx;\n                }\n                idx -= 1;\n            }\n            return -1;\n        }\n    });\n\n    /**\n     * Takes a function and\n     * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n     * applies the function to each of the functor's values, and returns\n     * a functor of the same shape.\n     *\n     * Ramda provides suitable `map` implementations for `Array` and `Object`,\n     * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n     *\n     * Dispatches to the `map` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * Also treats functions as functors and will compose them together.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Functor f => (a -> b) -> f a -> f b\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {Array} list The list to be iterated over.\n     * @return {Array} The new list.\n     * @see R.transduce, R.addIndex\n     * @example\n     *\n     *      var double = x => x * 2;\n     *\n     *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n     *\n     *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n     */\n    var map = _curry2(_dispatchable('map', _xmap, function map(fn, functor) {\n        switch (Object.prototype.toString.call(functor)) {\n        case '[object Function]':\n            return curryN(functor.length, function () {\n                return fn.call(this, functor.apply(this, arguments));\n            });\n        case '[object Object]':\n            return _reduce(function (acc, key) {\n                acc[key] = fn(functor[key]);\n                return acc;\n            }, {}, keys(functor));\n        default:\n            return _map(fn, functor);\n        }\n    }));\n\n    /**\n     * An Object-specific version of `map`. The function is applied to three\n     * arguments: *(value, key, obj)*. If only the value is significant, use\n     * `map` instead.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig ((*, String, Object) -> *) -> Object -> Object\n     * @param {Function} fn\n     * @param {Object} obj\n     * @return {Object}\n     * @see R.map\n     * @example\n     *\n     *      var values = { x: 1, y: 2, z: 3 };\n     *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);\n     *\n     *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }\n     */\n    var mapObjIndexed = _curry2(function mapObjIndexed(fn, obj) {\n        return _reduce(function (acc, key) {\n            acc[key] = fn(obj[key], key, obj);\n            return acc;\n        }, {}, keys(obj));\n    });\n\n    /**\n     * Creates a new object with the own properties of the two provided objects. If\n     * a key exists in both objects, the provided function is applied to the values\n     * associated with the key in each object, with the result being used as the\n     * value associated with the key in the returned object. The key will be\n     * excluded from the returned object if the resulting value is `undefined`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Object\n     * @sig (a -> a -> a) -> {a} -> {a} -> {a}\n     * @param {Function} fn\n     * @param {Object} l\n     * @param {Object} r\n     * @return {Object}\n     * @see R.merge, R.mergeWithKey\n     * @example\n     *\n     *      R.mergeWith(R.concat,\n     *                  { a: true, values: [10, 20] },\n     *                  { b: true, values: [15, 35] });\n     *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n     */\n    var mergeWith = _curry3(function mergeWith(fn, l, r) {\n        return mergeWithKey(function (_, _l, _r) {\n            return fn(_l, _r);\n        }, l, r);\n    });\n\n    /**\n     * Takes a function `f` and a list of arguments, and returns a function `g`.\n     * When applied, `g` returns the result of applying `f` to the arguments\n     * provided initially followed by the arguments provided to `g`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n     * @param {Function} f\n     * @param {Array} args\n     * @return {Function}\n     * @see R.partialRight\n     * @example\n     *\n     *      var multiply = (a, b) => a * b;\n     *      var double = R.partial(multiply, [2]);\n     *      double(2); //=> 4\n     *\n     *      var greet = (salutation, title, firstName, lastName) =>\n     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n     *\n     *      var sayHello = R.partial(greet, ['Hello']);\n     *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);\n     *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n     */\n    var partial = _createPartialApplicator(_concat);\n\n    /**\n     * Takes a function `f` and a list of arguments, and returns a function `g`.\n     * When applied, `g` returns the result of applying `f` to the arguments\n     * provided to `g` followed by the arguments provided initially.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n     * @param {Function} f\n     * @param {Array} args\n     * @return {Function}\n     * @see R.partial\n     * @example\n     *\n     *      var greet = (salutation, title, firstName, lastName) =>\n     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n     *\n     *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n     *\n     *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n     */\n    var partialRight = _createPartialApplicator(flip(_concat));\n\n    /**\n     * Determines whether a nested path on an object has a specific value, in\n     * `R.equals` terms. Most likely used to filter a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Relation\n     * @sig [String] -> * -> {String: *} -> Boolean\n     * @param {Array} path The path of the nested property to use\n     * @param {*} val The value to compare the nested property with\n     * @param {Object} obj The object to check the nested property in\n     * @return {Boolean} `true` if the value equals the nested object property,\n     *         `false` otherwise.\n     * @example\n     *\n     *      var user1 = { address: { zipCode: 90210 } };\n     *      var user2 = { address: { zipCode: 55555 } };\n     *      var user3 = { name: 'Bob' };\n     *      var users = [ user1, user2, user3 ];\n     *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);\n     *      R.filter(isFamous, users); //=> [ user1 ]\n     */\n    var pathEq = _curry3(function pathEq(_path, val, obj) {\n        return equals(path(_path, obj), val);\n    });\n\n    /**\n     * Returns a new list by plucking the same named property off all objects in\n     * the list supplied.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig k -> [{k: v}] -> [v]\n     * @param {Number|String} key The key name to pluck off of each object.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of values for the given key.\n     * @see R.props\n     * @example\n     *\n     *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n     *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n     */\n    var pluck = _curry2(function pluck(p, list) {\n        return map(prop(p), list);\n    });\n\n    /**\n     * Reasonable analog to SQL `select` statement.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @category Relation\n     * @sig [k] -> [{k: v}] -> [{k: v}]\n     * @param {Array} props The property names to project\n     * @param {Array} objs The objects to query\n     * @return {Array} An array of objects with just the `props` properties.\n     * @example\n     *\n     *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};\n     *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};\n     *      var kids = [abby, fred];\n     *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]\n     */\n    // passing `identity` gives correct arity\n    var project = useWith(_map, [\n        pickAll,\n        identity\n    ]);\n\n    /**\n     * Returns `true` if the specified object property is equal, in `R.equals`\n     * terms, to the given value; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig String -> a -> Object -> Boolean\n     * @param {String} name\n     * @param {*} val\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.equals, R.propSatisfies\n     * @example\n     *\n     *      var abby = {name: 'Abby', age: 7, hair: 'blond'};\n     *      var fred = {name: 'Fred', age: 12, hair: 'brown'};\n     *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n     *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};\n     *      var kids = [abby, fred, rusty, alois];\n     *      var hasBrownHair = R.propEq('hair', 'brown');\n     *      R.filter(hasBrownHair, kids); //=> [fred, rusty]\n     */\n    var propEq = _curry3(function propEq(name, val, obj) {\n        return equals(val, obj[name]);\n    });\n\n    /**\n     * Returns a single item by iterating through the list, successively calling\n     * the iterator function and passing it an accumulator value and the current\n     * value from the array, and then passing the result to the next call.\n     *\n     * The iterator function receives two values: *(acc, value)*. It may use\n     * `R.reduced` to shortcut the iteration.\n     *\n     * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n     * arrays), unlike the native `Array.prototype.reduce` method. For more details\n     * on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n     *\n     * Dispatches to the `reduce` method of the third argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig ((a, b) -> a) -> a -> [b] -> a\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.reduced, R.addIndex\n     * @example\n     *\n     *      var numbers = [1, 2, 3];\n     *      var plus = (a, b) => a + b;\n     *\n     *      R.reduce(plus, 10, numbers); //=> 16\n     */\n    var reduce = _curry3(_reduce);\n\n    /**\n     * Groups the elements of the list according to the result of calling\n     * the String-returning function `keyFn` on each element and reduces the elements\n     * of each group to a single value via the reducer function `valueFn`.\n     *\n     * This function is basically a more general `groupBy` function.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category List\n     * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}\n     * @param {Function} valueFn The function that reduces the elements of each group to a single\n     *        value. Receives two values, accumulator for a particular group and the current element.\n     * @param {*} acc The (initial) accumulator value for each group.\n     * @param {Function} keyFn The function that maps the list's element into a key.\n     * @param {Array} list The array to group.\n     * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of\n     *         `valueFn` for elements which produced that key when passed to `keyFn`.\n     * @see R.groupBy, R.reduce\n     * @example\n     *\n     *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);\n     *      var namesByGrade = reduceToNamesBy(function(student) {\n     *        var score = student.score;\n     *        return score < 65 ? 'F' :\n     *               score < 70 ? 'D' :\n     *               score < 80 ? 'C' :\n     *               score < 90 ? 'B' : 'A';\n     *      });\n     *      var students = [{name: 'Lucy', score: 92},\n     *                      {name: 'Drew', score: 85},\n     *                      // ...\n     *                      {name: 'Bart', score: 62}];\n     *      namesByGrade(students);\n     *      // {\n     *      //   'A': ['Lucy'],\n     *      //   'B': ['Drew']\n     *      //   // ...,\n     *      //   'F': ['Bart']\n     *      // }\n     */\n    var reduceBy = _curryN(4, [], _dispatchable('reduceBy', _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {\n        return _reduce(function (acc, elt) {\n            var key = keyFn(elt);\n            acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);\n            return acc;\n        }, {}, list);\n    }));\n\n    /**\n     * Like `reduce`, `reduceWhile` returns a single item by iterating through\n     * the list, successively calling the iterator function. `reduceWhile` also\n     * takes a predicate that is evaluated before each step. If the predicate returns\n     * `false`, it \"short-circuits\" the iteration and returns the current value\n     * of the accumulator.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.22.0\n     * @category List\n     * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a\n     * @param {Function} pred The predicate. It is passed the accumulator and the\n     *        current element.\n     * @param {Function} fn The iterator function. Receives two values, the\n     *        accumulator and the current element.\n     * @param {*} a The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.reduce, R.reduced\n     * @example\n     *\n     *      var isOdd = (acc, x) => x % 2 === 1;\n     *      var xs = [1, 3, 5, 60, 777, 800];\n     *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9\n     *\n     *      var ys = [2, 4, 6]\n     *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111\n     */\n    var reduceWhile = _curryN(4, [], function _reduceWhile(pred, fn, a, list) {\n        return _reduce(function (acc, x) {\n            return pred(acc, x) ? fn(acc, x) : _reduced(acc);\n        }, a, list);\n    });\n\n    /**\n     * The complement of `filter`.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Filterable f => (a -> Boolean) -> f a -> f a\n     * @param {Function} pred\n     * @param {Array} filterable\n     * @return {Array}\n     * @see R.filter, R.transduce, R.addIndex\n     * @example\n     *\n     *      var isOdd = (n) => n % 2 === 1;\n     *\n     *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n     *\n     *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n     */\n    var reject = _curry2(function reject(pred, filterable) {\n        return filter(_complement(pred), filterable);\n    });\n\n    /**\n     * Returns a fixed list of size `n` containing a specified identical value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig a -> n -> [a]\n     * @param {*} value The value to repeat.\n     * @param {Number} n The desired size of the output list.\n     * @return {Array} A new array containing `n` `value`s.\n     * @example\n     *\n     *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n     *\n     *      var obj = {};\n     *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]\n     *      repeatedObjs[0] === repeatedObjs[1]; //=> true\n     */\n    var repeat = _curry2(function repeat(value, n) {\n        return times(always(value), n);\n    });\n\n    /**\n     * Adds together all the elements of a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list An array of numbers\n     * @return {Number} The sum of all the numbers in the list.\n     * @see R.reduce\n     * @example\n     *\n     *      R.sum([2,4,6,8,100,1]); //=> 121\n     */\n    var sum = reduce(add, 0);\n\n    /**\n     * Returns a new list containing the last `n` elements of the given list.\n     * If `n > list.length`, returns a list of `list.length` elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n The number of elements to return.\n     * @param {Array} xs The collection to consider.\n     * @return {Array}\n     * @see R.dropLast\n     * @example\n     *\n     *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n     *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n     *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.takeLast(3, 'ramda');               //=> 'mda'\n     */\n    var takeLast = _curry2(function takeLast(n, xs) {\n        return drop(n >= 0 ? xs.length - n : 0, xs);\n    });\n\n    /**\n     * Initializes a transducer using supplied iterator function. Returns a single\n     * item by iterating through the list, successively calling the transformed\n     * iterator function and passing it an accumulator value and the current value\n     * from the array, and then passing the result to the next call.\n     *\n     * The iterator function receives two values: *(acc, value)*. It will be\n     * wrapped as a transformer to initialize the transducer. A transformer can be\n     * passed directly in place of an iterator function. In both cases, iteration\n     * may be stopped early with the `R.reduced` function.\n     *\n     * A transducer is a function that accepts a transformer and returns a\n     * transformer and can be composed directly.\n     *\n     * A transformer is an an object that provides a 2-arity reducing iterator\n     * function, step, 0-arity initial value function, init, and 1-arity result\n     * extraction function, result. The step function is used as the iterator\n     * function in reduce. The result function is used to convert the final\n     * accumulator into the return type and in most cases is R.identity. The init\n     * function can be used to provide an initial accumulator, but is ignored by\n     * transduce.\n     *\n     * The iteration is performed with R.reduce after initializing the transducer.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig (c -> c) -> (a,b -> a) -> a -> [b] -> a\n     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array. Wrapped as transformer, if necessary, and used to\n     *        initialize the transducer\n     * @param {*} acc The initial accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.reduce, R.reduced, R.into\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n     *\n     *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n     */\n    var transduce = curryN(4, function transduce(xf, fn, acc, list) {\n        return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);\n    });\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of the elements\n     * of each list. Duplication is determined according to the value returned by\n     * applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The first and second lists concatenated, with\n     *         duplicates removed.\n     * @see R.union\n     * @example\n     *\n     *      var l1 = [{a: 1}, {a: 2}];\n     *      var l2 = [{a: 1}, {a: 4}];\n     *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n     */\n    var unionWith = _curry3(function unionWith(pred, list1, list2) {\n        return uniqWith(pred, _concat(list1, list2));\n    });\n\n    /**\n     * Takes a spec object and a test object; returns true if the test satisfies\n     * the spec, false otherwise. An object satisfies the spec if, for each of the\n     * spec's own properties, accessing that property of the object gives the same\n     * value (in `R.equals` terms) as accessing that property of the spec.\n     *\n     * `whereEq` is a specialization of [`where`](#where).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @sig {String: *} -> {String: *} -> Boolean\n     * @param {Object} spec\n     * @param {Object} testObj\n     * @return {Boolean}\n     * @see R.where\n     * @example\n     *\n     *      // pred :: Object -> Boolean\n     *      var pred = R.whereEq({a: 1, b: 2});\n     *\n     *      pred({a: 1});              //=> false\n     *      pred({a: 1, b: 2});        //=> true\n     *      pred({a: 1, b: 2, c: 3});  //=> true\n     *      pred({a: 1, b: 1});        //=> false\n     */\n    var whereEq = _curry2(function whereEq(spec, testObj) {\n        return where(map(equals, spec), testObj);\n    });\n\n    var _flatCat = function () {\n        var preservingReduced = function (xf) {\n            return {\n                '@@transducer/init': _xfBase.init,\n                '@@transducer/result': function (result) {\n                    return xf['@@transducer/result'](result);\n                },\n                '@@transducer/step': function (result, input) {\n                    var ret = xf['@@transducer/step'](result, input);\n                    return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;\n                }\n            };\n        };\n        return function _xcat(xf) {\n            var rxf = preservingReduced(xf);\n            return {\n                '@@transducer/init': _xfBase.init,\n                '@@transducer/result': function (result) {\n                    return rxf['@@transducer/result'](result);\n                },\n                '@@transducer/step': function (result, input) {\n                    return !isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);\n                }\n            };\n        };\n    }();\n\n    // Array.prototype.indexOf doesn't exist below IE9\n    // manually crawl the list to distinguish between +0 and -0\n    // NaN\n    // non-zero numbers can utilise Set\n    // all these types can utilise Set\n    // null can utilise Set\n    // anything else not covered above, defer to R.equals\n    var _indexOf = function _indexOf(list, a, idx) {\n        var inf, item;\n        // Array.prototype.indexOf doesn't exist below IE9\n        if (typeof list.indexOf === 'function') {\n            switch (typeof a) {\n            case 'number':\n                if (a === 0) {\n                    // manually crawl the list to distinguish between +0 and -0\n                    inf = 1 / a;\n                    while (idx < list.length) {\n                        item = list[idx];\n                        if (item === 0 && 1 / item === inf) {\n                            return idx;\n                        }\n                        idx += 1;\n                    }\n                    return -1;\n                } else if (a !== a) {\n                    // NaN\n                    while (idx < list.length) {\n                        item = list[idx];\n                        if (typeof item === 'number' && item !== item) {\n                            return idx;\n                        }\n                        idx += 1;\n                    }\n                    return -1;\n                }\n                // non-zero numbers can utilise Set\n                return list.indexOf(a, idx);\n            // all these types can utilise Set\n            case 'string':\n            case 'boolean':\n            case 'function':\n            case 'undefined':\n                return list.indexOf(a, idx);\n            case 'object':\n                if (a === null) {\n                    // null can utilise Set\n                    return list.indexOf(a, idx);\n                }\n            }\n        }\n        // anything else not covered above, defer to R.equals\n        while (idx < list.length) {\n            if (equals(list[idx], a)) {\n                return idx;\n            }\n            idx += 1;\n        }\n        return -1;\n    };\n\n    var _xchain = _curry2(function _xchain(f, xf) {\n        return map(f, _flatCat(xf));\n    });\n\n    /**\n     * Takes a list of predicates and returns a predicate that returns true for a\n     * given list of arguments if every one of the provided predicates is satisfied\n     * by those arguments.\n     *\n     * The function returned is a curried function whose arity matches that of the\n     * highest-arity predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Logic\n     * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n     * @param {Array} preds\n     * @return {Function}\n     * @see R.anyPass\n     * @example\n     *\n     *      var isQueen = R.propEq('rank', 'Q');\n     *      var isSpade = R.propEq('suit', '♠︎');\n     *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);\n     *\n     *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n     *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\n     */\n    var allPass = _curry1(function allPass(preds) {\n        return curryN(reduce(max, 0, pluck('length', preds)), function () {\n            var idx = 0;\n            var len = preds.length;\n            while (idx < len) {\n                if (!preds[idx].apply(this, arguments)) {\n                    return false;\n                }\n                idx += 1;\n            }\n            return true;\n        });\n    });\n\n    /**\n     * Takes a list of predicates and returns a predicate that returns true for a\n     * given list of arguments if at least one of the provided predicates is\n     * satisfied by those arguments.\n     *\n     * The function returned is a curried function whose arity matches that of the\n     * highest-arity predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Logic\n     * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n     * @param {Array} preds\n     * @return {Function}\n     * @see R.allPass\n     * @example\n     *\n     *      var gte = R.anyPass([R.gt, R.equals]);\n     *\n     *      gte(3, 2); //=> true\n     *      gte(2, 2); //=> true\n     *      gte(2, 3); //=> false\n     */\n    var anyPass = _curry1(function anyPass(preds) {\n        return curryN(reduce(max, 0, pluck('length', preds)), function () {\n            var idx = 0;\n            var len = preds.length;\n            while (idx < len) {\n                if (preds[idx].apply(this, arguments)) {\n                    return true;\n                }\n                idx += 1;\n            }\n            return false;\n        });\n    });\n\n    /**\n     * ap applies a list of functions to a list of values.\n     *\n     * Dispatches to the `ap` method of the second argument, if present. Also\n     * treats curried functions as applicatives.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig [a -> b] -> [a] -> [b]\n     * @sig Apply f => f (a -> b) -> f a -> f b\n     * @param {Array} fns An array of functions\n     * @param {Array} vs An array of values\n     * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.\n     * @example\n     *\n     *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n     */\n    // else\n    var ap = _curry2(function ap(applicative, fn) {\n        return typeof applicative.ap === 'function' ? applicative.ap(fn) : typeof applicative === 'function' ? function (x) {\n            return applicative(x)(fn(x));\n        } : // else\n        _reduce(function (acc, f) {\n            return _concat(acc, map(f, fn));\n        }, [], applicative);\n    });\n\n    /**\n     * Given a spec object recursively mapping properties to functions, creates a\n     * function producing an object of the same structure, by mapping each property\n     * to the result of calling its associated function with the supplied arguments.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category Function\n     * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n     * @param {Object} spec an object recursively mapping properties to functions for\n     *        producing the values for these properties.\n     * @return {Function} A function that returns an object of the same structure\n     * as `spec', with each property set to the value returned by calling its\n     * associated function with the supplied arguments.\n     * @see R.converge, R.juxt\n     * @example\n     *\n     *      var getMetrics = R.applySpec({\n     *                                      sum: R.add,\n     *                                      nested: { mul: R.multiply }\n     *                                   });\n     *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n     */\n    var applySpec = _curry1(function applySpec(spec) {\n        spec = map(function (v) {\n            return typeof v == 'function' ? v : applySpec(v);\n        }, spec);\n        return curryN(reduce(max, 0, pluck('length', values(spec))), function () {\n            var args = arguments;\n            return map(function (f) {\n                return apply(f, args);\n            }, spec);\n        });\n    });\n\n    /**\n     * Returns the result of calling its first argument with the remaining\n     * arguments. This is occasionally useful as a converging function for\n     * `R.converge`: the left branch can produce a function while the right branch\n     * produces a value to be passed to that function as an argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig (*... -> a),*... -> a\n     * @param {Function} fn The function to apply to the remaining arguments.\n     * @param {...*} args Any number of positional arguments.\n     * @return {*}\n     * @see R.apply\n     * @example\n     *\n     *      var indentN = R.pipe(R.times(R.always(' ')),\n     *                           R.join(''),\n     *                           R.replace(/^(?!$)/gm));\n     *\n     *      var format = R.converge(R.call, [\n     *                                  R.pipe(R.prop('indent'), indentN),\n     *                                  R.prop('value')\n     *                              ]);\n     *\n     *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n     */\n    var call = curry(function call(fn) {\n        return fn.apply(this, _slice(arguments, 1));\n    });\n\n    /**\n     * `chain` maps a function over a list and concatenates the results. `chain`\n     * is also known as `flatMap` in some libraries\n     *\n     * Dispatches to the `chain` method of the second argument, if present,\n     * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig Chain m => (a -> m b) -> m a -> m b\n     * @param {Function} fn\n     * @param {Array} list\n     * @return {Array}\n     * @example\n     *\n     *      var duplicate = n => [n, n];\n     *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n     */\n    var chain = _curry2(_dispatchable('chain', _xchain, function chain(fn, monad) {\n        if (typeof monad === 'function') {\n            return function () {\n                return monad.call(this, fn.apply(this, arguments)).apply(this, arguments);\n            };\n        }\n        return _makeFlat(false)(map(fn, monad));\n    }));\n\n    /**\n     * Returns a function, `fn`, which encapsulates if/else-if/else logic.\n     * `R.cond` takes a list of [predicate, transform] pairs. All of the arguments\n     * to `fn` are applied to each of the predicates in turn until one returns a\n     * \"truthy\" value, at which point `fn` returns the result of applying its\n     * arguments to the corresponding transformer. If none of the predicates\n     * matches, `fn` returns undefined.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Logic\n     * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n     * @param {Array} pairs\n     * @return {Function}\n     * @example\n     *\n     *      var fn = R.cond([\n     *        [R.equals(0),   R.always('water freezes at 0°C')],\n     *        [R.equals(100), R.always('water boils at 100°C')],\n     *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n     *      ]);\n     *      fn(0); //=> 'water freezes at 0°C'\n     *      fn(50); //=> 'nothing special happens at 50°C'\n     *      fn(100); //=> 'water boils at 100°C'\n     */\n    var cond = _curry1(function cond(pairs) {\n        var arity = reduce(max, 0, map(function (pair) {\n            return pair[0].length;\n        }, pairs));\n        return _arity(arity, function () {\n            var idx = 0;\n            while (idx < pairs.length) {\n                if (pairs[idx][0].apply(this, arguments)) {\n                    return pairs[idx][1].apply(this, arguments);\n                }\n                idx += 1;\n            }\n        });\n    });\n\n    /**\n     * Wraps a constructor function inside a curried function that can be called\n     * with the same arguments and returns the same type. The arity of the function\n     * returned is specified to allow using variadic constructor functions.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Function\n     * @sig Number -> (* -> {*}) -> (* -> {*})\n     * @param {Number} n The arity of the constructor function.\n     * @param {Function} Fn The constructor function to wrap.\n     * @return {Function} A wrapped, curried constructor function.\n     * @example\n     *\n     *      // Variadic constructor function\n     *      var Widget = () => {\n     *        this.children = Array.prototype.slice.call(arguments);\n     *        // ...\n     *      };\n     *      Widget.prototype = {\n     *        // ...\n     *      };\n     *      var allConfigs = [\n     *        // ...\n     *      ];\n     *      R.map(R.constructN(1, Widget), allConfigs); // a list of Widgets\n     */\n    var constructN = _curry2(function constructN(n, Fn) {\n        if (n > 10) {\n            throw new Error('Constructor with greater than ten arguments');\n        }\n        if (n === 0) {\n            return function () {\n                return new Fn();\n            };\n        }\n        return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {\n            switch (arguments.length) {\n            case 1:\n                return new Fn($0);\n            case 2:\n                return new Fn($0, $1);\n            case 3:\n                return new Fn($0, $1, $2);\n            case 4:\n                return new Fn($0, $1, $2, $3);\n            case 5:\n                return new Fn($0, $1, $2, $3, $4);\n            case 6:\n                return new Fn($0, $1, $2, $3, $4, $5);\n            case 7:\n                return new Fn($0, $1, $2, $3, $4, $5, $6);\n            case 8:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7);\n            case 9:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);\n            case 10:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);\n            }\n        }));\n    });\n\n    /**\n     * Accepts a converging function and a list of branching functions and returns\n     * a new function. When invoked, this new function is applied to some\n     * arguments, each branching function is applied to those same arguments. The\n     * results of each branching function are passed as arguments to the converging\n     * function to produce the return value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.2\n     * @category Function\n     * @sig (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)\n     * @param {Function} after A function. `after` will be invoked with the return values of\n     *        `fn1` and `fn2` as its arguments.\n     * @param {Array} functions A list of functions.\n     * @return {Function} A new function.\n     * @example\n     *\n     *      var add = (a, b) => a + b;\n     *      var multiply = (a, b) => a * b;\n     *      var subtract = (a, b) => a - b;\n     *\n     *      //≅ multiply( add(1, 2), subtract(1, 2) );\n     *      R.converge(multiply, [add, subtract])(1, 2); //=> -3\n     *\n     *      var add3 = (a, b, c) => a + b + c;\n     *      R.converge(add3, [multiply, add, subtract])(1, 2); //=> 4\n     */\n    var converge = _curry2(function converge(after, fns) {\n        return curryN(reduce(max, 0, pluck('length', fns)), function () {\n            var args = arguments;\n            var context = this;\n            return after.apply(context, _map(function (fn) {\n                return fn.apply(context, args);\n            }, fns));\n        });\n    });\n\n    /**\n     * Counts the elements of a list according to how many match each value of a\n     * key generated by the supplied function. Returns an object mapping the keys\n     * produced by `fn` to the number of occurrences in the list. Note that all\n     * keys are coerced to strings because of how JavaScript objects work.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> String) -> [a] -> {*}\n     * @param {Function} fn The function used to map values to keys.\n     * @param {Array} list The list to count elements from.\n     * @return {Object} An object mapping keys to number of occurrences in the list.\n     * @example\n     *\n     *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n     *      var letters = R.split('', 'abcABCaaaBBc');\n     *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n     *      R.countBy(R.toLower)(letters);   //=> {'a': 5, 'b': 4, 'c': 3}\n     */\n    var countBy = reduceBy(function (acc, elem) {\n        return acc + 1;\n    }, 0);\n\n    /**\n     * Returns a new list without any consecutively repeating elements. Equality is\n     * determined by applying the supplied predicate two consecutive elements. The\n     * first element in a series of equal element is the one being preserved.\n     *\n     * Dispatches to the `dropRepeatsWith` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig (a, a -> Boolean) -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list The array to consider.\n     * @return {Array} `list` without repeating elements.\n     * @see R.transduce\n     * @example\n     *\n     *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n     *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n     */\n    var dropRepeatsWith = _curry2(_dispatchable('dropRepeatsWith', _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n        var result = [];\n        var idx = 1;\n        var len = list.length;\n        if (len !== 0) {\n            result[0] = list[0];\n            while (idx < len) {\n                if (!pred(last(result), list[idx])) {\n                    result[result.length] = list[idx];\n                }\n                idx += 1;\n            }\n        }\n        return result;\n    }));\n\n    /**\n     * Takes a function and two values in its domain and returns `true` if the\n     * values map to the same value in the codomain; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Relation\n     * @sig (a -> b) -> a -> a -> Boolean\n     * @param {Function} f\n     * @param {*} x\n     * @param {*} y\n     * @return {Boolean}\n     * @example\n     *\n     *      R.eqBy(Math.abs, 5, -5); //=> true\n     */\n    var eqBy = _curry3(function eqBy(f, x, y) {\n        return equals(f(x), f(y));\n    });\n\n    /**\n     * Reports whether two objects have the same value, in `R.equals` terms, for\n     * the specified property. Useful as a curried predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig k -> {k: v} -> {k: v} -> Boolean\n     * @param {String} prop The name of the property to compare\n     * @param {Object} obj1\n     * @param {Object} obj2\n     * @return {Boolean}\n     *\n     * @example\n     *\n     *      var o1 = { a: 1, b: 2, c: 3, d: 4 };\n     *      var o2 = { a: 10, b: 20, c: 3, d: 40 };\n     *      R.eqProps('a', o1, o2); //=> false\n     *      R.eqProps('c', o1, o2); //=> true\n     */\n    var eqProps = _curry3(function eqProps(prop, obj1, obj2) {\n        return equals(obj1[prop], obj2[prop]);\n    });\n\n    /**\n     * Splits a list into sub-lists stored in an object, based on the result of\n     * calling a String-returning function on each element, and grouping the\n     * results according to values returned.\n     *\n     * Dispatches to the `groupBy` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> String) -> [a] -> {String: [a]}\n     * @param {Function} fn Function :: a -> String\n     * @param {Array} list The array to group\n     * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements\n     *         that produced that key when passed to `fn`.\n     * @see R.transduce\n     * @example\n     *\n     *      var byGrade = R.groupBy(function(student) {\n     *        var score = student.score;\n     *        return score < 65 ? 'F' :\n     *               score < 70 ? 'D' :\n     *               score < 80 ? 'C' :\n     *               score < 90 ? 'B' : 'A';\n     *      });\n     *      var students = [{name: 'Abby', score: 84},\n     *                      {name: 'Eddy', score: 58},\n     *                      // ...\n     *                      {name: 'Jack', score: 69}];\n     *      byGrade(students);\n     *      // {\n     *      //   'A': [{name: 'Dianne', score: 99}],\n     *      //   'B': [{name: 'Abby', score: 84}]\n     *      //   // ...,\n     *      //   'F': [{name: 'Eddy', score: 58}]\n     *      // }\n     */\n    var groupBy = _curry2(_checkForMethod('groupBy', reduceBy(function (acc, item) {\n        if (acc == null) {\n            acc = [];\n        }\n        acc.push(item);\n        return acc;\n    }, null)));\n\n    /**\n     * Given a function that generates a key, turns a list of objects into an\n     * object indexing the objects by the given key. Note that if multiple\n     * objects generate the same value for the indexing key only the last value\n     * will be included in the generated object.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}\n     * @param {Function} fn Function :: a -> String\n     * @param {Array} array The array of objects to index\n     * @return {Object} An object indexing each array element by the given property.\n     * @example\n     *\n     *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];\n     *      R.indexBy(R.prop('id'), list);\n     *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}\n     */\n    var indexBy = reduceBy(function (acc, elem) {\n        return elem;\n    }, null);\n\n    /**\n     * Returns the position of the first occurrence of an item in an array, or -1\n     * if the item is not included in the array. `R.equals` is used to determine\n     * equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Number\n     * @param {*} target The item to find.\n     * @param {Array} xs The array to search in.\n     * @return {Number} the index of the target, or -1 if the target is not found.\n     * @see R.lastIndexOf\n     * @example\n     *\n     *      R.indexOf(3, [1,2,3,4]); //=> 2\n     *      R.indexOf(10, [1,2,3,4]); //=> -1\n     */\n    var indexOf = _curry2(function indexOf(target, xs) {\n        return typeof xs.indexOf === 'function' && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);\n    });\n\n    /**\n     * juxt applies a list of functions to a list of values.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Function\n     * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n     * @param {Array} fns An array of functions\n     * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n     * @see R.applySpec\n     * @example\n     *\n     *      var getRange = R.juxt([Math.min, Math.max]);\n     *      getRange(3, 4, 9, -3); //=> [-3, 9]\n     */\n    var juxt = _curry1(function juxt(fns) {\n        return converge(_arrayOf, fns);\n    });\n\n    /**\n     * Returns a lens for the given getter and setter functions. The getter \"gets\"\n     * the value of the focus; the setter \"sets\" the value of the focus. The setter\n     * should not mutate the data structure.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n     * @param {Function} getter\n     * @param {Function} setter\n     * @return {Lens}\n     * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lens(R.prop('x'), R.assoc('x'));\n     *\n     *      R.view(xLens, {x: 1, y: 2});            //=> 1\n     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n     */\n    var lens = _curry2(function lens(getter, setter) {\n        return function (toFunctorFn) {\n            return function (target) {\n                return map(function (focus) {\n                    return setter(focus, target);\n                }, toFunctorFn(getter(target)));\n            };\n        };\n    });\n\n    /**\n     * Returns a lens whose focus is the specified index.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Number -> Lens s a\n     * @param {Number} n\n     * @return {Lens}\n     * @see R.view, R.set, R.over\n     * @example\n     *\n     *      var headLens = R.lensIndex(0);\n     *\n     *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'\n     *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']\n     *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']\n     */\n    var lensIndex = _curry1(function lensIndex(n) {\n        return lens(nth(n), update(n));\n    });\n\n    /**\n     * Returns a lens whose focus is the specified path.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig [String] -> Lens s a\n     * @param {Array} path The path to use.\n     * @return {Lens}\n     * @see R.view, R.set, R.over\n     * @example\n     *\n     *      var xyLens = R.lensPath(['x', 'y']);\n     *\n     *      R.view(xyLens, {x: {y: 2, z: 3}});            //=> 2\n     *      R.set(xyLens, 4, {x: {y: 2, z: 3}});          //=> {x: {y: 4, z: 3}}\n     *      R.over(xyLens, R.negate, {x: {y: 2, z: 3}});  //=> {x: {y: -2, z: 3}}\n     */\n    var lensPath = _curry1(function lensPath(p) {\n        return lens(path(p), assocPath(p));\n    });\n\n    /**\n     * Returns a lens whose focus is the specified property.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig String -> Lens s a\n     * @param {String} k\n     * @return {Lens}\n     * @see R.view, R.set, R.over\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.view(xLens, {x: 1, y: 2});            //=> 1\n     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n     */\n    var lensProp = _curry1(function lensProp(k) {\n        return lens(prop(k), assoc(k));\n    });\n\n    /**\n     * \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n     * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Function\n     * @sig Number -> (*... -> *) -> ([*]... -> [*])\n     * @param {Function} fn The function to lift into higher context\n     * @return {Function} The lifted function.\n     * @see R.lift, R.ap\n     * @example\n     *\n     *      var madd3 = R.liftN(3, R.curryN(3, (...args) => R.sum(args)));\n     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n     */\n    var liftN = _curry2(function liftN(arity, fn) {\n        var lifted = curryN(arity, fn);\n        return curryN(arity, function () {\n            return _reduce(ap, map(lifted, arguments[0]), _slice(arguments, 1));\n        });\n    });\n\n    /**\n     * Returns the mean of the given list of numbers.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list\n     * @return {Number}\n     * @example\n     *\n     *      R.mean([2, 7, 9]); //=> 6\n     *      R.mean([]); //=> NaN\n     */\n    var mean = _curry1(function mean(list) {\n        return sum(list) / list.length;\n    });\n\n    /**\n     * Returns the median of the given list of numbers.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list\n     * @return {Number}\n     * @example\n     *\n     *      R.median([2, 9, 7]); //=> 7\n     *      R.median([7, 2, 10, 9]); //=> 8\n     *      R.median([]); //=> NaN\n     */\n    var median = _curry1(function median(list) {\n        var len = list.length;\n        if (len === 0) {\n            return NaN;\n        }\n        var width = 2 - len % 2;\n        var idx = (len - width) / 2;\n        return mean(_slice(list).sort(function (a, b) {\n            return a < b ? -1 : a > b ? 1 : 0;\n        }).slice(idx, idx + width));\n    });\n\n    /**\n     * Takes a predicate and a list or other \"filterable\" object and returns the\n     * pair of filterable objects of the same type of elements which do and do not\n     * satisfy, the predicate, respectively.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\n     * @param {Function} pred A predicate to determine which side the element belongs to.\n     * @param {Array} filterable the list (or other filterable) to partition.\n     * @return {Array} An array, containing first the subset of elements that satisfy the\n     *         predicate, and second the subset of elements that do not satisfy.\n     * @see R.filter, R.reject\n     * @example\n     *\n     *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);\n     *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n     *\n     *      R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\n     *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\n     */\n    var partition = juxt([\n        filter,\n        reject\n    ]);\n\n    /**\n     * Performs left-to-right function composition. The leftmost function may have\n     * any arity; the remaining functions must be unary.\n     *\n     * In some libraries this function is named `sequence`.\n     *\n     * **Note:** The result of pipe is not automatically curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.compose\n     * @example\n     *\n     *      var f = R.pipe(Math.pow, R.negate, R.inc);\n     *\n     *      f(3, 4); // -(3^4) + 1\n     */\n    var pipe = function pipe() {\n        if (arguments.length === 0) {\n            throw new Error('pipe requires at least one argument');\n        }\n        return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));\n    };\n\n    /**\n     * Performs left-to-right composition of one or more Promise-returning\n     * functions. The leftmost function may have any arity; the remaining functions\n     * must be unary.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.composeP\n     * @example\n     *\n     *      //  followersForUser :: String -> Promise [User]\n     *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);\n     */\n    var pipeP = function pipeP() {\n        if (arguments.length === 0) {\n            throw new Error('pipeP requires at least one argument');\n        }\n        return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));\n    };\n\n    /**\n     * Multiplies together all the elements of a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list An array of numbers\n     * @return {Number} The product of all the numbers in the list.\n     * @see R.reduce\n     * @example\n     *\n     *      R.product([2,4,6,8,100,1]); //=> 38400\n     */\n    var product = reduce(multiply, 1);\n\n    /**\n     * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\n     * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\n     * Applicative of Traversable.\n     *\n     * Dispatches to the `sequence` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\n     * @param {Function} of\n     * @param {*} traversable\n     * @return {*}\n     * @see R.traverse\n     * @example\n     *\n     *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n     *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n     *\n     *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\n     *      R.sequence(R.of, Nothing());       //=> [Nothing()]\n     */\n    var sequence = _curry2(function sequence(of, traversable) {\n        return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (acc, x) {\n            return ap(map(prepend, x), acc);\n        }, of([]), traversable);\n    });\n\n    /**\n     * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n     * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n     * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\n     * into an Applicative of Traversable.\n     *\n     * Dispatches to the `sequence` method of the third argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)\n     * @param {Function} of\n     * @param {Function} f\n     * @param {*} traversable\n     * @return {*}\n     * @see R.sequence\n     * @example\n     *\n     *      // Returns `Nothing` if the given divisor is `0`\n     *      safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)\n     *\n     *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])\n     *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing\n     */\n    var traverse = _curry3(function traverse(of, f, traversable) {\n        return sequence(of, map(f, traversable));\n    });\n\n    /**\n     * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from\n     * any [Chain](https://github.com/fantasyland/fantasy-land#chain).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig Chain c => c (c a) -> c a\n     * @param {*} list\n     * @return {*}\n     * @see R.flatten, R.chain\n     * @example\n     *\n     *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]\n     *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]\n     */\n    var unnest = chain(_identity);\n\n    var _contains = function _contains(a, list) {\n        return _indexOf(list, a, 0) >= 0;\n    };\n\n    //  mapPairs :: (Object, [String]) -> [String]\n    var _toString = function _toString(x, seen) {\n        var recur = function recur(y) {\n            var xs = seen.concat([x]);\n            return _contains(y, xs) ? '<Circular>' : _toString(y, xs);\n        };\n        //  mapPairs :: (Object, [String]) -> [String]\n        var mapPairs = function (obj, keys) {\n            return _map(function (k) {\n                return _quote(k) + ': ' + recur(obj[k]);\n            }, keys.slice().sort());\n        };\n        switch (Object.prototype.toString.call(x)) {\n        case '[object Arguments]':\n            return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n        case '[object Array]':\n            return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {\n                return /^\\d+$/.test(k);\n            }, keys(x)))).join(', ') + ']';\n        case '[object Boolean]':\n            return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n        case '[object Date]':\n            return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n        case '[object Null]':\n            return 'null';\n        case '[object Number]':\n            return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n        case '[object String]':\n            return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n        case '[object Undefined]':\n            return 'undefined';\n        default:\n            if (typeof x.toString === 'function') {\n                var repr = x.toString();\n                if (repr !== '[object Object]') {\n                    return repr;\n                }\n            }\n            return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n        }\n    };\n\n    /**\n     * Performs right-to-left function composition. The rightmost function may have\n     * any arity; the remaining functions must be unary.\n     *\n     * **Note:** The result of compose is not automatically curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.pipe\n     * @example\n     *\n     *      var f = R.compose(R.inc, R.negate, Math.pow);\n     *\n     *      f(3, 4); // -(3^4) + 1\n     */\n    var compose = function compose() {\n        if (arguments.length === 0) {\n            throw new Error('compose requires at least one argument');\n        }\n        return pipe.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Returns the right-to-left Kleisli composition of the provided functions,\n     * each of which must return a value of a type supported by [`chain`](#chain).\n     *\n     * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Function\n     * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (m a -> m z)\n     * @param {...Function}\n     * @return {Function}\n     * @see R.pipeK\n     * @example\n     *\n     *      //  parseJson :: String -> Maybe *\n     *      //  get :: String -> Object -> Maybe *\n     *\n     *      //  getStateCode :: Maybe String -> Maybe String\n     *      var getStateCode = R.composeK(\n     *        R.compose(Maybe.of, R.toUpper),\n     *        get('state'),\n     *        get('address'),\n     *        get('user'),\n     *        parseJson\n     *      );\n     *\n     *      getStateCode(Maybe.of('{\"user\":{\"address\":{\"state\":\"ny\"}}}'));\n     *      //=> Just('NY')\n     *      getStateCode(Maybe.of('[Invalid JSON]'));\n     *      //=> Nothing()\n     */\n    var composeK = function composeK() {\n        return compose.apply(this, prepend(identity, map(chain, arguments)));\n    };\n\n    /**\n     * Performs right-to-left composition of one or more Promise-returning\n     * functions. The rightmost function may have any arity; the remaining\n     * functions must be unary.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.pipeP\n     * @example\n     *\n     *      //  followersForUser :: String -> Promise [User]\n     *      var followersForUser = R.composeP(db.getFollowers, db.getUserById);\n     */\n    var composeP = function composeP() {\n        if (arguments.length === 0) {\n            throw new Error('composeP requires at least one argument');\n        }\n        return pipeP.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Wraps a constructor function inside a curried function that can be called\n     * with the same arguments and returns the same type.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (* -> {*}) -> (* -> {*})\n     * @param {Function} Fn The constructor function to wrap.\n     * @return {Function} A wrapped, curried constructor function.\n     * @example\n     *\n     *      // Constructor function\n     *      var Widget = config => {\n     *        // ...\n     *      };\n     *      Widget.prototype = {\n     *        // ...\n     *      };\n     *      var allConfigs = [\n     *        // ...\n     *      ];\n     *      R.map(R.construct(Widget), allConfigs); // a list of Widgets\n     */\n    var construct = _curry1(function construct(Fn) {\n        return constructN(Fn.length, Fn);\n    });\n\n    /**\n     * Returns `true` if the specified value is equal, in `R.equals` terms, to at\n     * least one element of the given list; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Boolean\n     * @param {Object} a The item to compare against.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the item is in the list, `false` otherwise.\n     * @see R.any\n     * @example\n     *\n     *      R.contains(3, [1, 2, 3]); //=> true\n     *      R.contains(4, [1, 2, 3]); //=> false\n     *      R.contains([42], [[42]]); //=> true\n     */\n    var contains = _curry2(_contains);\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements in the first list not\n     * contained in the second list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` that are not in `list2`.\n     * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith\n     * @example\n     *\n     *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n     *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n     */\n    var difference = _curry2(function difference(first, second) {\n        var out = [];\n        var idx = 0;\n        var firstLen = first.length;\n        while (idx < firstLen) {\n            if (!_contains(first[idx], second) && !_contains(first[idx], out)) {\n                out[out.length] = first[idx];\n            }\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new list without any consecutively repeating elements. `R.equals`\n     * is used to determine equality.\n     *\n     * Dispatches to the `dropRepeats` method of the first argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig [a] -> [a]\n     * @param {Array} list The array to consider.\n     * @return {Array} `list` without repeating elements.\n     * @see R.transduce\n     * @example\n     *\n     *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n     */\n    var dropRepeats = _curry1(_dispatchable('dropRepeats', _xdropRepeatsWith(equals), dropRepeatsWith(equals)));\n\n    /**\n     * \"lifts\" a function of arity > 1 so that it may \"map over\" a list, Function or other\n     * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Function\n     * @sig (*... -> *) -> ([*]... -> [*])\n     * @param {Function} fn The function to lift into higher context\n     * @return {Function} The lifted function.\n     * @see R.liftN\n     * @example\n     *\n     *      var madd3 = R.lift(R.curry((a, b, c) => a + b + c));\n     *\n     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n     *\n     *      var madd5 = R.lift(R.curry((a, b, c, d, e) => a + b + c + d + e));\n     *\n     *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]\n     */\n    var lift = _curry1(function lift(fn) {\n        return liftN(fn.length, fn);\n    });\n\n    /**\n     * Returns a partial copy of an object omitting the keys specified.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [String] -> {String: *} -> {String: *}\n     * @param {Array} names an array of String property names to omit from the new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with properties from `names` not on it.\n     * @see R.pick\n     * @example\n     *\n     *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n     */\n    var omit = _curry2(function omit(names, obj) {\n        var result = {};\n        for (var prop in obj) {\n            if (!_contains(prop, names)) {\n                result[prop] = obj[prop];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Returns the left-to-right Kleisli composition of the provided functions,\n     * each of which must return a value of a type supported by [`chain`](#chain).\n     *\n     * `R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Function\n     * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (m a -> m z)\n     * @param {...Function}\n     * @return {Function}\n     * @see R.composeK\n     * @example\n     *\n     *      //  parseJson :: String -> Maybe *\n     *      //  get :: String -> Object -> Maybe *\n     *\n     *      //  getStateCode :: Maybe String -> Maybe String\n     *      var getStateCode = R.pipeK(\n     *        parseJson,\n     *        get('user'),\n     *        get('address'),\n     *        get('state'),\n     *        R.compose(Maybe.of, R.toUpper)\n     *      );\n     *\n     *      getStateCode(Maybe.of('{\"user\":{\"address\":{\"state\":\"ny\"}}}'));\n     *      //=> Just('NY')\n     *      getStateCode(Maybe.of('[Invalid JSON]'));\n     *      //=> Nothing()\n     */\n    var pipeK = function pipeK() {\n        return composeK.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Returns the string representation of the given value. `eval`'ing the output\n     * should result in a value equivalent to the input value. Many of the built-in\n     * `toString` methods do not satisfy this requirement.\n     *\n     * If the given value is an `[object Object]` with a `toString` method other\n     * than `Object.prototype.toString`, this method is invoked with no arguments\n     * to produce the return value. This means user-defined constructor functions\n     * can provide a suitable `toString` method. For example:\n     *\n     *     function Point(x, y) {\n     *       this.x = x;\n     *       this.y = y;\n     *     }\n     *\n     *     Point.prototype.toString = function() {\n     *       return 'new Point(' + this.x + ', ' + this.y + ')';\n     *     };\n     *\n     *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category String\n     * @sig * -> String\n     * @param {*} val\n     * @return {String}\n     * @example\n     *\n     *      R.toString(42); //=> '42'\n     *      R.toString('abc'); //=> '\"abc\"'\n     *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n     *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n     *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n     */\n    var toString = _curry1(function toString(val) {\n        return _toString(val, []);\n    });\n\n    /**\n     * Returns a new list without values in the first argument.\n     * `R.equals` is used to determine equality.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig [a] -> [a] -> [a]\n     * @param {Array} list1 The values to be removed from `list2`.\n     * @param {Array} list2 The array to remove values from.\n     * @return {Array} The new array without values in `list1`.\n     * @see R.transduce\n     * @example\n     *\n     *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n     */\n    var without = _curry2(function (xs, list) {\n        return reject(flip(_contains)(xs), list);\n    });\n\n    // A simple Set type that honours R.equals semantics\n    /* globals Set */\n    // until we figure out why jsdoc chokes on this\n    // @param item The item to add to the Set\n    // @returns {boolean} true if the item did not exist prior, otherwise false\n    //\n    //\n    // @param item The item to check for existence in the Set\n    // @returns {boolean} true if the item exists in the Set, otherwise false\n    //\n    //\n    // Combines the logic for checking whether an item is a member of the set and\n    // for adding a new item to the set.\n    //\n    // @param item       The item to check or add to the Set instance.\n    // @param shouldAdd  If true, the item will be added to the set if it doesn't\n    //                   already exist.\n    // @param set        The set instance to check or add to.\n    // @return {boolean} true if the item already existed, otherwise false.\n    //\n    // distinguish between +0 and -0\n    // these types can all utilise the native Set\n    // set._items['boolean'] holds a two element array\n    // representing [ falseExists, trueExists ]\n    // compare functions for reference equality\n    /* falls through */\n    // reduce the search size of heterogeneous sets by creating buckets\n    // for each type.\n    // scan through all previously applied items\n    var _Set = function () {\n        function _Set() {\n            /* globals Set */\n            this._nativeSet = typeof Set === 'function' ? new Set() : null;\n            this._items = {};\n        }\n        // until we figure out why jsdoc chokes on this\n        // @param item The item to add to the Set\n        // @returns {boolean} true if the item did not exist prior, otherwise false\n        //\n        _Set.prototype.add = function (item) {\n            return !hasOrAdd(item, true, this);\n        };\n        //\n        // @param item The item to check for existence in the Set\n        // @returns {boolean} true if the item exists in the Set, otherwise false\n        //\n        _Set.prototype.has = function (item) {\n            return hasOrAdd(item, false, this);\n        };\n        //\n        // Combines the logic for checking whether an item is a member of the set and\n        // for adding a new item to the set.\n        //\n        // @param item       The item to check or add to the Set instance.\n        // @param shouldAdd  If true, the item will be added to the set if it doesn't\n        //                   already exist.\n        // @param set        The set instance to check or add to.\n        // @return {boolean} true if the item already existed, otherwise false.\n        //\n        function hasOrAdd(item, shouldAdd, set) {\n            var type = typeof item;\n            var prevSize, newSize;\n            switch (type) {\n            case 'string':\n            case 'number':\n                // distinguish between +0 and -0\n                if (item === 0 && 1 / item === -Infinity) {\n                    if (set._items['-0']) {\n                        return true;\n                    } else {\n                        if (shouldAdd) {\n                            set._items['-0'] = true;\n                        }\n                        return false;\n                    }\n                }\n                // these types can all utilise the native Set\n                if (set._nativeSet !== null) {\n                    if (shouldAdd) {\n                        prevSize = set._nativeSet.size;\n                        set._nativeSet.add(item);\n                        newSize = set._nativeSet.size;\n                        return newSize === prevSize;\n                    } else {\n                        return set._nativeSet.has(item);\n                    }\n                } else {\n                    if (!(type in set._items)) {\n                        if (shouldAdd) {\n                            set._items[type] = {};\n                            set._items[type][item] = true;\n                        }\n                        return false;\n                    } else if (item in set._items[type]) {\n                        return true;\n                    } else {\n                        if (shouldAdd) {\n                            set._items[type][item] = true;\n                        }\n                        return false;\n                    }\n                }\n            case 'boolean':\n                // set._items['boolean'] holds a two element array\n                // representing [ falseExists, trueExists ]\n                if (type in set._items) {\n                    var bIdx = item ? 1 : 0;\n                    if (set._items[type][bIdx]) {\n                        return true;\n                    } else {\n                        if (shouldAdd) {\n                            set._items[type][bIdx] = true;\n                        }\n                        return false;\n                    }\n                } else {\n                    if (shouldAdd) {\n                        set._items[type] = item ? [\n                            false,\n                            true\n                        ] : [\n                            true,\n                            false\n                        ];\n                    }\n                    return false;\n                }\n            case 'function':\n                // compare functions for reference equality\n                if (set._nativeSet !== null) {\n                    if (shouldAdd) {\n                        prevSize = set._nativeSet.size;\n                        set._nativeSet.add(item);\n                        newSize = set._nativeSet.size;\n                        return newSize > prevSize;\n                    } else {\n                        return set._nativeSet.has(item);\n                    }\n                } else {\n                    if (!(type in set._items)) {\n                        if (shouldAdd) {\n                            set._items[type] = [item];\n                        }\n                        return false;\n                    }\n                    if (!_contains(item, set._items[type])) {\n                        if (shouldAdd) {\n                            set._items[type].push(item);\n                        }\n                        return false;\n                    }\n                    return true;\n                }\n            case 'undefined':\n                if (set._items[type]) {\n                    return true;\n                } else {\n                    if (shouldAdd) {\n                        set._items[type] = true;\n                    }\n                    return false;\n                }\n            case 'object':\n                if (item === null) {\n                    if (!set._items['null']) {\n                        if (shouldAdd) {\n                            set._items['null'] = true;\n                        }\n                        return false;\n                    }\n                    return true;\n                }\n            /* falls through */\n            default:\n                // reduce the search size of heterogeneous sets by creating buckets\n                // for each type.\n                type = Object.prototype.toString.call(item);\n                if (!(type in set._items)) {\n                    if (shouldAdd) {\n                        set._items[type] = [item];\n                    }\n                    return false;\n                }\n                // scan through all previously applied items\n                if (!_contains(item, set._items[type])) {\n                    if (shouldAdd) {\n                        set._items[type].push(item);\n                    }\n                    return false;\n                }\n                return true;\n            }\n        }\n        return _Set;\n    }();\n\n    /**\n     * A function wrapping calls to the two functions in an `&&` operation,\n     * returning the result of the first function if it is false-y and the result\n     * of the second function otherwise. Note that this is short-circuited,\n     * meaning that the second function will not be invoked if the first returns a\n     * false-y value.\n     *\n     * In addition to functions, `R.both` also accepts any fantasy-land compatible\n     * applicative functor.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n     * @param {Function} f a predicate\n     * @param {Function} g another predicate\n     * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n     * @see R.and\n     * @example\n     *\n     *      var gt10 = x => x > 10;\n     *      var even = x => x % 2 === 0;\n     *      var f = R.both(gt10, even);\n     *      f(100); //=> true\n     *      f(101); //=> false\n     */\n    var both = _curry2(function both(f, g) {\n        return _isFunction(f) ? function _both() {\n            return f.apply(this, arguments) && g.apply(this, arguments);\n        } : lift(and)(f, g);\n    });\n\n    /**\n     * Takes a function `f` and returns a function `g` such that:\n     *\n     *   - applying `g` to zero or more arguments will give __true__ if applying\n     *     the same arguments to `f` gives a logical __false__ value; and\n     *\n     *   - applying `g` to zero or more arguments will give __false__ if applying\n     *     the same arguments to `f` gives a logical __true__ value.\n     *\n     * `R.complement` will work on all other functors as well.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> *) -> (*... -> Boolean)\n     * @param {Function} f\n     * @return {Function}\n     * @see R.not\n     * @example\n     *\n     *      var isEven = n => n % 2 === 0;\n     *      var isOdd = R.complement(isEven);\n     *      isOdd(21); //=> true\n     *      isOdd(42); //=> false\n     */\n    var complement = lift(not);\n\n    /**\n     * Returns the result of concatenating the given lists or strings.\n     *\n     * Note: `R.concat` expects both arguments to be of the same type,\n     * unlike the native `Array.prototype.concat` method. It will throw\n     * an error if you `concat` an Array with a non-Array value.\n     *\n     * Dispatches to the `concat` method of the first argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a] -> [a]\n     * @sig String -> String -> String\n     * @param {Array|String} a\n     * @param {Array|String} b\n     * @return {Array|String}\n     *\n     * @example\n     *\n     *      R.concat([], []); //=> []\n     *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n     *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n     */\n    var concat = _curry2(function concat(a, b) {\n        if (a == null || !_isFunction(a.concat)) {\n            throw new TypeError(toString(a) + ' does not have a method named \"concat\"');\n        }\n        if (_isArray(a) && !_isArray(b)) {\n            throw new TypeError(toString(b) + ' is not an array');\n        }\n        return a.concat(b);\n    });\n\n    /**\n     * A function wrapping calls to the two functions in an `||` operation,\n     * returning the result of the first function if it is truth-y and the result\n     * of the second function otherwise. Note that this is short-circuited,\n     * meaning that the second function will not be invoked if the first returns a\n     * truth-y value.\n     *\n     * In addition to functions, `R.either` also accepts any fantasy-land compatible\n     * applicative functor.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n     * @param {Function} f a predicate\n     * @param {Function} g another predicate\n     * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n     * @see R.or\n     * @example\n     *\n     *      var gt10 = x => x > 10;\n     *      var even = x => x % 2 === 0;\n     *      var f = R.either(gt10, even);\n     *      f(101); //=> true\n     *      f(8); //=> true\n     */\n    var either = _curry2(function either(f, g) {\n        return _isFunction(f) ? function _either() {\n            return f.apply(this, arguments) || g.apply(this, arguments);\n        } : lift(or)(f, g);\n    });\n\n    /**\n     * Turns a named method with a specified arity into a function that can be\n     * called directly supplied with arguments and a target object.\n     *\n     * The returned function is curried and accepts `arity + 1` parameters where\n     * the final parameter is the target object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n     * @param {Number} arity Number of arguments the returned function should take\n     *        before the target object.\n     * @param {String} method Name of the method to call.\n     * @return {Function} A new curried function.\n     * @example\n     *\n     *      var sliceFrom = R.invoker(1, 'slice');\n     *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n     *      var sliceFrom6 = R.invoker(2, 'slice')(6);\n     *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n     */\n    var invoker = _curry2(function invoker(arity, method) {\n        return curryN(arity + 1, function () {\n            var target = arguments[arity];\n            if (target != null && _isFunction(target[method])) {\n                return target[method].apply(target, _slice(arguments, 0, arity));\n            }\n            throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n        });\n    });\n\n    /**\n     * Returns a string made by inserting the `separator` between each element and\n     * concatenating all the elements into a single string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig String -> [a] -> String\n     * @param {Number|String} separator The string used to separate the elements.\n     * @param {Array} xs The elements to join into a string.\n     * @return {String} str The string made by concatenating `xs` with `separator`.\n     * @see R.split\n     * @example\n     *\n     *      var spacer = R.join(' ');\n     *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n     *      R.join('|', [1, 2, 3]);    //=> '1|2|3'\n     */\n    var join = invoker(1, 'join');\n\n    /**\n     * Creates a new function that, when invoked, caches the result of calling `fn`\n     * for a given argument set and returns the result. Subsequent calls to the\n     * memoized `fn` with the same argument set will not result in an additional\n     * call to `fn`; instead, the cached result for that set of arguments will be\n     * returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (*... -> a) -> (*... -> a)\n     * @param {Function} fn The function to memoize.\n     * @return {Function} Memoized version of `fn`.\n     * @example\n     *\n     *      var count = 0;\n     *      var factorial = R.memoize(n => {\n     *        count += 1;\n     *        return R.product(R.range(1, n + 1));\n     *      });\n     *      factorial(5); //=> 120\n     *      factorial(5); //=> 120\n     *      factorial(5); //=> 120\n     *      count; //=> 1\n     */\n    var memoize = _curry1(function memoize(fn) {\n        var cache = {};\n        return _arity(fn.length, function () {\n            var key = toString(arguments);\n            if (!_has(key, cache)) {\n                cache[key] = fn.apply(this, arguments);\n            }\n            return cache[key];\n        });\n    });\n\n    /**\n     * Splits a string into an array of strings based on the given\n     * separator.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category String\n     * @sig (String | RegExp) -> String -> [String]\n     * @param {String|RegExp} sep The pattern.\n     * @param {String} str The string to separate into an array.\n     * @return {Array} The array of strings from `str` separated by `str`.\n     * @see R.join\n     * @example\n     *\n     *      var pathComponents = R.split('/');\n     *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n     *\n     *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n     */\n    var split = invoker(1, 'split');\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements contained in the first or\n     * second list, but not both.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` or `list2`, but not both.\n     * @see R.symmetricDifferenceWith, R.difference, R.differenceWith\n     * @example\n     *\n     *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\n     *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\n     */\n    var symmetricDifference = _curry2(function symmetricDifference(list1, list2) {\n        return concat(difference(list1, list2), difference(list2, list1));\n    });\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements contained in the first or\n     * second list, but not both. Duplication is determined according to the value\n     * returned by applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [a] -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` or `list2`, but not both.\n     * @see R.symmetricDifference, R.difference, R.differenceWith\n     * @example\n     *\n     *      var eqA = R.eqBy(R.prop('a'));\n     *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n     *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n     *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n     */\n    var symmetricDifferenceWith = _curry3(function symmetricDifferenceWith(pred, list1, list2) {\n        return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));\n    });\n\n    /**\n     * Determines whether a given string matches a given regular expression.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category String\n     * @sig RegExp -> String -> Boolean\n     * @param {RegExp} pattern\n     * @param {String} str\n     * @return {Boolean}\n     * @see R.match\n     * @example\n     *\n     *      R.test(/^x/, 'xyz'); //=> true\n     *      R.test(/^y/, 'xyz'); //=> false\n     */\n    var test = _curry2(function test(pattern, str) {\n        if (!_isRegExp(pattern)) {\n            throw new TypeError('\\u2018test\\u2019 requires a value of type RegExp as its first argument; received ' + toString(pattern));\n        }\n        return _cloneRegExp(pattern).test(str);\n    });\n\n    /**\n     * The lower case version of a string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to lower case.\n     * @return {String} The lower case version of `str`.\n     * @see R.toUpper\n     * @example\n     *\n     *      R.toLower('XYZ'); //=> 'xyz'\n     */\n    var toLower = invoker(0, 'toLowerCase');\n\n    /**\n     * The upper case version of a string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to upper case.\n     * @return {String} The upper case version of `str`.\n     * @see R.toLower\n     * @example\n     *\n     *      R.toUpper('abc'); //=> 'ABC'\n     */\n    var toUpper = invoker(0, 'toUpperCase');\n\n    /**\n     * Returns a new list containing only one copy of each element in the original\n     * list, based upon the value returned by applying the supplied function to\n     * each list element. Prefers the first item if the supplied function produces\n     * the same value on two items. `R.equals` is used for comparison.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> b) -> [a] -> [a]\n     * @param {Function} fn A function used to produce a value to use during comparisons.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n     */\n    var uniqBy = _curry2(function uniqBy(fn, list) {\n        var set = new _Set();\n        var result = [];\n        var idx = 0;\n        var appliedItem, item;\n        while (idx < list.length) {\n            item = list[idx];\n            appliedItem = fn(item);\n            if (set.add(appliedItem)) {\n                result.push(item);\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns a new list containing only one copy of each element in the original\n     * list. `R.equals` is used to determine equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a]\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      R.uniq([1, 1, 2, 1]); //=> [1, 2]\n     *      R.uniq([1, '1']);     //=> [1, '1']\n     *      R.uniq([[42], [42]]); //=> [[42]]\n     */\n    var uniq = uniqBy(identity);\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of those\n     * elements common to both lists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The list of elements found in both `list1` and `list2`.\n     * @see R.intersectionWith\n     * @example\n     *\n     *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n     */\n    var intersection = _curry2(function intersection(list1, list2) {\n        var lookupList, filteredList;\n        if (list1.length > list2.length) {\n            lookupList = list1;\n            filteredList = list2;\n        } else {\n            lookupList = list2;\n            filteredList = list1;\n        }\n        return uniq(_filter(flip(_contains)(lookupList), filteredList));\n    });\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of the elements\n     * of each list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} as The first list.\n     * @param {Array} bs The second list.\n     * @return {Array} The first and second lists concatenated, with\n     *         duplicates removed.\n     * @example\n     *\n     *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n     */\n    var union = _curry2(compose(uniq, _concat));\n\n    var R = {\n        F: F,\n        T: T,\n        __: __,\n        add: add,\n        addIndex: addIndex,\n        adjust: adjust,\n        all: all,\n        allPass: allPass,\n        always: always,\n        and: and,\n        any: any,\n        anyPass: anyPass,\n        ap: ap,\n        aperture: aperture,\n        append: append,\n        apply: apply,\n        applySpec: applySpec,\n        assoc: assoc,\n        assocPath: assocPath,\n        binary: binary,\n        bind: bind,\n        both: both,\n        call: call,\n        chain: chain,\n        clamp: clamp,\n        clone: clone,\n        comparator: comparator,\n        complement: complement,\n        compose: compose,\n        composeK: composeK,\n        composeP: composeP,\n        concat: concat,\n        cond: cond,\n        construct: construct,\n        constructN: constructN,\n        contains: contains,\n        converge: converge,\n        countBy: countBy,\n        curry: curry,\n        curryN: curryN,\n        dec: dec,\n        defaultTo: defaultTo,\n        difference: difference,\n        differenceWith: differenceWith,\n        dissoc: dissoc,\n        dissocPath: dissocPath,\n        divide: divide,\n        drop: drop,\n        dropLast: dropLast,\n        dropLastWhile: dropLastWhile,\n        dropRepeats: dropRepeats,\n        dropRepeatsWith: dropRepeatsWith,\n        dropWhile: dropWhile,\n        either: either,\n        empty: empty,\n        eqBy: eqBy,\n        eqProps: eqProps,\n        equals: equals,\n        evolve: evolve,\n        filter: filter,\n        find: find,\n        findIndex: findIndex,\n        findLast: findLast,\n        findLastIndex: findLastIndex,\n        flatten: flatten,\n        flip: flip,\n        forEach: forEach,\n        fromPairs: fromPairs,\n        groupBy: groupBy,\n        groupWith: groupWith,\n        gt: gt,\n        gte: gte,\n        has: has,\n        hasIn: hasIn,\n        head: head,\n        identical: identical,\n        identity: identity,\n        ifElse: ifElse,\n        inc: inc,\n        indexBy: indexBy,\n        indexOf: indexOf,\n        init: init,\n        insert: insert,\n        insertAll: insertAll,\n        intersection: intersection,\n        intersectionWith: intersectionWith,\n        intersperse: intersperse,\n        into: into,\n        invert: invert,\n        invertObj: invertObj,\n        invoker: invoker,\n        is: is,\n        isArrayLike: isArrayLike,\n        isEmpty: isEmpty,\n        isNil: isNil,\n        join: join,\n        juxt: juxt,\n        keys: keys,\n        keysIn: keysIn,\n        last: last,\n        lastIndexOf: lastIndexOf,\n        length: length,\n        lens: lens,\n        lensIndex: lensIndex,\n        lensPath: lensPath,\n        lensProp: lensProp,\n        lift: lift,\n        liftN: liftN,\n        lt: lt,\n        lte: lte,\n        map: map,\n        mapAccum: mapAccum,\n        mapAccumRight: mapAccumRight,\n        mapObjIndexed: mapObjIndexed,\n        match: match,\n        mathMod: mathMod,\n        max: max,\n        maxBy: maxBy,\n        mean: mean,\n        median: median,\n        memoize: memoize,\n        merge: merge,\n        mergeAll: mergeAll,\n        mergeWith: mergeWith,\n        mergeWithKey: mergeWithKey,\n        min: min,\n        minBy: minBy,\n        modulo: modulo,\n        multiply: multiply,\n        nAry: nAry,\n        negate: negate,\n        none: none,\n        not: not,\n        nth: nth,\n        nthArg: nthArg,\n        objOf: objOf,\n        of: of,\n        omit: omit,\n        once: once,\n        or: or,\n        over: over,\n        pair: pair,\n        partial: partial,\n        partialRight: partialRight,\n        partition: partition,\n        path: path,\n        pathEq: pathEq,\n        pathOr: pathOr,\n        pathSatisfies: pathSatisfies,\n        pick: pick,\n        pickAll: pickAll,\n        pickBy: pickBy,\n        pipe: pipe,\n        pipeK: pipeK,\n        pipeP: pipeP,\n        pluck: pluck,\n        prepend: prepend,\n        product: product,\n        project: project,\n        prop: prop,\n        propEq: propEq,\n        propIs: propIs,\n        propOr: propOr,\n        propSatisfies: propSatisfies,\n        props: props,\n        range: range,\n        reduce: reduce,\n        reduceBy: reduceBy,\n        reduceRight: reduceRight,\n        reduceWhile: reduceWhile,\n        reduced: reduced,\n        reject: reject,\n        remove: remove,\n        repeat: repeat,\n        replace: replace,\n        reverse: reverse,\n        scan: scan,\n        sequence: sequence,\n        set: set,\n        slice: slice,\n        sort: sort,\n        sortBy: sortBy,\n        split: split,\n        splitAt: splitAt,\n        splitEvery: splitEvery,\n        splitWhen: splitWhen,\n        subtract: subtract,\n        sum: sum,\n        symmetricDifference: symmetricDifference,\n        symmetricDifferenceWith: symmetricDifferenceWith,\n        tail: tail,\n        take: take,\n        takeLast: takeLast,\n        takeLastWhile: takeLastWhile,\n        takeWhile: takeWhile,\n        tap: tap,\n        test: test,\n        times: times,\n        toLower: toLower,\n        toPairs: toPairs,\n        toPairsIn: toPairsIn,\n        toString: toString,\n        toUpper: toUpper,\n        transduce: transduce,\n        transpose: transpose,\n        traverse: traverse,\n        trim: trim,\n        tryCatch: tryCatch,\n        type: type,\n        unapply: unapply,\n        unary: unary,\n        uncurryN: uncurryN,\n        unfold: unfold,\n        union: union,\n        unionWith: unionWith,\n        uniq: uniq,\n        uniqBy: uniqBy,\n        uniqWith: uniqWith,\n        unless: unless,\n        unnest: unnest,\n        until: until,\n        update: update,\n        useWith: useWith,\n        values: values,\n        valuesIn: valuesIn,\n        view: view,\n        when: when,\n        where: where,\n        whereEq: whereEq,\n        without: without,\n        wrap: wrap,\n        xprod: xprod,\n        zip: zip,\n        zipObj: zipObj,\n        zipWith: zipWith\n    };\n  /* eslint-env amd */\n\n  /* TEST_ENTRY_POINT */\n\n  if (typeof exports === 'object') {\n    module.exports = R;\n  } else if (typeof define === 'function' && define.amd) {\n    define(function() { return R; });\n  } else {\n    this.R = R;\n  }\n\n}.call(this));\n"},"lineCount":8833}},"error":null,"hash":"eb55b04ee42b8d8d79f48b3a7fff953a","cacheData":{"env":{}}}